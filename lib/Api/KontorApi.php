<?php
/**
 * KontorApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SpedV API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * KontorApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class KontorApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'v1KontorGameJobsAvailableGet' => [
            'application/json',
        ],
        'v1KontorGameJobsGet' => [
            'application/json',
        ],
        'v1KontorGameJobsJobidGet' => [
            'application/json',
        ],
        'v1KontorGamePartsAvailableGet' => [
            'application/json',
        ],
        'v1KontorGamePartsGet' => [
            'application/json',
        ],
        'v1KontorGamePartsPartidGet' => [
            'application/json',
        ],
        'v1KontorGamePartsPartidJobsGet' => [
            'application/json',
        ],
        'v1KontorGameTrailersGet' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation v1KontorGameJobsAvailableGet
     *
     * @param  \OpenAPI\Client\Model\FPHSpedVAPIEnumsGameEnum $game 0 &#x3D; ETS2  1 &#x3D; ATS  -1 &#x3D; NotSet (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1KontorGameJobsAvailableGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\FPHSpedVAPIObjectsKontorJobOffer[]
     */
    public function v1KontorGameJobsAvailableGet($game, string $contentType = self::contentTypes['v1KontorGameJobsAvailableGet'][0])
    {
        list($response) = $this->v1KontorGameJobsAvailableGetWithHttpInfo($game, $contentType);
        return $response;
    }

    /**
     * Operation v1KontorGameJobsAvailableGetWithHttpInfo
     *
     * @param  \OpenAPI\Client\Model\FPHSpedVAPIEnumsGameEnum $game 0 &#x3D; ETS2  1 &#x3D; ATS  -1 &#x3D; NotSet (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1KontorGameJobsAvailableGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\FPHSpedVAPIObjectsKontorJobOffer[], HTTP status code, HTTP response headers (array of strings)
     */
    public function v1KontorGameJobsAvailableGetWithHttpInfo($game, string $contentType = self::contentTypes['v1KontorGameJobsAvailableGet'][0])
    {
        $request = $this->v1KontorGameJobsAvailableGetRequest($game, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\FPHSpedVAPIObjectsKontorJobOffer[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\FPHSpedVAPIObjectsKontorJobOffer[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\FPHSpedVAPIObjectsKontorJobOffer[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\FPHSpedVAPIObjectsKontorJobOffer[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\FPHSpedVAPIObjectsKontorJobOffer[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1KontorGameJobsAvailableGetAsync
     *
     * @param  \OpenAPI\Client\Model\FPHSpedVAPIEnumsGameEnum $game 0 &#x3D; ETS2  1 &#x3D; ATS  -1 &#x3D; NotSet (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1KontorGameJobsAvailableGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1KontorGameJobsAvailableGetAsync($game, string $contentType = self::contentTypes['v1KontorGameJobsAvailableGet'][0])
    {
        return $this->v1KontorGameJobsAvailableGetAsyncWithHttpInfo($game, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1KontorGameJobsAvailableGetAsyncWithHttpInfo
     *
     * @param  \OpenAPI\Client\Model\FPHSpedVAPIEnumsGameEnum $game 0 &#x3D; ETS2  1 &#x3D; ATS  -1 &#x3D; NotSet (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1KontorGameJobsAvailableGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1KontorGameJobsAvailableGetAsyncWithHttpInfo($game, string $contentType = self::contentTypes['v1KontorGameJobsAvailableGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\FPHSpedVAPIObjectsKontorJobOffer[]';
        $request = $this->v1KontorGameJobsAvailableGetRequest($game, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1KontorGameJobsAvailableGet'
     *
     * @param  \OpenAPI\Client\Model\FPHSpedVAPIEnumsGameEnum $game 0 &#x3D; ETS2  1 &#x3D; ATS  -1 &#x3D; NotSet (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1KontorGameJobsAvailableGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1KontorGameJobsAvailableGetRequest($game, string $contentType = self::contentTypes['v1KontorGameJobsAvailableGet'][0])
    {

        // verify the required parameter 'game' is set
        if ($game === null || (is_array($game) && count($game) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $game when calling v1KontorGameJobsAvailableGet'
            );
        }


        $resourcePath = '/v1/kontor/{game}/jobs/available';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($game !== null) {
            $resourcePath = str_replace(
                '{' . 'game' . '}',
                ObjectSerializer::toPathValue($game),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Api-Key');
        if ($apiKey !== null) {
            $headers['X-Api-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1KontorGameJobsGet
     *
     * @param  \OpenAPI\Client\Model\FPHSpedVAPIEnumsGameEnum $game 0 &#x3D; ETS2  1 &#x3D; ATS  -1 &#x3D; NotSet (required)
     * @param  bool $show_finished show_finished (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1KontorGameJobsGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\FPHSpedVAPIObjectsKontorJob[]
     */
    public function v1KontorGameJobsGet($game, $show_finished = true, string $contentType = self::contentTypes['v1KontorGameJobsGet'][0])
    {
        list($response) = $this->v1KontorGameJobsGetWithHttpInfo($game, $show_finished, $contentType);
        return $response;
    }

    /**
     * Operation v1KontorGameJobsGetWithHttpInfo
     *
     * @param  \OpenAPI\Client\Model\FPHSpedVAPIEnumsGameEnum $game 0 &#x3D; ETS2  1 &#x3D; ATS  -1 &#x3D; NotSet (required)
     * @param  bool $show_finished (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1KontorGameJobsGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\FPHSpedVAPIObjectsKontorJob[], HTTP status code, HTTP response headers (array of strings)
     */
    public function v1KontorGameJobsGetWithHttpInfo($game, $show_finished = true, string $contentType = self::contentTypes['v1KontorGameJobsGet'][0])
    {
        $request = $this->v1KontorGameJobsGetRequest($game, $show_finished, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\FPHSpedVAPIObjectsKontorJob[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\FPHSpedVAPIObjectsKontorJob[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\FPHSpedVAPIObjectsKontorJob[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\FPHSpedVAPIObjectsKontorJob[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\FPHSpedVAPIObjectsKontorJob[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1KontorGameJobsGetAsync
     *
     * @param  \OpenAPI\Client\Model\FPHSpedVAPIEnumsGameEnum $game 0 &#x3D; ETS2  1 &#x3D; ATS  -1 &#x3D; NotSet (required)
     * @param  bool $show_finished (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1KontorGameJobsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1KontorGameJobsGetAsync($game, $show_finished = true, string $contentType = self::contentTypes['v1KontorGameJobsGet'][0])
    {
        return $this->v1KontorGameJobsGetAsyncWithHttpInfo($game, $show_finished, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1KontorGameJobsGetAsyncWithHttpInfo
     *
     * @param  \OpenAPI\Client\Model\FPHSpedVAPIEnumsGameEnum $game 0 &#x3D; ETS2  1 &#x3D; ATS  -1 &#x3D; NotSet (required)
     * @param  bool $show_finished (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1KontorGameJobsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1KontorGameJobsGetAsyncWithHttpInfo($game, $show_finished = true, string $contentType = self::contentTypes['v1KontorGameJobsGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\FPHSpedVAPIObjectsKontorJob[]';
        $request = $this->v1KontorGameJobsGetRequest($game, $show_finished, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1KontorGameJobsGet'
     *
     * @param  \OpenAPI\Client\Model\FPHSpedVAPIEnumsGameEnum $game 0 &#x3D; ETS2  1 &#x3D; ATS  -1 &#x3D; NotSet (required)
     * @param  bool $show_finished (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1KontorGameJobsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1KontorGameJobsGetRequest($game, $show_finished = true, string $contentType = self::contentTypes['v1KontorGameJobsGet'][0])
    {

        // verify the required parameter 'game' is set
        if ($game === null || (is_array($game) && count($game) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $game when calling v1KontorGameJobsGet'
            );
        }



        $resourcePath = '/v1/kontor/{game}/jobs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $show_finished,
            'showFinished', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($game !== null) {
            $resourcePath = str_replace(
                '{' . 'game' . '}',
                ObjectSerializer::toPathValue($game),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Api-Key');
        if ($apiKey !== null) {
            $headers['X-Api-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1KontorGameJobsJobidGet
     *
     * @param  \OpenAPI\Client\Model\FPHSpedVAPIEnumsGameEnum $game 0 &#x3D; ETS2  1 &#x3D; ATS  -1 &#x3D; NotSet (required)
     * @param  int $jobid jobid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1KontorGameJobsJobidGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\FPHSpedVAPIObjectsKontorJob
     */
    public function v1KontorGameJobsJobidGet($game, $jobid, string $contentType = self::contentTypes['v1KontorGameJobsJobidGet'][0])
    {
        list($response) = $this->v1KontorGameJobsJobidGetWithHttpInfo($game, $jobid, $contentType);
        return $response;
    }

    /**
     * Operation v1KontorGameJobsJobidGetWithHttpInfo
     *
     * @param  \OpenAPI\Client\Model\FPHSpedVAPIEnumsGameEnum $game 0 &#x3D; ETS2  1 &#x3D; ATS  -1 &#x3D; NotSet (required)
     * @param  int $jobid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1KontorGameJobsJobidGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\FPHSpedVAPIObjectsKontorJob, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1KontorGameJobsJobidGetWithHttpInfo($game, $jobid, string $contentType = self::contentTypes['v1KontorGameJobsJobidGet'][0])
    {
        $request = $this->v1KontorGameJobsJobidGetRequest($game, $jobid, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\FPHSpedVAPIObjectsKontorJob' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\FPHSpedVAPIObjectsKontorJob' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\FPHSpedVAPIObjectsKontorJob', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\FPHSpedVAPIObjectsKontorJob';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\FPHSpedVAPIObjectsKontorJob',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1KontorGameJobsJobidGetAsync
     *
     * @param  \OpenAPI\Client\Model\FPHSpedVAPIEnumsGameEnum $game 0 &#x3D; ETS2  1 &#x3D; ATS  -1 &#x3D; NotSet (required)
     * @param  int $jobid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1KontorGameJobsJobidGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1KontorGameJobsJobidGetAsync($game, $jobid, string $contentType = self::contentTypes['v1KontorGameJobsJobidGet'][0])
    {
        return $this->v1KontorGameJobsJobidGetAsyncWithHttpInfo($game, $jobid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1KontorGameJobsJobidGetAsyncWithHttpInfo
     *
     * @param  \OpenAPI\Client\Model\FPHSpedVAPIEnumsGameEnum $game 0 &#x3D; ETS2  1 &#x3D; ATS  -1 &#x3D; NotSet (required)
     * @param  int $jobid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1KontorGameJobsJobidGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1KontorGameJobsJobidGetAsyncWithHttpInfo($game, $jobid, string $contentType = self::contentTypes['v1KontorGameJobsJobidGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\FPHSpedVAPIObjectsKontorJob';
        $request = $this->v1KontorGameJobsJobidGetRequest($game, $jobid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1KontorGameJobsJobidGet'
     *
     * @param  \OpenAPI\Client\Model\FPHSpedVAPIEnumsGameEnum $game 0 &#x3D; ETS2  1 &#x3D; ATS  -1 &#x3D; NotSet (required)
     * @param  int $jobid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1KontorGameJobsJobidGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1KontorGameJobsJobidGetRequest($game, $jobid, string $contentType = self::contentTypes['v1KontorGameJobsJobidGet'][0])
    {

        // verify the required parameter 'game' is set
        if ($game === null || (is_array($game) && count($game) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $game when calling v1KontorGameJobsJobidGet'
            );
        }

        // verify the required parameter 'jobid' is set
        if ($jobid === null || (is_array($jobid) && count($jobid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $jobid when calling v1KontorGameJobsJobidGet'
            );
        }


        $resourcePath = '/v1/kontor/{game}/jobs/{jobid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($game !== null) {
            $resourcePath = str_replace(
                '{' . 'game' . '}',
                ObjectSerializer::toPathValue($game),
                $resourcePath
            );
        }
        // path params
        if ($jobid !== null) {
            $resourcePath = str_replace(
                '{' . 'jobid' . '}',
                ObjectSerializer::toPathValue($jobid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Api-Key');
        if ($apiKey !== null) {
            $headers['X-Api-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1KontorGamePartsAvailableGet
     *
     * @param  \OpenAPI\Client\Model\FPHSpedVAPIEnumsGameEnum $game 0 &#x3D; ETS2  1 &#x3D; ATS  -1 &#x3D; NotSet (required)
     * @param  bool $include_partnerships include_partnerships (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1KontorGamePartsAvailableGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\FPHSpedVAPIObjectsKontorJobPart[]
     */
    public function v1KontorGamePartsAvailableGet($game, $include_partnerships = false, string $contentType = self::contentTypes['v1KontorGamePartsAvailableGet'][0])
    {
        list($response) = $this->v1KontorGamePartsAvailableGetWithHttpInfo($game, $include_partnerships, $contentType);
        return $response;
    }

    /**
     * Operation v1KontorGamePartsAvailableGetWithHttpInfo
     *
     * @param  \OpenAPI\Client\Model\FPHSpedVAPIEnumsGameEnum $game 0 &#x3D; ETS2  1 &#x3D; ATS  -1 &#x3D; NotSet (required)
     * @param  bool $include_partnerships (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1KontorGamePartsAvailableGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\FPHSpedVAPIObjectsKontorJobPart[], HTTP status code, HTTP response headers (array of strings)
     */
    public function v1KontorGamePartsAvailableGetWithHttpInfo($game, $include_partnerships = false, string $contentType = self::contentTypes['v1KontorGamePartsAvailableGet'][0])
    {
        $request = $this->v1KontorGamePartsAvailableGetRequest($game, $include_partnerships, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\FPHSpedVAPIObjectsKontorJobPart[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\FPHSpedVAPIObjectsKontorJobPart[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\FPHSpedVAPIObjectsKontorJobPart[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\FPHSpedVAPIObjectsKontorJobPart[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\FPHSpedVAPIObjectsKontorJobPart[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1KontorGamePartsAvailableGetAsync
     *
     * @param  \OpenAPI\Client\Model\FPHSpedVAPIEnumsGameEnum $game 0 &#x3D; ETS2  1 &#x3D; ATS  -1 &#x3D; NotSet (required)
     * @param  bool $include_partnerships (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1KontorGamePartsAvailableGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1KontorGamePartsAvailableGetAsync($game, $include_partnerships = false, string $contentType = self::contentTypes['v1KontorGamePartsAvailableGet'][0])
    {
        return $this->v1KontorGamePartsAvailableGetAsyncWithHttpInfo($game, $include_partnerships, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1KontorGamePartsAvailableGetAsyncWithHttpInfo
     *
     * @param  \OpenAPI\Client\Model\FPHSpedVAPIEnumsGameEnum $game 0 &#x3D; ETS2  1 &#x3D; ATS  -1 &#x3D; NotSet (required)
     * @param  bool $include_partnerships (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1KontorGamePartsAvailableGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1KontorGamePartsAvailableGetAsyncWithHttpInfo($game, $include_partnerships = false, string $contentType = self::contentTypes['v1KontorGamePartsAvailableGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\FPHSpedVAPIObjectsKontorJobPart[]';
        $request = $this->v1KontorGamePartsAvailableGetRequest($game, $include_partnerships, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1KontorGamePartsAvailableGet'
     *
     * @param  \OpenAPI\Client\Model\FPHSpedVAPIEnumsGameEnum $game 0 &#x3D; ETS2  1 &#x3D; ATS  -1 &#x3D; NotSet (required)
     * @param  bool $include_partnerships (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1KontorGamePartsAvailableGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1KontorGamePartsAvailableGetRequest($game, $include_partnerships = false, string $contentType = self::contentTypes['v1KontorGamePartsAvailableGet'][0])
    {

        // verify the required parameter 'game' is set
        if ($game === null || (is_array($game) && count($game) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $game when calling v1KontorGamePartsAvailableGet'
            );
        }



        $resourcePath = '/v1/kontor/{game}/parts/available';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include_partnerships,
            'includePartnerships', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($game !== null) {
            $resourcePath = str_replace(
                '{' . 'game' . '}',
                ObjectSerializer::toPathValue($game),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Api-Key');
        if ($apiKey !== null) {
            $headers['X-Api-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1KontorGamePartsGet
     *
     * @param  \OpenAPI\Client\Model\FPHSpedVAPIEnumsGameEnum $game 0 &#x3D; ETS2  1 &#x3D; ATS  -1 &#x3D; NotSet (required)
     * @param  bool $show_finished show_finished (optional, default to true)
     * @param  bool $include_partnerships include_partnerships (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1KontorGamePartsGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\FPHSpedVAPIObjectsKontorJobPart[]
     */
    public function v1KontorGamePartsGet($game, $show_finished = true, $include_partnerships = false, string $contentType = self::contentTypes['v1KontorGamePartsGet'][0])
    {
        list($response) = $this->v1KontorGamePartsGetWithHttpInfo($game, $show_finished, $include_partnerships, $contentType);
        return $response;
    }

    /**
     * Operation v1KontorGamePartsGetWithHttpInfo
     *
     * @param  \OpenAPI\Client\Model\FPHSpedVAPIEnumsGameEnum $game 0 &#x3D; ETS2  1 &#x3D; ATS  -1 &#x3D; NotSet (required)
     * @param  bool $show_finished (optional, default to true)
     * @param  bool $include_partnerships (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1KontorGamePartsGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\FPHSpedVAPIObjectsKontorJobPart[], HTTP status code, HTTP response headers (array of strings)
     */
    public function v1KontorGamePartsGetWithHttpInfo($game, $show_finished = true, $include_partnerships = false, string $contentType = self::contentTypes['v1KontorGamePartsGet'][0])
    {
        $request = $this->v1KontorGamePartsGetRequest($game, $show_finished, $include_partnerships, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\FPHSpedVAPIObjectsKontorJobPart[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\FPHSpedVAPIObjectsKontorJobPart[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\FPHSpedVAPIObjectsKontorJobPart[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\FPHSpedVAPIObjectsKontorJobPart[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\FPHSpedVAPIObjectsKontorJobPart[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1KontorGamePartsGetAsync
     *
     * @param  \OpenAPI\Client\Model\FPHSpedVAPIEnumsGameEnum $game 0 &#x3D; ETS2  1 &#x3D; ATS  -1 &#x3D; NotSet (required)
     * @param  bool $show_finished (optional, default to true)
     * @param  bool $include_partnerships (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1KontorGamePartsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1KontorGamePartsGetAsync($game, $show_finished = true, $include_partnerships = false, string $contentType = self::contentTypes['v1KontorGamePartsGet'][0])
    {
        return $this->v1KontorGamePartsGetAsyncWithHttpInfo($game, $show_finished, $include_partnerships, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1KontorGamePartsGetAsyncWithHttpInfo
     *
     * @param  \OpenAPI\Client\Model\FPHSpedVAPIEnumsGameEnum $game 0 &#x3D; ETS2  1 &#x3D; ATS  -1 &#x3D; NotSet (required)
     * @param  bool $show_finished (optional, default to true)
     * @param  bool $include_partnerships (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1KontorGamePartsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1KontorGamePartsGetAsyncWithHttpInfo($game, $show_finished = true, $include_partnerships = false, string $contentType = self::contentTypes['v1KontorGamePartsGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\FPHSpedVAPIObjectsKontorJobPart[]';
        $request = $this->v1KontorGamePartsGetRequest($game, $show_finished, $include_partnerships, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1KontorGamePartsGet'
     *
     * @param  \OpenAPI\Client\Model\FPHSpedVAPIEnumsGameEnum $game 0 &#x3D; ETS2  1 &#x3D; ATS  -1 &#x3D; NotSet (required)
     * @param  bool $show_finished (optional, default to true)
     * @param  bool $include_partnerships (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1KontorGamePartsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1KontorGamePartsGetRequest($game, $show_finished = true, $include_partnerships = false, string $contentType = self::contentTypes['v1KontorGamePartsGet'][0])
    {

        // verify the required parameter 'game' is set
        if ($game === null || (is_array($game) && count($game) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $game when calling v1KontorGamePartsGet'
            );
        }




        $resourcePath = '/v1/kontor/{game}/parts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $show_finished,
            'showFinished', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include_partnerships,
            'includePartnerships', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($game !== null) {
            $resourcePath = str_replace(
                '{' . 'game' . '}',
                ObjectSerializer::toPathValue($game),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Api-Key');
        if ($apiKey !== null) {
            $headers['X-Api-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1KontorGamePartsPartidGet
     *
     * @param  \OpenAPI\Client\Model\FPHSpedVAPIEnumsGameEnum $game 0 &#x3D; ETS2  1 &#x3D; ATS  -1 &#x3D; NotSet (required)
     * @param  int $partid partid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1KontorGamePartsPartidGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\FPHSpedVAPIObjectsKontorJobPart
     */
    public function v1KontorGamePartsPartidGet($game, $partid, string $contentType = self::contentTypes['v1KontorGamePartsPartidGet'][0])
    {
        list($response) = $this->v1KontorGamePartsPartidGetWithHttpInfo($game, $partid, $contentType);
        return $response;
    }

    /**
     * Operation v1KontorGamePartsPartidGetWithHttpInfo
     *
     * @param  \OpenAPI\Client\Model\FPHSpedVAPIEnumsGameEnum $game 0 &#x3D; ETS2  1 &#x3D; ATS  -1 &#x3D; NotSet (required)
     * @param  int $partid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1KontorGamePartsPartidGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\FPHSpedVAPIObjectsKontorJobPart, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1KontorGamePartsPartidGetWithHttpInfo($game, $partid, string $contentType = self::contentTypes['v1KontorGamePartsPartidGet'][0])
    {
        $request = $this->v1KontorGamePartsPartidGetRequest($game, $partid, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\FPHSpedVAPIObjectsKontorJobPart' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\FPHSpedVAPIObjectsKontorJobPart' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\FPHSpedVAPIObjectsKontorJobPart', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\FPHSpedVAPIObjectsKontorJobPart';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\FPHSpedVAPIObjectsKontorJobPart',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1KontorGamePartsPartidGetAsync
     *
     * @param  \OpenAPI\Client\Model\FPHSpedVAPIEnumsGameEnum $game 0 &#x3D; ETS2  1 &#x3D; ATS  -1 &#x3D; NotSet (required)
     * @param  int $partid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1KontorGamePartsPartidGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1KontorGamePartsPartidGetAsync($game, $partid, string $contentType = self::contentTypes['v1KontorGamePartsPartidGet'][0])
    {
        return $this->v1KontorGamePartsPartidGetAsyncWithHttpInfo($game, $partid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1KontorGamePartsPartidGetAsyncWithHttpInfo
     *
     * @param  \OpenAPI\Client\Model\FPHSpedVAPIEnumsGameEnum $game 0 &#x3D; ETS2  1 &#x3D; ATS  -1 &#x3D; NotSet (required)
     * @param  int $partid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1KontorGamePartsPartidGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1KontorGamePartsPartidGetAsyncWithHttpInfo($game, $partid, string $contentType = self::contentTypes['v1KontorGamePartsPartidGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\FPHSpedVAPIObjectsKontorJobPart';
        $request = $this->v1KontorGamePartsPartidGetRequest($game, $partid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1KontorGamePartsPartidGet'
     *
     * @param  \OpenAPI\Client\Model\FPHSpedVAPIEnumsGameEnum $game 0 &#x3D; ETS2  1 &#x3D; ATS  -1 &#x3D; NotSet (required)
     * @param  int $partid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1KontorGamePartsPartidGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1KontorGamePartsPartidGetRequest($game, $partid, string $contentType = self::contentTypes['v1KontorGamePartsPartidGet'][0])
    {

        // verify the required parameter 'game' is set
        if ($game === null || (is_array($game) && count($game) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $game when calling v1KontorGamePartsPartidGet'
            );
        }

        // verify the required parameter 'partid' is set
        if ($partid === null || (is_array($partid) && count($partid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $partid when calling v1KontorGamePartsPartidGet'
            );
        }


        $resourcePath = '/v1/kontor/{game}/parts/{partid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($game !== null) {
            $resourcePath = str_replace(
                '{' . 'game' . '}',
                ObjectSerializer::toPathValue($game),
                $resourcePath
            );
        }
        // path params
        if ($partid !== null) {
            $resourcePath = str_replace(
                '{' . 'partid' . '}',
                ObjectSerializer::toPathValue($partid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Api-Key');
        if ($apiKey !== null) {
            $headers['X-Api-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1KontorGamePartsPartidJobsGet
     *
     * @param  \OpenAPI\Client\Model\FPHSpedVAPIEnumsGameEnum $game 0 &#x3D; ETS2  1 &#x3D; ATS  -1 &#x3D; NotSet (required)
     * @param  int $partid partid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1KontorGamePartsPartidJobsGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\FPHSpedVAPIObjectsKontorJob[]
     */
    public function v1KontorGamePartsPartidJobsGet($game, $partid, string $contentType = self::contentTypes['v1KontorGamePartsPartidJobsGet'][0])
    {
        list($response) = $this->v1KontorGamePartsPartidJobsGetWithHttpInfo($game, $partid, $contentType);
        return $response;
    }

    /**
     * Operation v1KontorGamePartsPartidJobsGetWithHttpInfo
     *
     * @param  \OpenAPI\Client\Model\FPHSpedVAPIEnumsGameEnum $game 0 &#x3D; ETS2  1 &#x3D; ATS  -1 &#x3D; NotSet (required)
     * @param  int $partid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1KontorGamePartsPartidJobsGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\FPHSpedVAPIObjectsKontorJob[], HTTP status code, HTTP response headers (array of strings)
     */
    public function v1KontorGamePartsPartidJobsGetWithHttpInfo($game, $partid, string $contentType = self::contentTypes['v1KontorGamePartsPartidJobsGet'][0])
    {
        $request = $this->v1KontorGamePartsPartidJobsGetRequest($game, $partid, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\FPHSpedVAPIObjectsKontorJob[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\FPHSpedVAPIObjectsKontorJob[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\FPHSpedVAPIObjectsKontorJob[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\FPHSpedVAPIObjectsKontorJob[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\FPHSpedVAPIObjectsKontorJob[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1KontorGamePartsPartidJobsGetAsync
     *
     * @param  \OpenAPI\Client\Model\FPHSpedVAPIEnumsGameEnum $game 0 &#x3D; ETS2  1 &#x3D; ATS  -1 &#x3D; NotSet (required)
     * @param  int $partid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1KontorGamePartsPartidJobsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1KontorGamePartsPartidJobsGetAsync($game, $partid, string $contentType = self::contentTypes['v1KontorGamePartsPartidJobsGet'][0])
    {
        return $this->v1KontorGamePartsPartidJobsGetAsyncWithHttpInfo($game, $partid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1KontorGamePartsPartidJobsGetAsyncWithHttpInfo
     *
     * @param  \OpenAPI\Client\Model\FPHSpedVAPIEnumsGameEnum $game 0 &#x3D; ETS2  1 &#x3D; ATS  -1 &#x3D; NotSet (required)
     * @param  int $partid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1KontorGamePartsPartidJobsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1KontorGamePartsPartidJobsGetAsyncWithHttpInfo($game, $partid, string $contentType = self::contentTypes['v1KontorGamePartsPartidJobsGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\FPHSpedVAPIObjectsKontorJob[]';
        $request = $this->v1KontorGamePartsPartidJobsGetRequest($game, $partid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1KontorGamePartsPartidJobsGet'
     *
     * @param  \OpenAPI\Client\Model\FPHSpedVAPIEnumsGameEnum $game 0 &#x3D; ETS2  1 &#x3D; ATS  -1 &#x3D; NotSet (required)
     * @param  int $partid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1KontorGamePartsPartidJobsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1KontorGamePartsPartidJobsGetRequest($game, $partid, string $contentType = self::contentTypes['v1KontorGamePartsPartidJobsGet'][0])
    {

        // verify the required parameter 'game' is set
        if ($game === null || (is_array($game) && count($game) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $game when calling v1KontorGamePartsPartidJobsGet'
            );
        }

        // verify the required parameter 'partid' is set
        if ($partid === null || (is_array($partid) && count($partid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $partid when calling v1KontorGamePartsPartidJobsGet'
            );
        }


        $resourcePath = '/v1/kontor/{game}/parts/{partid}/jobs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($game !== null) {
            $resourcePath = str_replace(
                '{' . 'game' . '}',
                ObjectSerializer::toPathValue($game),
                $resourcePath
            );
        }
        // path params
        if ($partid !== null) {
            $resourcePath = str_replace(
                '{' . 'partid' . '}',
                ObjectSerializer::toPathValue($partid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Api-Key');
        if ($apiKey !== null) {
            $headers['X-Api-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1KontorGameTrailersGet
     *
     * @param  \OpenAPI\Client\Model\FPHSpedVAPIEnumsGameEnum $game 0 &#x3D; ETS2  1 &#x3D; ATS  -1 &#x3D; NotSet (required)
     * @param  bool $include_partnerships include_partnerships (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1KontorGameTrailersGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\FPHSpedVAPIObjectsKontorTrailer[]
     */
    public function v1KontorGameTrailersGet($game, $include_partnerships = false, string $contentType = self::contentTypes['v1KontorGameTrailersGet'][0])
    {
        list($response) = $this->v1KontorGameTrailersGetWithHttpInfo($game, $include_partnerships, $contentType);
        return $response;
    }

    /**
     * Operation v1KontorGameTrailersGetWithHttpInfo
     *
     * @param  \OpenAPI\Client\Model\FPHSpedVAPIEnumsGameEnum $game 0 &#x3D; ETS2  1 &#x3D; ATS  -1 &#x3D; NotSet (required)
     * @param  bool $include_partnerships (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1KontorGameTrailersGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\FPHSpedVAPIObjectsKontorTrailer[], HTTP status code, HTTP response headers (array of strings)
     */
    public function v1KontorGameTrailersGetWithHttpInfo($game, $include_partnerships = false, string $contentType = self::contentTypes['v1KontorGameTrailersGet'][0])
    {
        $request = $this->v1KontorGameTrailersGetRequest($game, $include_partnerships, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\FPHSpedVAPIObjectsKontorTrailer[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\FPHSpedVAPIObjectsKontorTrailer[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\FPHSpedVAPIObjectsKontorTrailer[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\FPHSpedVAPIObjectsKontorTrailer[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\FPHSpedVAPIObjectsKontorTrailer[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1KontorGameTrailersGetAsync
     *
     * @param  \OpenAPI\Client\Model\FPHSpedVAPIEnumsGameEnum $game 0 &#x3D; ETS2  1 &#x3D; ATS  -1 &#x3D; NotSet (required)
     * @param  bool $include_partnerships (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1KontorGameTrailersGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1KontorGameTrailersGetAsync($game, $include_partnerships = false, string $contentType = self::contentTypes['v1KontorGameTrailersGet'][0])
    {
        return $this->v1KontorGameTrailersGetAsyncWithHttpInfo($game, $include_partnerships, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1KontorGameTrailersGetAsyncWithHttpInfo
     *
     * @param  \OpenAPI\Client\Model\FPHSpedVAPIEnumsGameEnum $game 0 &#x3D; ETS2  1 &#x3D; ATS  -1 &#x3D; NotSet (required)
     * @param  bool $include_partnerships (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1KontorGameTrailersGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1KontorGameTrailersGetAsyncWithHttpInfo($game, $include_partnerships = false, string $contentType = self::contentTypes['v1KontorGameTrailersGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\FPHSpedVAPIObjectsKontorTrailer[]';
        $request = $this->v1KontorGameTrailersGetRequest($game, $include_partnerships, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1KontorGameTrailersGet'
     *
     * @param  \OpenAPI\Client\Model\FPHSpedVAPIEnumsGameEnum $game 0 &#x3D; ETS2  1 &#x3D; ATS  -1 &#x3D; NotSet (required)
     * @param  bool $include_partnerships (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1KontorGameTrailersGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1KontorGameTrailersGetRequest($game, $include_partnerships = false, string $contentType = self::contentTypes['v1KontorGameTrailersGet'][0])
    {

        // verify the required parameter 'game' is set
        if ($game === null || (is_array($game) && count($game) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $game when calling v1KontorGameTrailersGet'
            );
        }



        $resourcePath = '/v1/kontor/{game}/trailers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include_partnerships,
            'includePartnerships', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($game !== null) {
            $resourcePath = str_replace(
                '{' . 'game' . '}',
                ObjectSerializer::toPathValue($game),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Api-Key');
        if ($apiKey !== null) {
            $headers['X-Api-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}

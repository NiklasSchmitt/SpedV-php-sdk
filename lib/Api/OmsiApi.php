<?php
/**
 * OmsiApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SpedV API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * OmsiApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class OmsiApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'v1OmsiDriventripsGet' => [
            'application/json',
        ],
        'v1OmsiMapsGet' => [
            'application/json',
        ],
        'v1OmsiMapsMapidBusstopsGet' => [
            'application/json',
        ],
        'v1OmsiMapsMapidDestinationsGet' => [
            'application/json',
        ],
        'v1OmsiMapsMapidGet' => [
            'application/json',
        ],
        'v1OmsiMapsMapidStationlinksGet' => [
            'application/json',
        ],
        'v1OmsiMapsMapidToursGet' => [
            'application/json',
        ],
        'v1OmsiMapsMapidToursTouridGet' => [
            'application/json',
        ],
        'v1OmsiMapsMapidToursTouridTripsGet' => [
            'application/json',
        ],
        'v1OmsiMapsMapidTourtripsDateGet' => [
            'application/json',
        ],
        'v1OmsiMapsMapidTripsGet' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation v1OmsiDriventripsGet
     *
     * @param  \DateTime $start start (optional)
     * @param  \DateTime $end end (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1OmsiDriventripsGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\FPHSpedVAPIObjectsOMSIDrivenTrip[]
     */
    public function v1OmsiDriventripsGet($start = null, $end = null, string $contentType = self::contentTypes['v1OmsiDriventripsGet'][0])
    {
        list($response) = $this->v1OmsiDriventripsGetWithHttpInfo($start, $end, $contentType);
        return $response;
    }

    /**
     * Operation v1OmsiDriventripsGetWithHttpInfo
     *
     * @param  \DateTime $start (optional)
     * @param  \DateTime $end (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1OmsiDriventripsGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\FPHSpedVAPIObjectsOMSIDrivenTrip[], HTTP status code, HTTP response headers (array of strings)
     */
    public function v1OmsiDriventripsGetWithHttpInfo($start = null, $end = null, string $contentType = self::contentTypes['v1OmsiDriventripsGet'][0])
    {
        $request = $this->v1OmsiDriventripsGetRequest($start, $end, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\FPHSpedVAPIObjectsOMSIDrivenTrip[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\FPHSpedVAPIObjectsOMSIDrivenTrip[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\FPHSpedVAPIObjectsOMSIDrivenTrip[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\FPHSpedVAPIObjectsOMSIDrivenTrip[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\FPHSpedVAPIObjectsOMSIDrivenTrip[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1OmsiDriventripsGetAsync
     *
     * @param  \DateTime $start (optional)
     * @param  \DateTime $end (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1OmsiDriventripsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1OmsiDriventripsGetAsync($start = null, $end = null, string $contentType = self::contentTypes['v1OmsiDriventripsGet'][0])
    {
        return $this->v1OmsiDriventripsGetAsyncWithHttpInfo($start, $end, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1OmsiDriventripsGetAsyncWithHttpInfo
     *
     * @param  \DateTime $start (optional)
     * @param  \DateTime $end (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1OmsiDriventripsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1OmsiDriventripsGetAsyncWithHttpInfo($start = null, $end = null, string $contentType = self::contentTypes['v1OmsiDriventripsGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\FPHSpedVAPIObjectsOMSIDrivenTrip[]';
        $request = $this->v1OmsiDriventripsGetRequest($start, $end, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1OmsiDriventripsGet'
     *
     * @param  \DateTime $start (optional)
     * @param  \DateTime $end (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1OmsiDriventripsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1OmsiDriventripsGetRequest($start = null, $end = null, string $contentType = self::contentTypes['v1OmsiDriventripsGet'][0])
    {




        $resourcePath = '/v1/omsi/driventrips';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $start,
            'start', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $end,
            'end', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Api-Key');
        if ($apiKey !== null) {
            $headers['X-Api-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1OmsiMapsGet
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1OmsiMapsGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\FPHSpedVAPIObjectsOMSIMap[]
     */
    public function v1OmsiMapsGet(string $contentType = self::contentTypes['v1OmsiMapsGet'][0])
    {
        list($response) = $this->v1OmsiMapsGetWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation v1OmsiMapsGetWithHttpInfo
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1OmsiMapsGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\FPHSpedVAPIObjectsOMSIMap[], HTTP status code, HTTP response headers (array of strings)
     */
    public function v1OmsiMapsGetWithHttpInfo(string $contentType = self::contentTypes['v1OmsiMapsGet'][0])
    {
        $request = $this->v1OmsiMapsGetRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\FPHSpedVAPIObjectsOMSIMap[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\FPHSpedVAPIObjectsOMSIMap[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\FPHSpedVAPIObjectsOMSIMap[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\FPHSpedVAPIObjectsOMSIMap[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\FPHSpedVAPIObjectsOMSIMap[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1OmsiMapsGetAsync
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1OmsiMapsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1OmsiMapsGetAsync(string $contentType = self::contentTypes['v1OmsiMapsGet'][0])
    {
        return $this->v1OmsiMapsGetAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1OmsiMapsGetAsyncWithHttpInfo
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1OmsiMapsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1OmsiMapsGetAsyncWithHttpInfo(string $contentType = self::contentTypes['v1OmsiMapsGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\FPHSpedVAPIObjectsOMSIMap[]';
        $request = $this->v1OmsiMapsGetRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1OmsiMapsGet'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1OmsiMapsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1OmsiMapsGetRequest(string $contentType = self::contentTypes['v1OmsiMapsGet'][0])
    {


        $resourcePath = '/v1/omsi/maps';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1OmsiMapsMapidBusstopsGet
     *
     * @param  int $mapid mapid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1OmsiMapsMapidBusstopsGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\FPHSpedVAPIObjectsOMSIBusStop[]
     */
    public function v1OmsiMapsMapidBusstopsGet($mapid, string $contentType = self::contentTypes['v1OmsiMapsMapidBusstopsGet'][0])
    {
        list($response) = $this->v1OmsiMapsMapidBusstopsGetWithHttpInfo($mapid, $contentType);
        return $response;
    }

    /**
     * Operation v1OmsiMapsMapidBusstopsGetWithHttpInfo
     *
     * @param  int $mapid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1OmsiMapsMapidBusstopsGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\FPHSpedVAPIObjectsOMSIBusStop[], HTTP status code, HTTP response headers (array of strings)
     */
    public function v1OmsiMapsMapidBusstopsGetWithHttpInfo($mapid, string $contentType = self::contentTypes['v1OmsiMapsMapidBusstopsGet'][0])
    {
        $request = $this->v1OmsiMapsMapidBusstopsGetRequest($mapid, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\FPHSpedVAPIObjectsOMSIBusStop[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\FPHSpedVAPIObjectsOMSIBusStop[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\FPHSpedVAPIObjectsOMSIBusStop[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\FPHSpedVAPIObjectsOMSIBusStop[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\FPHSpedVAPIObjectsOMSIBusStop[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1OmsiMapsMapidBusstopsGetAsync
     *
     * @param  int $mapid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1OmsiMapsMapidBusstopsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1OmsiMapsMapidBusstopsGetAsync($mapid, string $contentType = self::contentTypes['v1OmsiMapsMapidBusstopsGet'][0])
    {
        return $this->v1OmsiMapsMapidBusstopsGetAsyncWithHttpInfo($mapid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1OmsiMapsMapidBusstopsGetAsyncWithHttpInfo
     *
     * @param  int $mapid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1OmsiMapsMapidBusstopsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1OmsiMapsMapidBusstopsGetAsyncWithHttpInfo($mapid, string $contentType = self::contentTypes['v1OmsiMapsMapidBusstopsGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\FPHSpedVAPIObjectsOMSIBusStop[]';
        $request = $this->v1OmsiMapsMapidBusstopsGetRequest($mapid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1OmsiMapsMapidBusstopsGet'
     *
     * @param  int $mapid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1OmsiMapsMapidBusstopsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1OmsiMapsMapidBusstopsGetRequest($mapid, string $contentType = self::contentTypes['v1OmsiMapsMapidBusstopsGet'][0])
    {

        // verify the required parameter 'mapid' is set
        if ($mapid === null || (is_array($mapid) && count($mapid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mapid when calling v1OmsiMapsMapidBusstopsGet'
            );
        }


        $resourcePath = '/v1/omsi/maps/{mapid}/busstops';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($mapid !== null) {
            $resourcePath = str_replace(
                '{' . 'mapid' . '}',
                ObjectSerializer::toPathValue($mapid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1OmsiMapsMapidDestinationsGet
     *
     * @param  int $mapid mapid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1OmsiMapsMapidDestinationsGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\FPHSpedVAPIObjectsOMSIDestination[]
     */
    public function v1OmsiMapsMapidDestinationsGet($mapid, string $contentType = self::contentTypes['v1OmsiMapsMapidDestinationsGet'][0])
    {
        list($response) = $this->v1OmsiMapsMapidDestinationsGetWithHttpInfo($mapid, $contentType);
        return $response;
    }

    /**
     * Operation v1OmsiMapsMapidDestinationsGetWithHttpInfo
     *
     * @param  int $mapid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1OmsiMapsMapidDestinationsGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\FPHSpedVAPIObjectsOMSIDestination[], HTTP status code, HTTP response headers (array of strings)
     */
    public function v1OmsiMapsMapidDestinationsGetWithHttpInfo($mapid, string $contentType = self::contentTypes['v1OmsiMapsMapidDestinationsGet'][0])
    {
        $request = $this->v1OmsiMapsMapidDestinationsGetRequest($mapid, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\FPHSpedVAPIObjectsOMSIDestination[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\FPHSpedVAPIObjectsOMSIDestination[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\FPHSpedVAPIObjectsOMSIDestination[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\FPHSpedVAPIObjectsOMSIDestination[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\FPHSpedVAPIObjectsOMSIDestination[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1OmsiMapsMapidDestinationsGetAsync
     *
     * @param  int $mapid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1OmsiMapsMapidDestinationsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1OmsiMapsMapidDestinationsGetAsync($mapid, string $contentType = self::contentTypes['v1OmsiMapsMapidDestinationsGet'][0])
    {
        return $this->v1OmsiMapsMapidDestinationsGetAsyncWithHttpInfo($mapid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1OmsiMapsMapidDestinationsGetAsyncWithHttpInfo
     *
     * @param  int $mapid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1OmsiMapsMapidDestinationsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1OmsiMapsMapidDestinationsGetAsyncWithHttpInfo($mapid, string $contentType = self::contentTypes['v1OmsiMapsMapidDestinationsGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\FPHSpedVAPIObjectsOMSIDestination[]';
        $request = $this->v1OmsiMapsMapidDestinationsGetRequest($mapid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1OmsiMapsMapidDestinationsGet'
     *
     * @param  int $mapid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1OmsiMapsMapidDestinationsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1OmsiMapsMapidDestinationsGetRequest($mapid, string $contentType = self::contentTypes['v1OmsiMapsMapidDestinationsGet'][0])
    {

        // verify the required parameter 'mapid' is set
        if ($mapid === null || (is_array($mapid) && count($mapid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mapid when calling v1OmsiMapsMapidDestinationsGet'
            );
        }


        $resourcePath = '/v1/omsi/maps/{mapid}/destinations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($mapid !== null) {
            $resourcePath = str_replace(
                '{' . 'mapid' . '}',
                ObjectSerializer::toPathValue($mapid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1OmsiMapsMapidGet
     *
     * @param  int $mapid mapid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1OmsiMapsMapidGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\FPHSpedVAPIObjectsOMSIMap
     */
    public function v1OmsiMapsMapidGet($mapid, string $contentType = self::contentTypes['v1OmsiMapsMapidGet'][0])
    {
        list($response) = $this->v1OmsiMapsMapidGetWithHttpInfo($mapid, $contentType);
        return $response;
    }

    /**
     * Operation v1OmsiMapsMapidGetWithHttpInfo
     *
     * @param  int $mapid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1OmsiMapsMapidGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\FPHSpedVAPIObjectsOMSIMap, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1OmsiMapsMapidGetWithHttpInfo($mapid, string $contentType = self::contentTypes['v1OmsiMapsMapidGet'][0])
    {
        $request = $this->v1OmsiMapsMapidGetRequest($mapid, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\FPHSpedVAPIObjectsOMSIMap' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\FPHSpedVAPIObjectsOMSIMap' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\FPHSpedVAPIObjectsOMSIMap', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\FPHSpedVAPIObjectsOMSIMap';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\FPHSpedVAPIObjectsOMSIMap',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1OmsiMapsMapidGetAsync
     *
     * @param  int $mapid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1OmsiMapsMapidGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1OmsiMapsMapidGetAsync($mapid, string $contentType = self::contentTypes['v1OmsiMapsMapidGet'][0])
    {
        return $this->v1OmsiMapsMapidGetAsyncWithHttpInfo($mapid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1OmsiMapsMapidGetAsyncWithHttpInfo
     *
     * @param  int $mapid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1OmsiMapsMapidGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1OmsiMapsMapidGetAsyncWithHttpInfo($mapid, string $contentType = self::contentTypes['v1OmsiMapsMapidGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\FPHSpedVAPIObjectsOMSIMap';
        $request = $this->v1OmsiMapsMapidGetRequest($mapid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1OmsiMapsMapidGet'
     *
     * @param  int $mapid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1OmsiMapsMapidGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1OmsiMapsMapidGetRequest($mapid, string $contentType = self::contentTypes['v1OmsiMapsMapidGet'][0])
    {

        // verify the required parameter 'mapid' is set
        if ($mapid === null || (is_array($mapid) && count($mapid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mapid when calling v1OmsiMapsMapidGet'
            );
        }


        $resourcePath = '/v1/omsi/maps/{mapid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($mapid !== null) {
            $resourcePath = str_replace(
                '{' . 'mapid' . '}',
                ObjectSerializer::toPathValue($mapid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1OmsiMapsMapidStationlinksGet
     *
     * @param  int $mapid mapid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1OmsiMapsMapidStationlinksGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\FPHSpedVAPIObjectsOMSIStationLink[]
     */
    public function v1OmsiMapsMapidStationlinksGet($mapid, string $contentType = self::contentTypes['v1OmsiMapsMapidStationlinksGet'][0])
    {
        list($response) = $this->v1OmsiMapsMapidStationlinksGetWithHttpInfo($mapid, $contentType);
        return $response;
    }

    /**
     * Operation v1OmsiMapsMapidStationlinksGetWithHttpInfo
     *
     * @param  int $mapid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1OmsiMapsMapidStationlinksGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\FPHSpedVAPIObjectsOMSIStationLink[], HTTP status code, HTTP response headers (array of strings)
     */
    public function v1OmsiMapsMapidStationlinksGetWithHttpInfo($mapid, string $contentType = self::contentTypes['v1OmsiMapsMapidStationlinksGet'][0])
    {
        $request = $this->v1OmsiMapsMapidStationlinksGetRequest($mapid, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\FPHSpedVAPIObjectsOMSIStationLink[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\FPHSpedVAPIObjectsOMSIStationLink[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\FPHSpedVAPIObjectsOMSIStationLink[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\FPHSpedVAPIObjectsOMSIStationLink[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\FPHSpedVAPIObjectsOMSIStationLink[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1OmsiMapsMapidStationlinksGetAsync
     *
     * @param  int $mapid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1OmsiMapsMapidStationlinksGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1OmsiMapsMapidStationlinksGetAsync($mapid, string $contentType = self::contentTypes['v1OmsiMapsMapidStationlinksGet'][0])
    {
        return $this->v1OmsiMapsMapidStationlinksGetAsyncWithHttpInfo($mapid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1OmsiMapsMapidStationlinksGetAsyncWithHttpInfo
     *
     * @param  int $mapid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1OmsiMapsMapidStationlinksGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1OmsiMapsMapidStationlinksGetAsyncWithHttpInfo($mapid, string $contentType = self::contentTypes['v1OmsiMapsMapidStationlinksGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\FPHSpedVAPIObjectsOMSIStationLink[]';
        $request = $this->v1OmsiMapsMapidStationlinksGetRequest($mapid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1OmsiMapsMapidStationlinksGet'
     *
     * @param  int $mapid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1OmsiMapsMapidStationlinksGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1OmsiMapsMapidStationlinksGetRequest($mapid, string $contentType = self::contentTypes['v1OmsiMapsMapidStationlinksGet'][0])
    {

        // verify the required parameter 'mapid' is set
        if ($mapid === null || (is_array($mapid) && count($mapid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mapid when calling v1OmsiMapsMapidStationlinksGet'
            );
        }


        $resourcePath = '/v1/omsi/maps/{mapid}/stationlinks';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($mapid !== null) {
            $resourcePath = str_replace(
                '{' . 'mapid' . '}',
                ObjectSerializer::toPathValue($mapid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1OmsiMapsMapidToursGet
     *
     * @param  int $mapid mapid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1OmsiMapsMapidToursGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\FPHSpedVAPIObjectsOMSITour[]
     */
    public function v1OmsiMapsMapidToursGet($mapid, string $contentType = self::contentTypes['v1OmsiMapsMapidToursGet'][0])
    {
        list($response) = $this->v1OmsiMapsMapidToursGetWithHttpInfo($mapid, $contentType);
        return $response;
    }

    /**
     * Operation v1OmsiMapsMapidToursGetWithHttpInfo
     *
     * @param  int $mapid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1OmsiMapsMapidToursGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\FPHSpedVAPIObjectsOMSITour[], HTTP status code, HTTP response headers (array of strings)
     */
    public function v1OmsiMapsMapidToursGetWithHttpInfo($mapid, string $contentType = self::contentTypes['v1OmsiMapsMapidToursGet'][0])
    {
        $request = $this->v1OmsiMapsMapidToursGetRequest($mapid, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\FPHSpedVAPIObjectsOMSITour[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\FPHSpedVAPIObjectsOMSITour[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\FPHSpedVAPIObjectsOMSITour[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\FPHSpedVAPIObjectsOMSITour[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\FPHSpedVAPIObjectsOMSITour[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1OmsiMapsMapidToursGetAsync
     *
     * @param  int $mapid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1OmsiMapsMapidToursGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1OmsiMapsMapidToursGetAsync($mapid, string $contentType = self::contentTypes['v1OmsiMapsMapidToursGet'][0])
    {
        return $this->v1OmsiMapsMapidToursGetAsyncWithHttpInfo($mapid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1OmsiMapsMapidToursGetAsyncWithHttpInfo
     *
     * @param  int $mapid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1OmsiMapsMapidToursGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1OmsiMapsMapidToursGetAsyncWithHttpInfo($mapid, string $contentType = self::contentTypes['v1OmsiMapsMapidToursGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\FPHSpedVAPIObjectsOMSITour[]';
        $request = $this->v1OmsiMapsMapidToursGetRequest($mapid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1OmsiMapsMapidToursGet'
     *
     * @param  int $mapid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1OmsiMapsMapidToursGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1OmsiMapsMapidToursGetRequest($mapid, string $contentType = self::contentTypes['v1OmsiMapsMapidToursGet'][0])
    {

        // verify the required parameter 'mapid' is set
        if ($mapid === null || (is_array($mapid) && count($mapid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mapid when calling v1OmsiMapsMapidToursGet'
            );
        }


        $resourcePath = '/v1/omsi/maps/{mapid}/tours';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($mapid !== null) {
            $resourcePath = str_replace(
                '{' . 'mapid' . '}',
                ObjectSerializer::toPathValue($mapid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1OmsiMapsMapidToursTouridGet
     *
     * @param  int $mapid mapid (required)
     * @param  int $tourid tourid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1OmsiMapsMapidToursTouridGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\FPHSpedVAPIObjectsOMSITour
     */
    public function v1OmsiMapsMapidToursTouridGet($mapid, $tourid, string $contentType = self::contentTypes['v1OmsiMapsMapidToursTouridGet'][0])
    {
        list($response) = $this->v1OmsiMapsMapidToursTouridGetWithHttpInfo($mapid, $tourid, $contentType);
        return $response;
    }

    /**
     * Operation v1OmsiMapsMapidToursTouridGetWithHttpInfo
     *
     * @param  int $mapid (required)
     * @param  int $tourid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1OmsiMapsMapidToursTouridGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\FPHSpedVAPIObjectsOMSITour, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1OmsiMapsMapidToursTouridGetWithHttpInfo($mapid, $tourid, string $contentType = self::contentTypes['v1OmsiMapsMapidToursTouridGet'][0])
    {
        $request = $this->v1OmsiMapsMapidToursTouridGetRequest($mapid, $tourid, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\FPHSpedVAPIObjectsOMSITour' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\FPHSpedVAPIObjectsOMSITour' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\FPHSpedVAPIObjectsOMSITour', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\FPHSpedVAPIObjectsOMSITour';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\FPHSpedVAPIObjectsOMSITour',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1OmsiMapsMapidToursTouridGetAsync
     *
     * @param  int $mapid (required)
     * @param  int $tourid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1OmsiMapsMapidToursTouridGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1OmsiMapsMapidToursTouridGetAsync($mapid, $tourid, string $contentType = self::contentTypes['v1OmsiMapsMapidToursTouridGet'][0])
    {
        return $this->v1OmsiMapsMapidToursTouridGetAsyncWithHttpInfo($mapid, $tourid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1OmsiMapsMapidToursTouridGetAsyncWithHttpInfo
     *
     * @param  int $mapid (required)
     * @param  int $tourid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1OmsiMapsMapidToursTouridGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1OmsiMapsMapidToursTouridGetAsyncWithHttpInfo($mapid, $tourid, string $contentType = self::contentTypes['v1OmsiMapsMapidToursTouridGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\FPHSpedVAPIObjectsOMSITour';
        $request = $this->v1OmsiMapsMapidToursTouridGetRequest($mapid, $tourid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1OmsiMapsMapidToursTouridGet'
     *
     * @param  int $mapid (required)
     * @param  int $tourid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1OmsiMapsMapidToursTouridGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1OmsiMapsMapidToursTouridGetRequest($mapid, $tourid, string $contentType = self::contentTypes['v1OmsiMapsMapidToursTouridGet'][0])
    {

        // verify the required parameter 'mapid' is set
        if ($mapid === null || (is_array($mapid) && count($mapid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mapid when calling v1OmsiMapsMapidToursTouridGet'
            );
        }

        // verify the required parameter 'tourid' is set
        if ($tourid === null || (is_array($tourid) && count($tourid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tourid when calling v1OmsiMapsMapidToursTouridGet'
            );
        }


        $resourcePath = '/v1/omsi/maps/{mapid}/tours/{tourid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($mapid !== null) {
            $resourcePath = str_replace(
                '{' . 'mapid' . '}',
                ObjectSerializer::toPathValue($mapid),
                $resourcePath
            );
        }
        // path params
        if ($tourid !== null) {
            $resourcePath = str_replace(
                '{' . 'tourid' . '}',
                ObjectSerializer::toPathValue($tourid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1OmsiMapsMapidToursTouridTripsGet
     *
     * @param  int $mapid mapid (required)
     * @param  int $tourid tourid (required)
     * @param  \DateTime $base_date base_date (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1OmsiMapsMapidToursTouridTripsGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\FPHSpedVAPIObjectsOMSITourTrip[]
     */
    public function v1OmsiMapsMapidToursTouridTripsGet($mapid, $tourid, $base_date = null, string $contentType = self::contentTypes['v1OmsiMapsMapidToursTouridTripsGet'][0])
    {
        list($response) = $this->v1OmsiMapsMapidToursTouridTripsGetWithHttpInfo($mapid, $tourid, $base_date, $contentType);
        return $response;
    }

    /**
     * Operation v1OmsiMapsMapidToursTouridTripsGetWithHttpInfo
     *
     * @param  int $mapid (required)
     * @param  int $tourid (required)
     * @param  \DateTime $base_date (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1OmsiMapsMapidToursTouridTripsGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\FPHSpedVAPIObjectsOMSITourTrip[], HTTP status code, HTTP response headers (array of strings)
     */
    public function v1OmsiMapsMapidToursTouridTripsGetWithHttpInfo($mapid, $tourid, $base_date = null, string $contentType = self::contentTypes['v1OmsiMapsMapidToursTouridTripsGet'][0])
    {
        $request = $this->v1OmsiMapsMapidToursTouridTripsGetRequest($mapid, $tourid, $base_date, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\FPHSpedVAPIObjectsOMSITourTrip[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\FPHSpedVAPIObjectsOMSITourTrip[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\FPHSpedVAPIObjectsOMSITourTrip[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\FPHSpedVAPIObjectsOMSITourTrip[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\FPHSpedVAPIObjectsOMSITourTrip[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1OmsiMapsMapidToursTouridTripsGetAsync
     *
     * @param  int $mapid (required)
     * @param  int $tourid (required)
     * @param  \DateTime $base_date (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1OmsiMapsMapidToursTouridTripsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1OmsiMapsMapidToursTouridTripsGetAsync($mapid, $tourid, $base_date = null, string $contentType = self::contentTypes['v1OmsiMapsMapidToursTouridTripsGet'][0])
    {
        return $this->v1OmsiMapsMapidToursTouridTripsGetAsyncWithHttpInfo($mapid, $tourid, $base_date, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1OmsiMapsMapidToursTouridTripsGetAsyncWithHttpInfo
     *
     * @param  int $mapid (required)
     * @param  int $tourid (required)
     * @param  \DateTime $base_date (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1OmsiMapsMapidToursTouridTripsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1OmsiMapsMapidToursTouridTripsGetAsyncWithHttpInfo($mapid, $tourid, $base_date = null, string $contentType = self::contentTypes['v1OmsiMapsMapidToursTouridTripsGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\FPHSpedVAPIObjectsOMSITourTrip[]';
        $request = $this->v1OmsiMapsMapidToursTouridTripsGetRequest($mapid, $tourid, $base_date, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1OmsiMapsMapidToursTouridTripsGet'
     *
     * @param  int $mapid (required)
     * @param  int $tourid (required)
     * @param  \DateTime $base_date (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1OmsiMapsMapidToursTouridTripsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1OmsiMapsMapidToursTouridTripsGetRequest($mapid, $tourid, $base_date = null, string $contentType = self::contentTypes['v1OmsiMapsMapidToursTouridTripsGet'][0])
    {

        // verify the required parameter 'mapid' is set
        if ($mapid === null || (is_array($mapid) && count($mapid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mapid when calling v1OmsiMapsMapidToursTouridTripsGet'
            );
        }

        // verify the required parameter 'tourid' is set
        if ($tourid === null || (is_array($tourid) && count($tourid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tourid when calling v1OmsiMapsMapidToursTouridTripsGet'
            );
        }



        $resourcePath = '/v1/omsi/maps/{mapid}/tours/{tourid}/trips';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $base_date,
            'baseDate', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($mapid !== null) {
            $resourcePath = str_replace(
                '{' . 'mapid' . '}',
                ObjectSerializer::toPathValue($mapid),
                $resourcePath
            );
        }
        // path params
        if ($tourid !== null) {
            $resourcePath = str_replace(
                '{' . 'tourid' . '}',
                ObjectSerializer::toPathValue($tourid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1OmsiMapsMapidTourtripsDateGet
     *
     * @param  int $mapid mapid (required)
     * @param  string $date date (required)
     * @param  int $timediff timediff (optional, default to 2)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1OmsiMapsMapidTourtripsDateGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\FPHSpedVAPIObjectsOMSITour[]
     */
    public function v1OmsiMapsMapidTourtripsDateGet($mapid, $date, $timediff = 2, string $contentType = self::contentTypes['v1OmsiMapsMapidTourtripsDateGet'][0])
    {
        list($response) = $this->v1OmsiMapsMapidTourtripsDateGetWithHttpInfo($mapid, $date, $timediff, $contentType);
        return $response;
    }

    /**
     * Operation v1OmsiMapsMapidTourtripsDateGetWithHttpInfo
     *
     * @param  int $mapid (required)
     * @param  string $date (required)
     * @param  int $timediff (optional, default to 2)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1OmsiMapsMapidTourtripsDateGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\FPHSpedVAPIObjectsOMSITour[], HTTP status code, HTTP response headers (array of strings)
     */
    public function v1OmsiMapsMapidTourtripsDateGetWithHttpInfo($mapid, $date, $timediff = 2, string $contentType = self::contentTypes['v1OmsiMapsMapidTourtripsDateGet'][0])
    {
        $request = $this->v1OmsiMapsMapidTourtripsDateGetRequest($mapid, $date, $timediff, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\FPHSpedVAPIObjectsOMSITour[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\FPHSpedVAPIObjectsOMSITour[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\FPHSpedVAPIObjectsOMSITour[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\FPHSpedVAPIObjectsOMSITour[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\FPHSpedVAPIObjectsOMSITour[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1OmsiMapsMapidTourtripsDateGetAsync
     *
     * @param  int $mapid (required)
     * @param  string $date (required)
     * @param  int $timediff (optional, default to 2)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1OmsiMapsMapidTourtripsDateGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1OmsiMapsMapidTourtripsDateGetAsync($mapid, $date, $timediff = 2, string $contentType = self::contentTypes['v1OmsiMapsMapidTourtripsDateGet'][0])
    {
        return $this->v1OmsiMapsMapidTourtripsDateGetAsyncWithHttpInfo($mapid, $date, $timediff, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1OmsiMapsMapidTourtripsDateGetAsyncWithHttpInfo
     *
     * @param  int $mapid (required)
     * @param  string $date (required)
     * @param  int $timediff (optional, default to 2)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1OmsiMapsMapidTourtripsDateGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1OmsiMapsMapidTourtripsDateGetAsyncWithHttpInfo($mapid, $date, $timediff = 2, string $contentType = self::contentTypes['v1OmsiMapsMapidTourtripsDateGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\FPHSpedVAPIObjectsOMSITour[]';
        $request = $this->v1OmsiMapsMapidTourtripsDateGetRequest($mapid, $date, $timediff, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1OmsiMapsMapidTourtripsDateGet'
     *
     * @param  int $mapid (required)
     * @param  string $date (required)
     * @param  int $timediff (optional, default to 2)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1OmsiMapsMapidTourtripsDateGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1OmsiMapsMapidTourtripsDateGetRequest($mapid, $date, $timediff = 2, string $contentType = self::contentTypes['v1OmsiMapsMapidTourtripsDateGet'][0])
    {

        // verify the required parameter 'mapid' is set
        if ($mapid === null || (is_array($mapid) && count($mapid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mapid when calling v1OmsiMapsMapidTourtripsDateGet'
            );
        }

        // verify the required parameter 'date' is set
        if ($date === null || (is_array($date) && count($date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $date when calling v1OmsiMapsMapidTourtripsDateGet'
            );
        }



        $resourcePath = '/v1/omsi/maps/{mapid}/tourtrips/{date}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $timediff,
            'timediff', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($mapid !== null) {
            $resourcePath = str_replace(
                '{' . 'mapid' . '}',
                ObjectSerializer::toPathValue($mapid),
                $resourcePath
            );
        }
        // path params
        if ($date !== null) {
            $resourcePath = str_replace(
                '{' . 'date' . '}',
                ObjectSerializer::toPathValue($date),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1OmsiMapsMapidTripsGet
     *
     * @param  int $mapid mapid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1OmsiMapsMapidTripsGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\FPHSpedVAPIObjectsOMSITourTrip[]
     */
    public function v1OmsiMapsMapidTripsGet($mapid, string $contentType = self::contentTypes['v1OmsiMapsMapidTripsGet'][0])
    {
        list($response) = $this->v1OmsiMapsMapidTripsGetWithHttpInfo($mapid, $contentType);
        return $response;
    }

    /**
     * Operation v1OmsiMapsMapidTripsGetWithHttpInfo
     *
     * @param  int $mapid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1OmsiMapsMapidTripsGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\FPHSpedVAPIObjectsOMSITourTrip[], HTTP status code, HTTP response headers (array of strings)
     */
    public function v1OmsiMapsMapidTripsGetWithHttpInfo($mapid, string $contentType = self::contentTypes['v1OmsiMapsMapidTripsGet'][0])
    {
        $request = $this->v1OmsiMapsMapidTripsGetRequest($mapid, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\FPHSpedVAPIObjectsOMSITourTrip[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\FPHSpedVAPIObjectsOMSITourTrip[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\FPHSpedVAPIObjectsOMSITourTrip[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\FPHSpedVAPIObjectsOMSITourTrip[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\FPHSpedVAPIObjectsOMSITourTrip[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1OmsiMapsMapidTripsGetAsync
     *
     * @param  int $mapid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1OmsiMapsMapidTripsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1OmsiMapsMapidTripsGetAsync($mapid, string $contentType = self::contentTypes['v1OmsiMapsMapidTripsGet'][0])
    {
        return $this->v1OmsiMapsMapidTripsGetAsyncWithHttpInfo($mapid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1OmsiMapsMapidTripsGetAsyncWithHttpInfo
     *
     * @param  int $mapid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1OmsiMapsMapidTripsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1OmsiMapsMapidTripsGetAsyncWithHttpInfo($mapid, string $contentType = self::contentTypes['v1OmsiMapsMapidTripsGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\FPHSpedVAPIObjectsOMSITourTrip[]';
        $request = $this->v1OmsiMapsMapidTripsGetRequest($mapid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1OmsiMapsMapidTripsGet'
     *
     * @param  int $mapid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1OmsiMapsMapidTripsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1OmsiMapsMapidTripsGetRequest($mapid, string $contentType = self::contentTypes['v1OmsiMapsMapidTripsGet'][0])
    {

        // verify the required parameter 'mapid' is set
        if ($mapid === null || (is_array($mapid) && count($mapid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mapid when calling v1OmsiMapsMapidTripsGet'
            );
        }


        $resourcePath = '/v1/omsi/maps/{mapid}/trips';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($mapid !== null) {
            $resourcePath = str_replace(
                '{' . 'mapid' . '}',
                ObjectSerializer::toPathValue($mapid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}

<?php
/**
 * FPHSpedVAPIObjectsOMSITripBusStop
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SpedV API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * FPHSpedVAPIObjectsOMSITripBusStop Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class FPHSpedVAPIObjectsOMSITripBusStop implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'FPH.SpedV.API.Objects.OMSI.TripBusStop';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'bus_stop' => '\OpenAPI\Client\Model\FPHSpedVAPIObjectsOMSIBusStop',
        'time' => 'string',
        'time_since_last' => 'string',
        'departure' => '\DateTime',
        'is_go_through' => 'bool',
        'distance_since_last' => 'int',
        'needed_velocity' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int32',
        'bus_stop' => null,
        'time' => 'time-span',
        'time_since_last' => 'time-span',
        'departure' => 'date-time',
        'is_go_through' => null,
        'distance_since_last' => 'int32',
        'needed_velocity' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'bus_stop' => true,
        'time' => false,
        'time_since_last' => false,
        'departure' => false,
        'is_go_through' => false,
        'distance_since_last' => false,
        'needed_velocity' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'bus_stop' => 'busStop',
        'time' => 'time',
        'time_since_last' => 'timeSinceLast',
        'departure' => 'departure',
        'is_go_through' => 'isGoThrough',
        'distance_since_last' => 'distanceSinceLast',
        'needed_velocity' => 'neededVelocity'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'bus_stop' => 'setBusStop',
        'time' => 'setTime',
        'time_since_last' => 'setTimeSinceLast',
        'departure' => 'setDeparture',
        'is_go_through' => 'setIsGoThrough',
        'distance_since_last' => 'setDistanceSinceLast',
        'needed_velocity' => 'setNeededVelocity'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'bus_stop' => 'getBusStop',
        'time' => 'getTime',
        'time_since_last' => 'getTimeSinceLast',
        'departure' => 'getDeparture',
        'is_go_through' => 'getIsGoThrough',
        'distance_since_last' => 'getDistanceSinceLast',
        'needed_velocity' => 'getNeededVelocity'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('bus_stop', $data ?? [], null);
        $this->setIfExists('time', $data ?? [], null);
        $this->setIfExists('time_since_last', $data ?? [], null);
        $this->setIfExists('departure', $data ?? [], null);
        $this->setIfExists('is_go_through', $data ?? [], null);
        $this->setIfExists('distance_since_last', $data ?? [], null);
        $this->setIfExists('needed_velocity', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['bus_stop'] === null) {
            $invalidProperties[] = "'bus_stop' can't be null";
        }
        if ($this->container['time'] === null) {
            $invalidProperties[] = "'time' can't be null";
        }
        if ($this->container['time_since_last'] === null) {
            $invalidProperties[] = "'time_since_last' can't be null";
        }
        if ($this->container['departure'] === null) {
            $invalidProperties[] = "'departure' can't be null";
        }
        if ($this->container['is_go_through'] === null) {
            $invalidProperties[] = "'is_go_through' can't be null";
        }
        if ($this->container['distance_since_last'] === null) {
            $invalidProperties[] = "'distance_since_last' can't be null";
        }
        if ($this->container['needed_velocity'] === null) {
            $invalidProperties[] = "'needed_velocity' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets bus_stop
     *
     * @return \OpenAPI\Client\Model\FPHSpedVAPIObjectsOMSIBusStop
     */
    public function getBusStop()
    {
        return $this->container['bus_stop'];
    }

    /**
     * Sets bus_stop
     *
     * @param \OpenAPI\Client\Model\FPHSpedVAPIObjectsOMSIBusStop $bus_stop bus_stop
     *
     * @return self
     */
    public function setBusStop($bus_stop)
    {
        if (is_null($bus_stop)) {
            array_push($this->openAPINullablesSetToNull, 'bus_stop');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bus_stop', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['bus_stop'] = $bus_stop;

        return $this;
    }

    /**
     * Gets time
     *
     * @return string
     */
    public function getTime()
    {
        return $this->container['time'];
    }

    /**
     * Sets time
     *
     * @param string $time time
     *
     * @return self
     */
    public function setTime($time)
    {
        if (is_null($time)) {
            throw new \InvalidArgumentException('non-nullable time cannot be null');
        }
        $this->container['time'] = $time;

        return $this;
    }

    /**
     * Gets time_since_last
     *
     * @return string
     */
    public function getTimeSinceLast()
    {
        return $this->container['time_since_last'];
    }

    /**
     * Sets time_since_last
     *
     * @param string $time_since_last time_since_last
     *
     * @return self
     */
    public function setTimeSinceLast($time_since_last)
    {
        if (is_null($time_since_last)) {
            throw new \InvalidArgumentException('non-nullable time_since_last cannot be null');
        }
        $this->container['time_since_last'] = $time_since_last;

        return $this;
    }

    /**
     * Gets departure
     *
     * @return \DateTime
     */
    public function getDeparture()
    {
        return $this->container['departure'];
    }

    /**
     * Sets departure
     *
     * @param \DateTime $departure departure
     *
     * @return self
     */
    public function setDeparture($departure)
    {
        if (is_null($departure)) {
            throw new \InvalidArgumentException('non-nullable departure cannot be null');
        }
        $this->container['departure'] = $departure;

        return $this;
    }

    /**
     * Gets is_go_through
     *
     * @return bool
     */
    public function getIsGoThrough()
    {
        return $this->container['is_go_through'];
    }

    /**
     * Sets is_go_through
     *
     * @param bool $is_go_through is_go_through
     *
     * @return self
     */
    public function setIsGoThrough($is_go_through)
    {
        if (is_null($is_go_through)) {
            throw new \InvalidArgumentException('non-nullable is_go_through cannot be null');
        }
        $this->container['is_go_through'] = $is_go_through;

        return $this;
    }

    /**
     * Gets distance_since_last
     *
     * @return int
     */
    public function getDistanceSinceLast()
    {
        return $this->container['distance_since_last'];
    }

    /**
     * Sets distance_since_last
     *
     * @param int $distance_since_last distance_since_last
     *
     * @return self
     */
    public function setDistanceSinceLast($distance_since_last)
    {
        if (is_null($distance_since_last)) {
            throw new \InvalidArgumentException('non-nullable distance_since_last cannot be null');
        }
        $this->container['distance_since_last'] = $distance_since_last;

        return $this;
    }

    /**
     * Gets needed_velocity
     *
     * @return string
     */
    public function getNeededVelocity()
    {
        return $this->container['needed_velocity'];
    }

    /**
     * Sets needed_velocity
     *
     * @param string $needed_velocity needed_velocity
     *
     * @return self
     */
    public function setNeededVelocity($needed_velocity)
    {
        if (is_null($needed_velocity)) {
            array_push($this->openAPINullablesSetToNull, 'needed_velocity');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('needed_velocity', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['needed_velocity'] = $needed_velocity;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



<?php
/**
 * FPHSpedVAPIObjectsKontorJob
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SpedV API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * FPHSpedVAPIObjectsKontorJob Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class FPHSpedVAPIObjectsKontorJob implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'FPH.SpedV.API.Objects.Kontor.Job';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'source' => '\OpenAPI\Client\Model\FPHSpedVAPIObjectsMapsCompanyCity',
        'destination' => '\OpenAPI\Client\Model\FPHSpedVAPIObjectsMapsCompanyCity',
        'weight' => 'int',
        'vis_weight' => 'string',
        'spedition' => '\OpenAPI\Client\Model\FPHSpedVAPIObjectsSpeditionsSpedition',
        'freight' => '\OpenAPI\Client\Model\FPHSpedVAPIObjectsKontorFreight',
        'value' => 'int',
        'accepted_by' => '\OpenAPI\Client\Model\FPHSpedVAPIObjectsUsersUser',
        'comment' => 'string',
        'vis_value' => 'string',
        'job_parts' => '\OpenAPI\Client\Model\FPHSpedVAPIObjectsKontorJobPartLoaded[]',
        'state' => '\OpenAPI\Client\Model\FPHSpedVAPIEnumsJobOfferState',
        'expiration_date' => '\DateTime',
        'distance' => 'int',
        'vis_distance' => 'string',
        'is_real_eco' => 'bool',
        'complete_scheduled' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int32',
        'source' => null,
        'destination' => null,
        'weight' => 'int32',
        'vis_weight' => null,
        'spedition' => null,
        'freight' => null,
        'value' => 'int32',
        'accepted_by' => null,
        'comment' => null,
        'vis_value' => null,
        'job_parts' => null,
        'state' => null,
        'expiration_date' => 'date-time',
        'distance' => 'int32',
        'vis_distance' => null,
        'is_real_eco' => null,
        'complete_scheduled' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'source' => true,
        'destination' => true,
        'weight' => false,
        'vis_weight' => true,
        'spedition' => true,
        'freight' => true,
        'value' => false,
        'accepted_by' => true,
        'comment' => true,
        'vis_value' => true,
        'job_parts' => true,
        'state' => false,
        'expiration_date' => false,
        'distance' => false,
        'vis_distance' => true,
        'is_real_eco' => false,
        'complete_scheduled' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'source' => 'source',
        'destination' => 'destination',
        'weight' => 'weight',
        'vis_weight' => 'visWeight',
        'spedition' => 'spedition',
        'freight' => 'freight',
        'value' => 'value',
        'accepted_by' => 'acceptedBy',
        'comment' => 'comment',
        'vis_value' => 'visValue',
        'job_parts' => 'jobParts',
        'state' => 'state',
        'expiration_date' => 'expirationDate',
        'distance' => 'distance',
        'vis_distance' => 'visDistance',
        'is_real_eco' => 'isRealEco',
        'complete_scheduled' => 'completeScheduled'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'source' => 'setSource',
        'destination' => 'setDestination',
        'weight' => 'setWeight',
        'vis_weight' => 'setVisWeight',
        'spedition' => 'setSpedition',
        'freight' => 'setFreight',
        'value' => 'setValue',
        'accepted_by' => 'setAcceptedBy',
        'comment' => 'setComment',
        'vis_value' => 'setVisValue',
        'job_parts' => 'setJobParts',
        'state' => 'setState',
        'expiration_date' => 'setExpirationDate',
        'distance' => 'setDistance',
        'vis_distance' => 'setVisDistance',
        'is_real_eco' => 'setIsRealEco',
        'complete_scheduled' => 'setCompleteScheduled'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'source' => 'getSource',
        'destination' => 'getDestination',
        'weight' => 'getWeight',
        'vis_weight' => 'getVisWeight',
        'spedition' => 'getSpedition',
        'freight' => 'getFreight',
        'value' => 'getValue',
        'accepted_by' => 'getAcceptedBy',
        'comment' => 'getComment',
        'vis_value' => 'getVisValue',
        'job_parts' => 'getJobParts',
        'state' => 'getState',
        'expiration_date' => 'getExpirationDate',
        'distance' => 'getDistance',
        'vis_distance' => 'getVisDistance',
        'is_real_eco' => 'getIsRealEco',
        'complete_scheduled' => 'getCompleteScheduled'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('source', $data ?? [], null);
        $this->setIfExists('destination', $data ?? [], null);
        $this->setIfExists('weight', $data ?? [], null);
        $this->setIfExists('vis_weight', $data ?? [], null);
        $this->setIfExists('spedition', $data ?? [], null);
        $this->setIfExists('freight', $data ?? [], null);
        $this->setIfExists('value', $data ?? [], null);
        $this->setIfExists('accepted_by', $data ?? [], null);
        $this->setIfExists('comment', $data ?? [], null);
        $this->setIfExists('vis_value', $data ?? [], null);
        $this->setIfExists('job_parts', $data ?? [], null);
        $this->setIfExists('state', $data ?? [], null);
        $this->setIfExists('expiration_date', $data ?? [], null);
        $this->setIfExists('distance', $data ?? [], null);
        $this->setIfExists('vis_distance', $data ?? [], null);
        $this->setIfExists('is_real_eco', $data ?? [], null);
        $this->setIfExists('complete_scheduled', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['source'] === null) {
            $invalidProperties[] = "'source' can't be null";
        }
        if ($this->container['destination'] === null) {
            $invalidProperties[] = "'destination' can't be null";
        }
        if ($this->container['weight'] === null) {
            $invalidProperties[] = "'weight' can't be null";
        }
        if ($this->container['vis_weight'] === null) {
            $invalidProperties[] = "'vis_weight' can't be null";
        }
        if ($this->container['spedition'] === null) {
            $invalidProperties[] = "'spedition' can't be null";
        }
        if ($this->container['freight'] === null) {
            $invalidProperties[] = "'freight' can't be null";
        }
        if ($this->container['value'] === null) {
            $invalidProperties[] = "'value' can't be null";
        }
        if ($this->container['accepted_by'] === null) {
            $invalidProperties[] = "'accepted_by' can't be null";
        }
        if ($this->container['comment'] === null) {
            $invalidProperties[] = "'comment' can't be null";
        }
        if ($this->container['vis_value'] === null) {
            $invalidProperties[] = "'vis_value' can't be null";
        }
        if ($this->container['job_parts'] === null) {
            $invalidProperties[] = "'job_parts' can't be null";
        }
        if ($this->container['state'] === null) {
            $invalidProperties[] = "'state' can't be null";
        }
        if ($this->container['expiration_date'] === null) {
            $invalidProperties[] = "'expiration_date' can't be null";
        }
        if ($this->container['distance'] === null) {
            $invalidProperties[] = "'distance' can't be null";
        }
        if ($this->container['vis_distance'] === null) {
            $invalidProperties[] = "'vis_distance' can't be null";
        }
        if ($this->container['is_real_eco'] === null) {
            $invalidProperties[] = "'is_real_eco' can't be null";
        }
        if ($this->container['complete_scheduled'] === null) {
            $invalidProperties[] = "'complete_scheduled' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets source
     *
     * @return \OpenAPI\Client\Model\FPHSpedVAPIObjectsMapsCompanyCity
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     *
     * @param \OpenAPI\Client\Model\FPHSpedVAPIObjectsMapsCompanyCity $source source
     *
     * @return self
     */
    public function setSource($source)
    {
        if (is_null($source)) {
            array_push($this->openAPINullablesSetToNull, 'source');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('source', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['source'] = $source;

        return $this;
    }

    /**
     * Gets destination
     *
     * @return \OpenAPI\Client\Model\FPHSpedVAPIObjectsMapsCompanyCity
     */
    public function getDestination()
    {
        return $this->container['destination'];
    }

    /**
     * Sets destination
     *
     * @param \OpenAPI\Client\Model\FPHSpedVAPIObjectsMapsCompanyCity $destination destination
     *
     * @return self
     */
    public function setDestination($destination)
    {
        if (is_null($destination)) {
            array_push($this->openAPINullablesSetToNull, 'destination');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('destination', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['destination'] = $destination;

        return $this;
    }

    /**
     * Gets weight
     *
     * @return int
     */
    public function getWeight()
    {
        return $this->container['weight'];
    }

    /**
     * Sets weight
     *
     * @param int $weight weight
     *
     * @return self
     */
    public function setWeight($weight)
    {
        if (is_null($weight)) {
            throw new \InvalidArgumentException('non-nullable weight cannot be null');
        }
        $this->container['weight'] = $weight;

        return $this;
    }

    /**
     * Gets vis_weight
     *
     * @return string
     */
    public function getVisWeight()
    {
        return $this->container['vis_weight'];
    }

    /**
     * Sets vis_weight
     *
     * @param string $vis_weight vis_weight
     *
     * @return self
     */
    public function setVisWeight($vis_weight)
    {
        if (is_null($vis_weight)) {
            array_push($this->openAPINullablesSetToNull, 'vis_weight');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('vis_weight', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['vis_weight'] = $vis_weight;

        return $this;
    }

    /**
     * Gets spedition
     *
     * @return \OpenAPI\Client\Model\FPHSpedVAPIObjectsSpeditionsSpedition
     */
    public function getSpedition()
    {
        return $this->container['spedition'];
    }

    /**
     * Sets spedition
     *
     * @param \OpenAPI\Client\Model\FPHSpedVAPIObjectsSpeditionsSpedition $spedition spedition
     *
     * @return self
     */
    public function setSpedition($spedition)
    {
        if (is_null($spedition)) {
            array_push($this->openAPINullablesSetToNull, 'spedition');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('spedition', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['spedition'] = $spedition;

        return $this;
    }

    /**
     * Gets freight
     *
     * @return \OpenAPI\Client\Model\FPHSpedVAPIObjectsKontorFreight
     */
    public function getFreight()
    {
        return $this->container['freight'];
    }

    /**
     * Sets freight
     *
     * @param \OpenAPI\Client\Model\FPHSpedVAPIObjectsKontorFreight $freight freight
     *
     * @return self
     */
    public function setFreight($freight)
    {
        if (is_null($freight)) {
            array_push($this->openAPINullablesSetToNull, 'freight');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('freight', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['freight'] = $freight;

        return $this;
    }

    /**
     * Gets value
     *
     * @return int
     */
    public function getValue()
    {
        return $this->container['value'];
    }

    /**
     * Sets value
     *
     * @param int $value value
     *
     * @return self
     */
    public function setValue($value)
    {
        if (is_null($value)) {
            throw new \InvalidArgumentException('non-nullable value cannot be null');
        }
        $this->container['value'] = $value;

        return $this;
    }

    /**
     * Gets accepted_by
     *
     * @return \OpenAPI\Client\Model\FPHSpedVAPIObjectsUsersUser
     */
    public function getAcceptedBy()
    {
        return $this->container['accepted_by'];
    }

    /**
     * Sets accepted_by
     *
     * @param \OpenAPI\Client\Model\FPHSpedVAPIObjectsUsersUser $accepted_by accepted_by
     *
     * @return self
     */
    public function setAcceptedBy($accepted_by)
    {
        if (is_null($accepted_by)) {
            array_push($this->openAPINullablesSetToNull, 'accepted_by');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('accepted_by', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['accepted_by'] = $accepted_by;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string $comment comment
     *
     * @return self
     */
    public function setComment($comment)
    {
        if (is_null($comment)) {
            array_push($this->openAPINullablesSetToNull, 'comment');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('comment', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets vis_value
     *
     * @return string
     */
    public function getVisValue()
    {
        return $this->container['vis_value'];
    }

    /**
     * Sets vis_value
     *
     * @param string $vis_value vis_value
     *
     * @return self
     */
    public function setVisValue($vis_value)
    {
        if (is_null($vis_value)) {
            array_push($this->openAPINullablesSetToNull, 'vis_value');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('vis_value', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['vis_value'] = $vis_value;

        return $this;
    }

    /**
     * Gets job_parts
     *
     * @return \OpenAPI\Client\Model\FPHSpedVAPIObjectsKontorJobPartLoaded[]
     */
    public function getJobParts()
    {
        return $this->container['job_parts'];
    }

    /**
     * Sets job_parts
     *
     * @param \OpenAPI\Client\Model\FPHSpedVAPIObjectsKontorJobPartLoaded[] $job_parts job_parts
     *
     * @return self
     */
    public function setJobParts($job_parts)
    {
        if (is_null($job_parts)) {
            array_push($this->openAPINullablesSetToNull, 'job_parts');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('job_parts', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['job_parts'] = $job_parts;

        return $this;
    }

    /**
     * Gets state
     *
     * @return \OpenAPI\Client\Model\FPHSpedVAPIEnumsJobOfferState
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param \OpenAPI\Client\Model\FPHSpedVAPIEnumsJobOfferState $state 0 = WaitingSpedition  1 = WaitingDrive  2 = InDrive  3 = Finished  -1 = NotAvaliable
     *
     * @return self
     */
    public function setState($state)
    {
        if (is_null($state)) {
            throw new \InvalidArgumentException('non-nullable state cannot be null');
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets expiration_date
     *
     * @return \DateTime
     */
    public function getExpirationDate()
    {
        return $this->container['expiration_date'];
    }

    /**
     * Sets expiration_date
     *
     * @param \DateTime $expiration_date expiration_date
     *
     * @return self
     */
    public function setExpirationDate($expiration_date)
    {
        if (is_null($expiration_date)) {
            throw new \InvalidArgumentException('non-nullable expiration_date cannot be null');
        }
        $this->container['expiration_date'] = $expiration_date;

        return $this;
    }

    /**
     * Gets distance
     *
     * @return int
     */
    public function getDistance()
    {
        return $this->container['distance'];
    }

    /**
     * Sets distance
     *
     * @param int $distance distance
     *
     * @return self
     */
    public function setDistance($distance)
    {
        if (is_null($distance)) {
            throw new \InvalidArgumentException('non-nullable distance cannot be null');
        }
        $this->container['distance'] = $distance;

        return $this;
    }

    /**
     * Gets vis_distance
     *
     * @return string
     */
    public function getVisDistance()
    {
        return $this->container['vis_distance'];
    }

    /**
     * Sets vis_distance
     *
     * @param string $vis_distance vis_distance
     *
     * @return self
     */
    public function setVisDistance($vis_distance)
    {
        if (is_null($vis_distance)) {
            array_push($this->openAPINullablesSetToNull, 'vis_distance');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('vis_distance', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['vis_distance'] = $vis_distance;

        return $this;
    }

    /**
     * Gets is_real_eco
     *
     * @return bool
     */
    public function getIsRealEco()
    {
        return $this->container['is_real_eco'];
    }

    /**
     * Sets is_real_eco
     *
     * @param bool $is_real_eco is_real_eco
     *
     * @return self
     */
    public function setIsRealEco($is_real_eco)
    {
        if (is_null($is_real_eco)) {
            throw new \InvalidArgumentException('non-nullable is_real_eco cannot be null');
        }
        $this->container['is_real_eco'] = $is_real_eco;

        return $this;
    }

    /**
     * Gets complete_scheduled
     *
     * @return bool
     */
    public function getCompleteScheduled()
    {
        return $this->container['complete_scheduled'];
    }

    /**
     * Sets complete_scheduled
     *
     * @param bool $complete_scheduled complete_scheduled
     *
     * @return self
     */
    public function setCompleteScheduled($complete_scheduled)
    {
        if (is_null($complete_scheduled)) {
            throw new \InvalidArgumentException('non-nullable complete_scheduled cannot be null');
        }
        $this->container['complete_scheduled'] = $complete_scheduled;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



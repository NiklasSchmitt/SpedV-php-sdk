<?php
/**
 * FPHSpedVAPIObjectsSimRailSimRailActiveTrainData
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SpedV API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * FPHSpedVAPIObjectsSimRailSimRailActiveTrainData Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class FPHSpedVAPIObjectsSimRailSimRailActiveTrainData implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'FPH.SpedV.API.Objects.SimRail.SimRailActiveTrainData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'train_name' => 'string',
        'train_number' => 'string',
        'train_number_international' => 'string',
        'train_length' => 'int',
        'train_weight' => 'int',
        'continues_as' => 'string',
        'server_data' => '\OpenAPI\Client\Model\FPHSpedVAPIObjectsSimRailSimRailServerInfo',
        'id' => 'string',
        'start_station' => 'string',
        'end_station' => 'string',
        'vehicles' => 'string[]',
        'control_type' => '\OpenAPI\Client\Model\FPHSpedVAPIObjectsSimRailSimRailTrainControlType',
        'controlled_by_steam_id' => 'int',
        'latitude' => 'float',
        'longitude' => 'float',
        'velocity' => 'float',
        'next_signal' => 'string',
        'distance_to_next_signal' => 'float',
        'signal_in_front_speed' => 'int',
        'api_timetable_index' => 'int',
        'last_real_timetable_index' => 'int',
        'current_position_type' => '\OpenAPI\Client\Model\FPHSpedVAPIObjectsSimRailSimRailTrainPositionType',
        'timetable' => '\OpenAPI\Client\Model\FPHSpedVAPIObjectsSimRailSimRailTrainLiveTimetableEntry[]',
        'current_timetable_index' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'train_name' => null,
        'train_number' => null,
        'train_number_international' => null,
        'train_length' => 'int32',
        'train_weight' => 'int32',
        'continues_as' => null,
        'server_data' => null,
        'id' => null,
        'start_station' => null,
        'end_station' => null,
        'vehicles' => null,
        'control_type' => null,
        'controlled_by_steam_id' => 'int64',
        'latitude' => 'double',
        'longitude' => 'double',
        'velocity' => 'double',
        'next_signal' => null,
        'distance_to_next_signal' => 'double',
        'signal_in_front_speed' => 'int32',
        'api_timetable_index' => 'int32',
        'last_real_timetable_index' => 'int32',
        'current_position_type' => null,
        'timetable' => null,
        'current_timetable_index' => 'int32'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'train_name' => true,
        'train_number' => true,
        'train_number_international' => true,
        'train_length' => false,
        'train_weight' => false,
        'continues_as' => true,
        'server_data' => true,
        'id' => true,
        'start_station' => true,
        'end_station' => true,
        'vehicles' => true,
        'control_type' => false,
        'controlled_by_steam_id' => true,
        'latitude' => false,
        'longitude' => false,
        'velocity' => false,
        'next_signal' => true,
        'distance_to_next_signal' => false,
        'signal_in_front_speed' => false,
        'api_timetable_index' => false,
        'last_real_timetable_index' => false,
        'current_position_type' => false,
        'timetable' => true,
        'current_timetable_index' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'train_name' => 'trainName',
        'train_number' => 'trainNumber',
        'train_number_international' => 'trainNumberInternational',
        'train_length' => 'trainLength',
        'train_weight' => 'trainWeight',
        'continues_as' => 'continuesAs',
        'server_data' => 'serverData',
        'id' => 'id',
        'start_station' => 'startStation',
        'end_station' => 'endStation',
        'vehicles' => 'vehicles',
        'control_type' => 'controlType',
        'controlled_by_steam_id' => 'controlledBySteamID',
        'latitude' => 'latitude',
        'longitude' => 'longitude',
        'velocity' => 'velocity',
        'next_signal' => 'nextSignal',
        'distance_to_next_signal' => 'distanceToNextSignal',
        'signal_in_front_speed' => 'signalInFrontSpeed',
        'api_timetable_index' => 'apiTimetableIndex',
        'last_real_timetable_index' => 'lastRealTimetableIndex',
        'current_position_type' => 'currentPositionType',
        'timetable' => 'timetable',
        'current_timetable_index' => 'currentTimetableIndex'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'train_name' => 'setTrainName',
        'train_number' => 'setTrainNumber',
        'train_number_international' => 'setTrainNumberInternational',
        'train_length' => 'setTrainLength',
        'train_weight' => 'setTrainWeight',
        'continues_as' => 'setContinuesAs',
        'server_data' => 'setServerData',
        'id' => 'setId',
        'start_station' => 'setStartStation',
        'end_station' => 'setEndStation',
        'vehicles' => 'setVehicles',
        'control_type' => 'setControlType',
        'controlled_by_steam_id' => 'setControlledBySteamId',
        'latitude' => 'setLatitude',
        'longitude' => 'setLongitude',
        'velocity' => 'setVelocity',
        'next_signal' => 'setNextSignal',
        'distance_to_next_signal' => 'setDistanceToNextSignal',
        'signal_in_front_speed' => 'setSignalInFrontSpeed',
        'api_timetable_index' => 'setApiTimetableIndex',
        'last_real_timetable_index' => 'setLastRealTimetableIndex',
        'current_position_type' => 'setCurrentPositionType',
        'timetable' => 'setTimetable',
        'current_timetable_index' => 'setCurrentTimetableIndex'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'train_name' => 'getTrainName',
        'train_number' => 'getTrainNumber',
        'train_number_international' => 'getTrainNumberInternational',
        'train_length' => 'getTrainLength',
        'train_weight' => 'getTrainWeight',
        'continues_as' => 'getContinuesAs',
        'server_data' => 'getServerData',
        'id' => 'getId',
        'start_station' => 'getStartStation',
        'end_station' => 'getEndStation',
        'vehicles' => 'getVehicles',
        'control_type' => 'getControlType',
        'controlled_by_steam_id' => 'getControlledBySteamId',
        'latitude' => 'getLatitude',
        'longitude' => 'getLongitude',
        'velocity' => 'getVelocity',
        'next_signal' => 'getNextSignal',
        'distance_to_next_signal' => 'getDistanceToNextSignal',
        'signal_in_front_speed' => 'getSignalInFrontSpeed',
        'api_timetable_index' => 'getApiTimetableIndex',
        'last_real_timetable_index' => 'getLastRealTimetableIndex',
        'current_position_type' => 'getCurrentPositionType',
        'timetable' => 'getTimetable',
        'current_timetable_index' => 'getCurrentTimetableIndex'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('train_name', $data ?? [], null);
        $this->setIfExists('train_number', $data ?? [], null);
        $this->setIfExists('train_number_international', $data ?? [], null);
        $this->setIfExists('train_length', $data ?? [], null);
        $this->setIfExists('train_weight', $data ?? [], null);
        $this->setIfExists('continues_as', $data ?? [], null);
        $this->setIfExists('server_data', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('start_station', $data ?? [], null);
        $this->setIfExists('end_station', $data ?? [], null);
        $this->setIfExists('vehicles', $data ?? [], null);
        $this->setIfExists('control_type', $data ?? [], null);
        $this->setIfExists('controlled_by_steam_id', $data ?? [], null);
        $this->setIfExists('latitude', $data ?? [], null);
        $this->setIfExists('longitude', $data ?? [], null);
        $this->setIfExists('velocity', $data ?? [], null);
        $this->setIfExists('next_signal', $data ?? [], null);
        $this->setIfExists('distance_to_next_signal', $data ?? [], null);
        $this->setIfExists('signal_in_front_speed', $data ?? [], null);
        $this->setIfExists('api_timetable_index', $data ?? [], null);
        $this->setIfExists('last_real_timetable_index', $data ?? [], null);
        $this->setIfExists('current_position_type', $data ?? [], null);
        $this->setIfExists('timetable', $data ?? [], null);
        $this->setIfExists('current_timetable_index', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['train_name'] === null) {
            $invalidProperties[] = "'train_name' can't be null";
        }
        if ($this->container['train_number'] === null) {
            $invalidProperties[] = "'train_number' can't be null";
        }
        if ($this->container['train_number_international'] === null) {
            $invalidProperties[] = "'train_number_international' can't be null";
        }
        if ($this->container['train_length'] === null) {
            $invalidProperties[] = "'train_length' can't be null";
        }
        if ($this->container['train_weight'] === null) {
            $invalidProperties[] = "'train_weight' can't be null";
        }
        if ($this->container['continues_as'] === null) {
            $invalidProperties[] = "'continues_as' can't be null";
        }
        if ($this->container['server_data'] === null) {
            $invalidProperties[] = "'server_data' can't be null";
        }
        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['start_station'] === null) {
            $invalidProperties[] = "'start_station' can't be null";
        }
        if ($this->container['end_station'] === null) {
            $invalidProperties[] = "'end_station' can't be null";
        }
        if ($this->container['vehicles'] === null) {
            $invalidProperties[] = "'vehicles' can't be null";
        }
        if ($this->container['control_type'] === null) {
            $invalidProperties[] = "'control_type' can't be null";
        }
        if ($this->container['controlled_by_steam_id'] === null) {
            $invalidProperties[] = "'controlled_by_steam_id' can't be null";
        }
        if ($this->container['latitude'] === null) {
            $invalidProperties[] = "'latitude' can't be null";
        }
        if ($this->container['longitude'] === null) {
            $invalidProperties[] = "'longitude' can't be null";
        }
        if ($this->container['velocity'] === null) {
            $invalidProperties[] = "'velocity' can't be null";
        }
        if ($this->container['next_signal'] === null) {
            $invalidProperties[] = "'next_signal' can't be null";
        }
        if ($this->container['distance_to_next_signal'] === null) {
            $invalidProperties[] = "'distance_to_next_signal' can't be null";
        }
        if ($this->container['signal_in_front_speed'] === null) {
            $invalidProperties[] = "'signal_in_front_speed' can't be null";
        }
        if ($this->container['api_timetable_index'] === null) {
            $invalidProperties[] = "'api_timetable_index' can't be null";
        }
        if ($this->container['last_real_timetable_index'] === null) {
            $invalidProperties[] = "'last_real_timetable_index' can't be null";
        }
        if ($this->container['current_position_type'] === null) {
            $invalidProperties[] = "'current_position_type' can't be null";
        }
        if ($this->container['timetable'] === null) {
            $invalidProperties[] = "'timetable' can't be null";
        }
        if ($this->container['current_timetable_index'] === null) {
            $invalidProperties[] = "'current_timetable_index' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets train_name
     *
     * @return string
     */
    public function getTrainName()
    {
        return $this->container['train_name'];
    }

    /**
     * Sets train_name
     *
     * @param string $train_name train_name
     *
     * @return self
     */
    public function setTrainName($train_name)
    {
        if (is_null($train_name)) {
            array_push($this->openAPINullablesSetToNull, 'train_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('train_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['train_name'] = $train_name;

        return $this;
    }

    /**
     * Gets train_number
     *
     * @return string
     */
    public function getTrainNumber()
    {
        return $this->container['train_number'];
    }

    /**
     * Sets train_number
     *
     * @param string $train_number train_number
     *
     * @return self
     */
    public function setTrainNumber($train_number)
    {
        if (is_null($train_number)) {
            array_push($this->openAPINullablesSetToNull, 'train_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('train_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['train_number'] = $train_number;

        return $this;
    }

    /**
     * Gets train_number_international
     *
     * @return string
     */
    public function getTrainNumberInternational()
    {
        return $this->container['train_number_international'];
    }

    /**
     * Sets train_number_international
     *
     * @param string $train_number_international train_number_international
     *
     * @return self
     */
    public function setTrainNumberInternational($train_number_international)
    {
        if (is_null($train_number_international)) {
            array_push($this->openAPINullablesSetToNull, 'train_number_international');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('train_number_international', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['train_number_international'] = $train_number_international;

        return $this;
    }

    /**
     * Gets train_length
     *
     * @return int
     */
    public function getTrainLength()
    {
        return $this->container['train_length'];
    }

    /**
     * Sets train_length
     *
     * @param int $train_length train_length
     *
     * @return self
     */
    public function setTrainLength($train_length)
    {
        if (is_null($train_length)) {
            throw new \InvalidArgumentException('non-nullable train_length cannot be null');
        }
        $this->container['train_length'] = $train_length;

        return $this;
    }

    /**
     * Gets train_weight
     *
     * @return int
     */
    public function getTrainWeight()
    {
        return $this->container['train_weight'];
    }

    /**
     * Sets train_weight
     *
     * @param int $train_weight train_weight
     *
     * @return self
     */
    public function setTrainWeight($train_weight)
    {
        if (is_null($train_weight)) {
            throw new \InvalidArgumentException('non-nullable train_weight cannot be null');
        }
        $this->container['train_weight'] = $train_weight;

        return $this;
    }

    /**
     * Gets continues_as
     *
     * @return string
     */
    public function getContinuesAs()
    {
        return $this->container['continues_as'];
    }

    /**
     * Sets continues_as
     *
     * @param string $continues_as continues_as
     *
     * @return self
     */
    public function setContinuesAs($continues_as)
    {
        if (is_null($continues_as)) {
            array_push($this->openAPINullablesSetToNull, 'continues_as');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('continues_as', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['continues_as'] = $continues_as;

        return $this;
    }

    /**
     * Gets server_data
     *
     * @return \OpenAPI\Client\Model\FPHSpedVAPIObjectsSimRailSimRailServerInfo
     */
    public function getServerData()
    {
        return $this->container['server_data'];
    }

    /**
     * Sets server_data
     *
     * @param \OpenAPI\Client\Model\FPHSpedVAPIObjectsSimRailSimRailServerInfo $server_data server_data
     *
     * @return self
     */
    public function setServerData($server_data)
    {
        if (is_null($server_data)) {
            array_push($this->openAPINullablesSetToNull, 'server_data');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('server_data', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['server_data'] = $server_data;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            array_push($this->openAPINullablesSetToNull, 'id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets start_station
     *
     * @return string
     */
    public function getStartStation()
    {
        return $this->container['start_station'];
    }

    /**
     * Sets start_station
     *
     * @param string $start_station start_station
     *
     * @return self
     */
    public function setStartStation($start_station)
    {
        if (is_null($start_station)) {
            array_push($this->openAPINullablesSetToNull, 'start_station');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('start_station', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['start_station'] = $start_station;

        return $this;
    }

    /**
     * Gets end_station
     *
     * @return string
     */
    public function getEndStation()
    {
        return $this->container['end_station'];
    }

    /**
     * Sets end_station
     *
     * @param string $end_station end_station
     *
     * @return self
     */
    public function setEndStation($end_station)
    {
        if (is_null($end_station)) {
            array_push($this->openAPINullablesSetToNull, 'end_station');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('end_station', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['end_station'] = $end_station;

        return $this;
    }

    /**
     * Gets vehicles
     *
     * @return string[]
     */
    public function getVehicles()
    {
        return $this->container['vehicles'];
    }

    /**
     * Sets vehicles
     *
     * @param string[] $vehicles vehicles
     *
     * @return self
     */
    public function setVehicles($vehicles)
    {
        if (is_null($vehicles)) {
            array_push($this->openAPINullablesSetToNull, 'vehicles');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('vehicles', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['vehicles'] = $vehicles;

        return $this;
    }

    /**
     * Gets control_type
     *
     * @return \OpenAPI\Client\Model\FPHSpedVAPIObjectsSimRailSimRailTrainControlType
     */
    public function getControlType()
    {
        return $this->container['control_type'];
    }

    /**
     * Sets control_type
     *
     * @param \OpenAPI\Client\Model\FPHSpedVAPIObjectsSimRailSimRailTrainControlType $control_type 0 = Ghost  1 = Bot  2 = Player
     *
     * @return self
     */
    public function setControlType($control_type)
    {
        if (is_null($control_type)) {
            throw new \InvalidArgumentException('non-nullable control_type cannot be null');
        }
        $this->container['control_type'] = $control_type;

        return $this;
    }

    /**
     * Gets controlled_by_steam_id
     *
     * @return int
     */
    public function getControlledBySteamId()
    {
        return $this->container['controlled_by_steam_id'];
    }

    /**
     * Sets controlled_by_steam_id
     *
     * @param int $controlled_by_steam_id controlled_by_steam_id
     *
     * @return self
     */
    public function setControlledBySteamId($controlled_by_steam_id)
    {
        if (is_null($controlled_by_steam_id)) {
            array_push($this->openAPINullablesSetToNull, 'controlled_by_steam_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('controlled_by_steam_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['controlled_by_steam_id'] = $controlled_by_steam_id;

        return $this;
    }

    /**
     * Gets latitude
     *
     * @return float
     */
    public function getLatitude()
    {
        return $this->container['latitude'];
    }

    /**
     * Sets latitude
     *
     * @param float $latitude latitude
     *
     * @return self
     */
    public function setLatitude($latitude)
    {
        if (is_null($latitude)) {
            throw new \InvalidArgumentException('non-nullable latitude cannot be null');
        }
        $this->container['latitude'] = $latitude;

        return $this;
    }

    /**
     * Gets longitude
     *
     * @return float
     */
    public function getLongitude()
    {
        return $this->container['longitude'];
    }

    /**
     * Sets longitude
     *
     * @param float $longitude longitude
     *
     * @return self
     */
    public function setLongitude($longitude)
    {
        if (is_null($longitude)) {
            throw new \InvalidArgumentException('non-nullable longitude cannot be null');
        }
        $this->container['longitude'] = $longitude;

        return $this;
    }

    /**
     * Gets velocity
     *
     * @return float
     */
    public function getVelocity()
    {
        return $this->container['velocity'];
    }

    /**
     * Sets velocity
     *
     * @param float $velocity velocity
     *
     * @return self
     */
    public function setVelocity($velocity)
    {
        if (is_null($velocity)) {
            throw new \InvalidArgumentException('non-nullable velocity cannot be null');
        }
        $this->container['velocity'] = $velocity;

        return $this;
    }

    /**
     * Gets next_signal
     *
     * @return string
     */
    public function getNextSignal()
    {
        return $this->container['next_signal'];
    }

    /**
     * Sets next_signal
     *
     * @param string $next_signal next_signal
     *
     * @return self
     */
    public function setNextSignal($next_signal)
    {
        if (is_null($next_signal)) {
            array_push($this->openAPINullablesSetToNull, 'next_signal');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('next_signal', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['next_signal'] = $next_signal;

        return $this;
    }

    /**
     * Gets distance_to_next_signal
     *
     * @return float
     */
    public function getDistanceToNextSignal()
    {
        return $this->container['distance_to_next_signal'];
    }

    /**
     * Sets distance_to_next_signal
     *
     * @param float $distance_to_next_signal distance_to_next_signal
     *
     * @return self
     */
    public function setDistanceToNextSignal($distance_to_next_signal)
    {
        if (is_null($distance_to_next_signal)) {
            throw new \InvalidArgumentException('non-nullable distance_to_next_signal cannot be null');
        }
        $this->container['distance_to_next_signal'] = $distance_to_next_signal;

        return $this;
    }

    /**
     * Gets signal_in_front_speed
     *
     * @return int
     */
    public function getSignalInFrontSpeed()
    {
        return $this->container['signal_in_front_speed'];
    }

    /**
     * Sets signal_in_front_speed
     *
     * @param int $signal_in_front_speed signal_in_front_speed
     *
     * @return self
     */
    public function setSignalInFrontSpeed($signal_in_front_speed)
    {
        if (is_null($signal_in_front_speed)) {
            throw new \InvalidArgumentException('non-nullable signal_in_front_speed cannot be null');
        }
        $this->container['signal_in_front_speed'] = $signal_in_front_speed;

        return $this;
    }

    /**
     * Gets api_timetable_index
     *
     * @return int
     */
    public function getApiTimetableIndex()
    {
        return $this->container['api_timetable_index'];
    }

    /**
     * Sets api_timetable_index
     *
     * @param int $api_timetable_index api_timetable_index
     *
     * @return self
     */
    public function setApiTimetableIndex($api_timetable_index)
    {
        if (is_null($api_timetable_index)) {
            throw new \InvalidArgumentException('non-nullable api_timetable_index cannot be null');
        }
        $this->container['api_timetable_index'] = $api_timetable_index;

        return $this;
    }

    /**
     * Gets last_real_timetable_index
     *
     * @return int
     */
    public function getLastRealTimetableIndex()
    {
        return $this->container['last_real_timetable_index'];
    }

    /**
     * Sets last_real_timetable_index
     *
     * @param int $last_real_timetable_index last_real_timetable_index
     *
     * @return self
     */
    public function setLastRealTimetableIndex($last_real_timetable_index)
    {
        if (is_null($last_real_timetable_index)) {
            throw new \InvalidArgumentException('non-nullable last_real_timetable_index cannot be null');
        }
        $this->container['last_real_timetable_index'] = $last_real_timetable_index;

        return $this;
    }

    /**
     * Gets current_position_type
     *
     * @return \OpenAPI\Client\Model\FPHSpedVAPIObjectsSimRailSimRailTrainPositionType
     */
    public function getCurrentPositionType()
    {
        return $this->container['current_position_type'];
    }

    /**
     * Sets current_position_type
     *
     * @param \OpenAPI\Client\Model\FPHSpedVAPIObjectsSimRailSimRailTrainPositionType $current_position_type 0 = InStation  1 = BetweenStations  2 = ApproachingStation
     *
     * @return self
     */
    public function setCurrentPositionType($current_position_type)
    {
        if (is_null($current_position_type)) {
            throw new \InvalidArgumentException('non-nullable current_position_type cannot be null');
        }
        $this->container['current_position_type'] = $current_position_type;

        return $this;
    }

    /**
     * Gets timetable
     *
     * @return \OpenAPI\Client\Model\FPHSpedVAPIObjectsSimRailSimRailTrainLiveTimetableEntry[]
     */
    public function getTimetable()
    {
        return $this->container['timetable'];
    }

    /**
     * Sets timetable
     *
     * @param \OpenAPI\Client\Model\FPHSpedVAPIObjectsSimRailSimRailTrainLiveTimetableEntry[] $timetable timetable
     *
     * @return self
     */
    public function setTimetable($timetable)
    {
        if (is_null($timetable)) {
            array_push($this->openAPINullablesSetToNull, 'timetable');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('timetable', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['timetable'] = $timetable;

        return $this;
    }

    /**
     * Gets current_timetable_index
     *
     * @return int
     */
    public function getCurrentTimetableIndex()
    {
        return $this->container['current_timetable_index'];
    }

    /**
     * Sets current_timetable_index
     *
     * @param int $current_timetable_index current_timetable_index
     *
     * @return self
     */
    public function setCurrentTimetableIndex($current_timetable_index)
    {
        if (is_null($current_timetable_index)) {
            throw new \InvalidArgumentException('non-nullable current_timetable_index cannot be null');
        }
        $this->container['current_timetable_index'] = $current_timetable_index;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



<?php
/**
 * FPHSpedVAPIObjectsKontorTrailer
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SpedV API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * FPHSpedVAPIObjectsKontorTrailer Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class FPHSpedVAPIObjectsKontorTrailer implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'FPH.SpedV.API.Objects.Kontor.Trailer';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'spedition' => '\OpenAPI\Client\Model\FPHSpedVAPIObjectsSpeditionsSpedition',
        'last_location' => '\OpenAPI\Client\Model\FPHSpedVAPIObjectsMapsCompanyCity',
        'act_location' => '\OpenAPI\Client\Model\FPHSpedVAPIObjectsMapsCompanyCity',
        'game' => '\OpenAPI\Client\Model\FPHSpedVAPIEnumsGameEnum',
        'license_plate' => 'string',
        'comment' => 'string',
        'category' => 'string',
        'skin' => 'string',
        'trailer_type' => '\OpenAPI\Client\Model\FPHSpedVAPIEnumsKontorTrailerType',
        'default_driver' => '\OpenAPI\Client\Model\FPHSpedVAPIObjectsUsersUser',
        'assigned_scheduler' => '\OpenAPI\Client\Model\FPHSpedVAPIObjectsUsersUser',
        'trailer_available' => '\DateTime',
        'next_main_inspection' => '\DateTime',
        'next_safety_check' => '\DateTime',
        'next_tire_change' => 'int',
        'next_brake_pads_change' => 'int',
        'next_brake_disc_change' => 'int',
        'has_oszilation_damper_defect' => 'bool',
        'has_brake_ventil_defect' => 'bool',
        'needed_maintenance_jobs' => '\OpenAPI\Client\Model\FPHSpedVAPIObjectsKontorNeededTrailerMaintenance[]',
        'km' => 'int',
        'max_weight' => 'int',
        'is_planned' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int32',
        'spedition' => null,
        'last_location' => null,
        'act_location' => null,
        'game' => null,
        'license_plate' => null,
        'comment' => null,
        'category' => null,
        'skin' => null,
        'trailer_type' => null,
        'default_driver' => null,
        'assigned_scheduler' => null,
        'trailer_available' => 'date-time',
        'next_main_inspection' => 'date-time',
        'next_safety_check' => 'date-time',
        'next_tire_change' => 'int32',
        'next_brake_pads_change' => 'int32',
        'next_brake_disc_change' => 'int32',
        'has_oszilation_damper_defect' => null,
        'has_brake_ventil_defect' => null,
        'needed_maintenance_jobs' => null,
        'km' => 'int32',
        'max_weight' => 'int32',
        'is_planned' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'spedition' => true,
        'last_location' => true,
        'act_location' => true,
        'game' => false,
        'license_plate' => true,
        'comment' => true,
        'category' => true,
        'skin' => true,
        'trailer_type' => false,
        'default_driver' => true,
        'assigned_scheduler' => true,
        'trailer_available' => false,
        'next_main_inspection' => false,
        'next_safety_check' => false,
        'next_tire_change' => false,
        'next_brake_pads_change' => false,
        'next_brake_disc_change' => false,
        'has_oszilation_damper_defect' => false,
        'has_brake_ventil_defect' => false,
        'needed_maintenance_jobs' => true,
        'km' => false,
        'max_weight' => false,
        'is_planned' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'spedition' => 'spedition',
        'last_location' => 'lastLocation',
        'act_location' => 'actLocation',
        'game' => 'game',
        'license_plate' => 'licensePlate',
        'comment' => 'comment',
        'category' => 'category',
        'skin' => 'skin',
        'trailer_type' => 'trailerType',
        'default_driver' => 'defaultDriver',
        'assigned_scheduler' => 'assignedScheduler',
        'trailer_available' => 'trailerAvailable',
        'next_main_inspection' => 'nextMainInspection',
        'next_safety_check' => 'nextSafetyCheck',
        'next_tire_change' => 'nextTireChange',
        'next_brake_pads_change' => 'nextBrakePadsChange',
        'next_brake_disc_change' => 'nextBrakeDiscChange',
        'has_oszilation_damper_defect' => 'hasOszilationDamperDefect',
        'has_brake_ventil_defect' => 'hasBrakeVentilDefect',
        'needed_maintenance_jobs' => 'neededMaintenanceJobs',
        'km' => 'km',
        'max_weight' => 'maxWeight',
        'is_planned' => 'isPlanned'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'spedition' => 'setSpedition',
        'last_location' => 'setLastLocation',
        'act_location' => 'setActLocation',
        'game' => 'setGame',
        'license_plate' => 'setLicensePlate',
        'comment' => 'setComment',
        'category' => 'setCategory',
        'skin' => 'setSkin',
        'trailer_type' => 'setTrailerType',
        'default_driver' => 'setDefaultDriver',
        'assigned_scheduler' => 'setAssignedScheduler',
        'trailer_available' => 'setTrailerAvailable',
        'next_main_inspection' => 'setNextMainInspection',
        'next_safety_check' => 'setNextSafetyCheck',
        'next_tire_change' => 'setNextTireChange',
        'next_brake_pads_change' => 'setNextBrakePadsChange',
        'next_brake_disc_change' => 'setNextBrakeDiscChange',
        'has_oszilation_damper_defect' => 'setHasOszilationDamperDefect',
        'has_brake_ventil_defect' => 'setHasBrakeVentilDefect',
        'needed_maintenance_jobs' => 'setNeededMaintenanceJobs',
        'km' => 'setKm',
        'max_weight' => 'setMaxWeight',
        'is_planned' => 'setIsPlanned'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'spedition' => 'getSpedition',
        'last_location' => 'getLastLocation',
        'act_location' => 'getActLocation',
        'game' => 'getGame',
        'license_plate' => 'getLicensePlate',
        'comment' => 'getComment',
        'category' => 'getCategory',
        'skin' => 'getSkin',
        'trailer_type' => 'getTrailerType',
        'default_driver' => 'getDefaultDriver',
        'assigned_scheduler' => 'getAssignedScheduler',
        'trailer_available' => 'getTrailerAvailable',
        'next_main_inspection' => 'getNextMainInspection',
        'next_safety_check' => 'getNextSafetyCheck',
        'next_tire_change' => 'getNextTireChange',
        'next_brake_pads_change' => 'getNextBrakePadsChange',
        'next_brake_disc_change' => 'getNextBrakeDiscChange',
        'has_oszilation_damper_defect' => 'getHasOszilationDamperDefect',
        'has_brake_ventil_defect' => 'getHasBrakeVentilDefect',
        'needed_maintenance_jobs' => 'getNeededMaintenanceJobs',
        'km' => 'getKm',
        'max_weight' => 'getMaxWeight',
        'is_planned' => 'getIsPlanned'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('spedition', $data ?? [], null);
        $this->setIfExists('last_location', $data ?? [], null);
        $this->setIfExists('act_location', $data ?? [], null);
        $this->setIfExists('game', $data ?? [], null);
        $this->setIfExists('license_plate', $data ?? [], null);
        $this->setIfExists('comment', $data ?? [], null);
        $this->setIfExists('category', $data ?? [], null);
        $this->setIfExists('skin', $data ?? [], null);
        $this->setIfExists('trailer_type', $data ?? [], null);
        $this->setIfExists('default_driver', $data ?? [], null);
        $this->setIfExists('assigned_scheduler', $data ?? [], null);
        $this->setIfExists('trailer_available', $data ?? [], null);
        $this->setIfExists('next_main_inspection', $data ?? [], null);
        $this->setIfExists('next_safety_check', $data ?? [], null);
        $this->setIfExists('next_tire_change', $data ?? [], null);
        $this->setIfExists('next_brake_pads_change', $data ?? [], null);
        $this->setIfExists('next_brake_disc_change', $data ?? [], null);
        $this->setIfExists('has_oszilation_damper_defect', $data ?? [], null);
        $this->setIfExists('has_brake_ventil_defect', $data ?? [], null);
        $this->setIfExists('needed_maintenance_jobs', $data ?? [], null);
        $this->setIfExists('km', $data ?? [], null);
        $this->setIfExists('max_weight', $data ?? [], null);
        $this->setIfExists('is_planned', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['spedition'] === null) {
            $invalidProperties[] = "'spedition' can't be null";
        }
        if ($this->container['last_location'] === null) {
            $invalidProperties[] = "'last_location' can't be null";
        }
        if ($this->container['act_location'] === null) {
            $invalidProperties[] = "'act_location' can't be null";
        }
        if ($this->container['game'] === null) {
            $invalidProperties[] = "'game' can't be null";
        }
        if ($this->container['license_plate'] === null) {
            $invalidProperties[] = "'license_plate' can't be null";
        }
        if ($this->container['comment'] === null) {
            $invalidProperties[] = "'comment' can't be null";
        }
        if ($this->container['category'] === null) {
            $invalidProperties[] = "'category' can't be null";
        }
        if ($this->container['skin'] === null) {
            $invalidProperties[] = "'skin' can't be null";
        }
        if ($this->container['trailer_type'] === null) {
            $invalidProperties[] = "'trailer_type' can't be null";
        }
        if ($this->container['default_driver'] === null) {
            $invalidProperties[] = "'default_driver' can't be null";
        }
        if ($this->container['assigned_scheduler'] === null) {
            $invalidProperties[] = "'assigned_scheduler' can't be null";
        }
        if ($this->container['trailer_available'] === null) {
            $invalidProperties[] = "'trailer_available' can't be null";
        }
        if ($this->container['next_main_inspection'] === null) {
            $invalidProperties[] = "'next_main_inspection' can't be null";
        }
        if ($this->container['next_safety_check'] === null) {
            $invalidProperties[] = "'next_safety_check' can't be null";
        }
        if ($this->container['next_tire_change'] === null) {
            $invalidProperties[] = "'next_tire_change' can't be null";
        }
        if ($this->container['next_brake_pads_change'] === null) {
            $invalidProperties[] = "'next_brake_pads_change' can't be null";
        }
        if ($this->container['next_brake_disc_change'] === null) {
            $invalidProperties[] = "'next_brake_disc_change' can't be null";
        }
        if ($this->container['has_oszilation_damper_defect'] === null) {
            $invalidProperties[] = "'has_oszilation_damper_defect' can't be null";
        }
        if ($this->container['has_brake_ventil_defect'] === null) {
            $invalidProperties[] = "'has_brake_ventil_defect' can't be null";
        }
        if ($this->container['needed_maintenance_jobs'] === null) {
            $invalidProperties[] = "'needed_maintenance_jobs' can't be null";
        }
        if ($this->container['km'] === null) {
            $invalidProperties[] = "'km' can't be null";
        }
        if ($this->container['max_weight'] === null) {
            $invalidProperties[] = "'max_weight' can't be null";
        }
        if ($this->container['is_planned'] === null) {
            $invalidProperties[] = "'is_planned' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets spedition
     *
     * @return \OpenAPI\Client\Model\FPHSpedVAPIObjectsSpeditionsSpedition
     */
    public function getSpedition()
    {
        return $this->container['spedition'];
    }

    /**
     * Sets spedition
     *
     * @param \OpenAPI\Client\Model\FPHSpedVAPIObjectsSpeditionsSpedition $spedition spedition
     *
     * @return self
     */
    public function setSpedition($spedition)
    {
        if (is_null($spedition)) {
            array_push($this->openAPINullablesSetToNull, 'spedition');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('spedition', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['spedition'] = $spedition;

        return $this;
    }

    /**
     * Gets last_location
     *
     * @return \OpenAPI\Client\Model\FPHSpedVAPIObjectsMapsCompanyCity
     */
    public function getLastLocation()
    {
        return $this->container['last_location'];
    }

    /**
     * Sets last_location
     *
     * @param \OpenAPI\Client\Model\FPHSpedVAPIObjectsMapsCompanyCity $last_location last_location
     *
     * @return self
     */
    public function setLastLocation($last_location)
    {
        if (is_null($last_location)) {
            array_push($this->openAPINullablesSetToNull, 'last_location');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('last_location', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['last_location'] = $last_location;

        return $this;
    }

    /**
     * Gets act_location
     *
     * @return \OpenAPI\Client\Model\FPHSpedVAPIObjectsMapsCompanyCity
     */
    public function getActLocation()
    {
        return $this->container['act_location'];
    }

    /**
     * Sets act_location
     *
     * @param \OpenAPI\Client\Model\FPHSpedVAPIObjectsMapsCompanyCity $act_location act_location
     *
     * @return self
     */
    public function setActLocation($act_location)
    {
        if (is_null($act_location)) {
            array_push($this->openAPINullablesSetToNull, 'act_location');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('act_location', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['act_location'] = $act_location;

        return $this;
    }

    /**
     * Gets game
     *
     * @return \OpenAPI\Client\Model\FPHSpedVAPIEnumsGameEnum
     */
    public function getGame()
    {
        return $this->container['game'];
    }

    /**
     * Sets game
     *
     * @param \OpenAPI\Client\Model\FPHSpedVAPIEnumsGameEnum $game 0 = ETS2  1 = ATS  -1 = NotSet
     *
     * @return self
     */
    public function setGame($game)
    {
        if (is_null($game)) {
            throw new \InvalidArgumentException('non-nullable game cannot be null');
        }
        $this->container['game'] = $game;

        return $this;
    }

    /**
     * Gets license_plate
     *
     * @return string
     */
    public function getLicensePlate()
    {
        return $this->container['license_plate'];
    }

    /**
     * Sets license_plate
     *
     * @param string $license_plate license_plate
     *
     * @return self
     */
    public function setLicensePlate($license_plate)
    {
        if (is_null($license_plate)) {
            array_push($this->openAPINullablesSetToNull, 'license_plate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('license_plate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['license_plate'] = $license_plate;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string $comment comment
     *
     * @return self
     */
    public function setComment($comment)
    {
        if (is_null($comment)) {
            array_push($this->openAPINullablesSetToNull, 'comment');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('comment', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets category
     *
     * @return string
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param string $category category
     *
     * @return self
     */
    public function setCategory($category)
    {
        if (is_null($category)) {
            array_push($this->openAPINullablesSetToNull, 'category');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('category', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets skin
     *
     * @return string
     */
    public function getSkin()
    {
        return $this->container['skin'];
    }

    /**
     * Sets skin
     *
     * @param string $skin skin
     *
     * @return self
     */
    public function setSkin($skin)
    {
        if (is_null($skin)) {
            array_push($this->openAPINullablesSetToNull, 'skin');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('skin', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['skin'] = $skin;

        return $this;
    }

    /**
     * Gets trailer_type
     *
     * @return \OpenAPI\Client\Model\FPHSpedVAPIEnumsKontorTrailerType
     */
    public function getTrailerType()
    {
        return $this->container['trailer_type'];
    }

    /**
     * Sets trailer_type
     *
     * @param \OpenAPI\Client\Model\FPHSpedVAPIEnumsKontorTrailerType $trailer_type 0 = StandardTrailer  1 = DoubleTrailer  2 = BDoubleTrailer  3 = TripleTrailer  4 = ShortTrailer  -1 = NotSet
     *
     * @return self
     */
    public function setTrailerType($trailer_type)
    {
        if (is_null($trailer_type)) {
            throw new \InvalidArgumentException('non-nullable trailer_type cannot be null');
        }
        $this->container['trailer_type'] = $trailer_type;

        return $this;
    }

    /**
     * Gets default_driver
     *
     * @return \OpenAPI\Client\Model\FPHSpedVAPIObjectsUsersUser
     */
    public function getDefaultDriver()
    {
        return $this->container['default_driver'];
    }

    /**
     * Sets default_driver
     *
     * @param \OpenAPI\Client\Model\FPHSpedVAPIObjectsUsersUser $default_driver default_driver
     *
     * @return self
     */
    public function setDefaultDriver($default_driver)
    {
        if (is_null($default_driver)) {
            array_push($this->openAPINullablesSetToNull, 'default_driver');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('default_driver', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['default_driver'] = $default_driver;

        return $this;
    }

    /**
     * Gets assigned_scheduler
     *
     * @return \OpenAPI\Client\Model\FPHSpedVAPIObjectsUsersUser
     */
    public function getAssignedScheduler()
    {
        return $this->container['assigned_scheduler'];
    }

    /**
     * Sets assigned_scheduler
     *
     * @param \OpenAPI\Client\Model\FPHSpedVAPIObjectsUsersUser $assigned_scheduler assigned_scheduler
     *
     * @return self
     */
    public function setAssignedScheduler($assigned_scheduler)
    {
        if (is_null($assigned_scheduler)) {
            array_push($this->openAPINullablesSetToNull, 'assigned_scheduler');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('assigned_scheduler', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['assigned_scheduler'] = $assigned_scheduler;

        return $this;
    }

    /**
     * Gets trailer_available
     *
     * @return \DateTime
     */
    public function getTrailerAvailable()
    {
        return $this->container['trailer_available'];
    }

    /**
     * Sets trailer_available
     *
     * @param \DateTime $trailer_available trailer_available
     *
     * @return self
     */
    public function setTrailerAvailable($trailer_available)
    {
        if (is_null($trailer_available)) {
            throw new \InvalidArgumentException('non-nullable trailer_available cannot be null');
        }
        $this->container['trailer_available'] = $trailer_available;

        return $this;
    }

    /**
     * Gets next_main_inspection
     *
     * @return \DateTime
     */
    public function getNextMainInspection()
    {
        return $this->container['next_main_inspection'];
    }

    /**
     * Sets next_main_inspection
     *
     * @param \DateTime $next_main_inspection next_main_inspection
     *
     * @return self
     */
    public function setNextMainInspection($next_main_inspection)
    {
        if (is_null($next_main_inspection)) {
            throw new \InvalidArgumentException('non-nullable next_main_inspection cannot be null');
        }
        $this->container['next_main_inspection'] = $next_main_inspection;

        return $this;
    }

    /**
     * Gets next_safety_check
     *
     * @return \DateTime
     */
    public function getNextSafetyCheck()
    {
        return $this->container['next_safety_check'];
    }

    /**
     * Sets next_safety_check
     *
     * @param \DateTime $next_safety_check next_safety_check
     *
     * @return self
     */
    public function setNextSafetyCheck($next_safety_check)
    {
        if (is_null($next_safety_check)) {
            throw new \InvalidArgumentException('non-nullable next_safety_check cannot be null');
        }
        $this->container['next_safety_check'] = $next_safety_check;

        return $this;
    }

    /**
     * Gets next_tire_change
     *
     * @return int
     */
    public function getNextTireChange()
    {
        return $this->container['next_tire_change'];
    }

    /**
     * Sets next_tire_change
     *
     * @param int $next_tire_change next_tire_change
     *
     * @return self
     */
    public function setNextTireChange($next_tire_change)
    {
        if (is_null($next_tire_change)) {
            throw new \InvalidArgumentException('non-nullable next_tire_change cannot be null');
        }
        $this->container['next_tire_change'] = $next_tire_change;

        return $this;
    }

    /**
     * Gets next_brake_pads_change
     *
     * @return int
     */
    public function getNextBrakePadsChange()
    {
        return $this->container['next_brake_pads_change'];
    }

    /**
     * Sets next_brake_pads_change
     *
     * @param int $next_brake_pads_change next_brake_pads_change
     *
     * @return self
     */
    public function setNextBrakePadsChange($next_brake_pads_change)
    {
        if (is_null($next_brake_pads_change)) {
            throw new \InvalidArgumentException('non-nullable next_brake_pads_change cannot be null');
        }
        $this->container['next_brake_pads_change'] = $next_brake_pads_change;

        return $this;
    }

    /**
     * Gets next_brake_disc_change
     *
     * @return int
     */
    public function getNextBrakeDiscChange()
    {
        return $this->container['next_brake_disc_change'];
    }

    /**
     * Sets next_brake_disc_change
     *
     * @param int $next_brake_disc_change next_brake_disc_change
     *
     * @return self
     */
    public function setNextBrakeDiscChange($next_brake_disc_change)
    {
        if (is_null($next_brake_disc_change)) {
            throw new \InvalidArgumentException('non-nullable next_brake_disc_change cannot be null');
        }
        $this->container['next_brake_disc_change'] = $next_brake_disc_change;

        return $this;
    }

    /**
     * Gets has_oszilation_damper_defect
     *
     * @return bool
     */
    public function getHasOszilationDamperDefect()
    {
        return $this->container['has_oszilation_damper_defect'];
    }

    /**
     * Sets has_oszilation_damper_defect
     *
     * @param bool $has_oszilation_damper_defect has_oszilation_damper_defect
     *
     * @return self
     */
    public function setHasOszilationDamperDefect($has_oszilation_damper_defect)
    {
        if (is_null($has_oszilation_damper_defect)) {
            throw new \InvalidArgumentException('non-nullable has_oszilation_damper_defect cannot be null');
        }
        $this->container['has_oszilation_damper_defect'] = $has_oszilation_damper_defect;

        return $this;
    }

    /**
     * Gets has_brake_ventil_defect
     *
     * @return bool
     */
    public function getHasBrakeVentilDefect()
    {
        return $this->container['has_brake_ventil_defect'];
    }

    /**
     * Sets has_brake_ventil_defect
     *
     * @param bool $has_brake_ventil_defect has_brake_ventil_defect
     *
     * @return self
     */
    public function setHasBrakeVentilDefect($has_brake_ventil_defect)
    {
        if (is_null($has_brake_ventil_defect)) {
            throw new \InvalidArgumentException('non-nullable has_brake_ventil_defect cannot be null');
        }
        $this->container['has_brake_ventil_defect'] = $has_brake_ventil_defect;

        return $this;
    }

    /**
     * Gets needed_maintenance_jobs
     *
     * @return \OpenAPI\Client\Model\FPHSpedVAPIObjectsKontorNeededTrailerMaintenance[]
     */
    public function getNeededMaintenanceJobs()
    {
        return $this->container['needed_maintenance_jobs'];
    }

    /**
     * Sets needed_maintenance_jobs
     *
     * @param \OpenAPI\Client\Model\FPHSpedVAPIObjectsKontorNeededTrailerMaintenance[] $needed_maintenance_jobs needed_maintenance_jobs
     *
     * @return self
     */
    public function setNeededMaintenanceJobs($needed_maintenance_jobs)
    {
        if (is_null($needed_maintenance_jobs)) {
            array_push($this->openAPINullablesSetToNull, 'needed_maintenance_jobs');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('needed_maintenance_jobs', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['needed_maintenance_jobs'] = $needed_maintenance_jobs;

        return $this;
    }

    /**
     * Gets km
     *
     * @return int
     */
    public function getKm()
    {
        return $this->container['km'];
    }

    /**
     * Sets km
     *
     * @param int $km km
     *
     * @return self
     */
    public function setKm($km)
    {
        if (is_null($km)) {
            throw new \InvalidArgumentException('non-nullable km cannot be null');
        }
        $this->container['km'] = $km;

        return $this;
    }

    /**
     * Gets max_weight
     *
     * @return int
     */
    public function getMaxWeight()
    {
        return $this->container['max_weight'];
    }

    /**
     * Sets max_weight
     *
     * @param int $max_weight max_weight
     *
     * @return self
     */
    public function setMaxWeight($max_weight)
    {
        if (is_null($max_weight)) {
            throw new \InvalidArgumentException('non-nullable max_weight cannot be null');
        }
        $this->container['max_weight'] = $max_weight;

        return $this;
    }

    /**
     * Gets is_planned
     *
     * @return bool
     */
    public function getIsPlanned()
    {
        return $this->container['is_planned'];
    }

    /**
     * Sets is_planned
     *
     * @param bool $is_planned is_planned
     *
     * @return self
     */
    public function setIsPlanned($is_planned)
    {
        if (is_null($is_planned)) {
            throw new \InvalidArgumentException('non-nullable is_planned cannot be null');
        }
        $this->container['is_planned'] = $is_planned;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



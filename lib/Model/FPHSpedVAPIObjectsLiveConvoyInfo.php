<?php
/**
 * FPHSpedVAPIObjectsLiveConvoyInfo
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SpedV API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * FPHSpedVAPIObjectsLiveConvoyInfo Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class FPHSpedVAPIObjectsLiveConvoyInfo implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'FPH.SpedV.API.Objects.Live.ConvoyInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'user' => '\OpenAPI\Client\Model\FPHSpedVAPIObjectsUsersUser',
        'sped_v_team_role_name' => 'string',
        'tmp_staff_role_name' => 'string',
        'show_as_offline' => 'bool',
        'state' => '\OpenAPI\Client\Model\FPHSpedVAPIEnumsConvoyInfoDriveState',
        'steam_id' => 'int',
        'steam_pic' => 'string',
        'twitch_url' => 'string',
        'discord_uid' => 'int',
        'bot_message' => 'string',
        'bot_task' => 'string',
        'bot_progress_max' => 'int',
        'bot_progress_cur' => 'int',
        'sc_s_game' => '\OpenAPI\Client\Model\FPHSpedVAPIEnumsGameEnum',
        'sc_s_total_distance' => 'int',
        'sc_s_current_distance' => 'int',
        'sc_s_odometer' => 'float',
        'sc_s_max_fuel' => 'int',
        'sc_s_act_fuel' => 'int',
        'sc_s_velocity' => 'float',
        'sc_s_speed_limit' => 'int',
        'sc_s_cruise_control' => 'int',
        'sc_s_mp_server' => 'string',
        'sc_s_est_arrival' => '\DateTime',
        'sc_s_damage_truck' => 'float',
        'sc_s_damage_trailer' => 'float',
        'sc_s_damage_freight' => 'float',
        'sc_s_truck_manufactor' => 'string',
        'sc_s_truck_model' => 'string',
        'sc_s_truck_plate' => 'string',
        'sc_s_x_coord' => 'float',
        'sc_s_z_coord' => 'float',
        'sc_s_near_by' => 'string',
        'sc_s_scc_follow_user' => 'string',
        'task_weight' => 'string',
        'task_freight' => 'string',
        'task_start' => 'string',
        'task_dest' => 'string',
        'task_start_company' => 'string',
        'task_dest_company' => 'string',
        'task_map' => 'string',
        'oms_i_line' => 'string',
        'oms_i_circ' => 'string',
        'oms_i_dest' => 'string',
        'oms_i_next' => 'string',
        'oms_i_delay' => 'string',
        'oms_i_map' => 'string',
        'st_w_anlage' => 'string',
        'st_w_cur_trains' => 'int',
        'st_w_total_trains' => 'int',
        'st_w_cur_delay' => 'int',
        'spotify_title' => 'string',
        'spotify_artist' => 'string',
        'spotify_album' => 'string',
        'spotify_cover_url' => 'string',
        'spotify_play_position' => 'int',
        'spotify_title_uri' => 'string',
        'sim_rail_server' => 'string',
        'sim_rail_latitude' => 'float',
        'sim_rail_longitude' => 'float',
        'sim_rail_train_number' => 'string',
        'sim_rail_train_velocity' => 'float',
        'sim_rail_train_next_stop' => 'string',
        'sim_rail_train_destination' => 'string',
        'sim_rail_dispatch_station' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'user' => null,
        'sped_v_team_role_name' => null,
        'tmp_staff_role_name' => null,
        'show_as_offline' => null,
        'state' => null,
        'steam_id' => 'int64',
        'steam_pic' => null,
        'twitch_url' => null,
        'discord_uid' => 'int64',
        'bot_message' => null,
        'bot_task' => null,
        'bot_progress_max' => 'int32',
        'bot_progress_cur' => 'int32',
        'sc_s_game' => null,
        'sc_s_total_distance' => 'int32',
        'sc_s_current_distance' => 'int32',
        'sc_s_odometer' => 'double',
        'sc_s_max_fuel' => 'int32',
        'sc_s_act_fuel' => 'int32',
        'sc_s_velocity' => 'double',
        'sc_s_speed_limit' => 'int32',
        'sc_s_cruise_control' => 'int32',
        'sc_s_mp_server' => null,
        'sc_s_est_arrival' => 'date-time',
        'sc_s_damage_truck' => 'double',
        'sc_s_damage_trailer' => 'double',
        'sc_s_damage_freight' => 'double',
        'sc_s_truck_manufactor' => null,
        'sc_s_truck_model' => null,
        'sc_s_truck_plate' => null,
        'sc_s_x_coord' => 'double',
        'sc_s_z_coord' => 'double',
        'sc_s_near_by' => null,
        'sc_s_scc_follow_user' => null,
        'task_weight' => null,
        'task_freight' => null,
        'task_start' => null,
        'task_dest' => null,
        'task_start_company' => null,
        'task_dest_company' => null,
        'task_map' => null,
        'oms_i_line' => null,
        'oms_i_circ' => null,
        'oms_i_dest' => null,
        'oms_i_next' => null,
        'oms_i_delay' => null,
        'oms_i_map' => null,
        'st_w_anlage' => null,
        'st_w_cur_trains' => 'int32',
        'st_w_total_trains' => 'int32',
        'st_w_cur_delay' => 'int32',
        'spotify_title' => null,
        'spotify_artist' => null,
        'spotify_album' => null,
        'spotify_cover_url' => null,
        'spotify_play_position' => 'int32',
        'spotify_title_uri' => null,
        'sim_rail_server' => null,
        'sim_rail_latitude' => 'double',
        'sim_rail_longitude' => 'double',
        'sim_rail_train_number' => null,
        'sim_rail_train_velocity' => 'double',
        'sim_rail_train_next_stop' => null,
        'sim_rail_train_destination' => null,
        'sim_rail_dispatch_station' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'user' => true,
        'sped_v_team_role_name' => true,
        'tmp_staff_role_name' => true,
        'show_as_offline' => false,
        'state' => false,
        'steam_id' => false,
        'steam_pic' => true,
        'twitch_url' => true,
        'discord_uid' => false,
        'bot_message' => true,
        'bot_task' => true,
        'bot_progress_max' => false,
        'bot_progress_cur' => false,
        'sc_s_game' => false,
        'sc_s_total_distance' => false,
        'sc_s_current_distance' => false,
        'sc_s_odometer' => false,
        'sc_s_max_fuel' => false,
        'sc_s_act_fuel' => false,
        'sc_s_velocity' => false,
        'sc_s_speed_limit' => false,
        'sc_s_cruise_control' => false,
        'sc_s_mp_server' => true,
        'sc_s_est_arrival' => false,
        'sc_s_damage_truck' => false,
        'sc_s_damage_trailer' => false,
        'sc_s_damage_freight' => false,
        'sc_s_truck_manufactor' => true,
        'sc_s_truck_model' => true,
        'sc_s_truck_plate' => true,
        'sc_s_x_coord' => false,
        'sc_s_z_coord' => false,
        'sc_s_near_by' => true,
        'sc_s_scc_follow_user' => true,
        'task_weight' => true,
        'task_freight' => true,
        'task_start' => true,
        'task_dest' => true,
        'task_start_company' => true,
        'task_dest_company' => true,
        'task_map' => true,
        'oms_i_line' => true,
        'oms_i_circ' => true,
        'oms_i_dest' => true,
        'oms_i_next' => true,
        'oms_i_delay' => true,
        'oms_i_map' => true,
        'st_w_anlage' => true,
        'st_w_cur_trains' => false,
        'st_w_total_trains' => false,
        'st_w_cur_delay' => false,
        'spotify_title' => true,
        'spotify_artist' => true,
        'spotify_album' => true,
        'spotify_cover_url' => true,
        'spotify_play_position' => false,
        'spotify_title_uri' => true,
        'sim_rail_server' => true,
        'sim_rail_latitude' => false,
        'sim_rail_longitude' => false,
        'sim_rail_train_number' => true,
        'sim_rail_train_velocity' => false,
        'sim_rail_train_next_stop' => true,
        'sim_rail_train_destination' => true,
        'sim_rail_dispatch_station' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'user' => 'user',
        'sped_v_team_role_name' => 'spedVTeamRoleName',
        'tmp_staff_role_name' => 'tmpStaffRoleName',
        'show_as_offline' => 'showAsOffline',
        'state' => 'state',
        'steam_id' => 'steam_ID',
        'steam_pic' => 'steam_Pic',
        'twitch_url' => 'twitch_URL',
        'discord_uid' => 'discord_UID',
        'bot_message' => 'bot_Message',
        'bot_task' => 'bot_Task',
        'bot_progress_max' => 'bot_ProgressMax',
        'bot_progress_cur' => 'bot_ProgressCur',
        'sc_s_game' => 'scS_Game',
        'sc_s_total_distance' => 'scS_TotalDistance',
        'sc_s_current_distance' => 'scS_CurrentDistance',
        'sc_s_odometer' => 'scS_Odometer',
        'sc_s_max_fuel' => 'scS_MaxFuel',
        'sc_s_act_fuel' => 'scS_ActFuel',
        'sc_s_velocity' => 'scS_Velocity',
        'sc_s_speed_limit' => 'scS_SpeedLimit',
        'sc_s_cruise_control' => 'scS_CruiseControl',
        'sc_s_mp_server' => 'scS_MPServer',
        'sc_s_est_arrival' => 'scS_EstArrival',
        'sc_s_damage_truck' => 'scS_DamageTruck',
        'sc_s_damage_trailer' => 'scS_DamageTrailer',
        'sc_s_damage_freight' => 'scS_DamageFreight',
        'sc_s_truck_manufactor' => 'scS_TruckManufactor',
        'sc_s_truck_model' => 'scS_TruckModel',
        'sc_s_truck_plate' => 'scS_TruckPlate',
        'sc_s_x_coord' => 'scS_XCoord',
        'sc_s_z_coord' => 'scS_ZCoord',
        'sc_s_near_by' => 'scS_NearBy',
        'sc_s_scc_follow_user' => 'scS_SCCFollowUser',
        'task_weight' => 'task_Weight',
        'task_freight' => 'task_Freight',
        'task_start' => 'task_Start',
        'task_dest' => 'task_Dest',
        'task_start_company' => 'task_StartCompany',
        'task_dest_company' => 'task_DestCompany',
        'task_map' => 'task_Map',
        'oms_i_line' => 'omsI_Line',
        'oms_i_circ' => 'omsI_Circ',
        'oms_i_dest' => 'omsI_Dest',
        'oms_i_next' => 'omsI_Next',
        'oms_i_delay' => 'omsI_Delay',
        'oms_i_map' => 'omsI_Map',
        'st_w_anlage' => 'stW_Anlage',
        'st_w_cur_trains' => 'stW_CurTrains',
        'st_w_total_trains' => 'stW_TotalTrains',
        'st_w_cur_delay' => 'stW_CurDelay',
        'spotify_title' => 'spotify_Title',
        'spotify_artist' => 'spotify_Artist',
        'spotify_album' => 'spotify_Album',
        'spotify_cover_url' => 'spotify_CoverURL',
        'spotify_play_position' => 'spotify_PlayPosition',
        'spotify_title_uri' => 'spotify_TitleURI',
        'sim_rail_server' => 'simRail_Server',
        'sim_rail_latitude' => 'simRail_Latitude',
        'sim_rail_longitude' => 'simRail_Longitude',
        'sim_rail_train_number' => 'simRail_Train_Number',
        'sim_rail_train_velocity' => 'simRail_Train_Velocity',
        'sim_rail_train_next_stop' => 'simRail_Train_NextStop',
        'sim_rail_train_destination' => 'simRail_Train_Destination',
        'sim_rail_dispatch_station' => 'simRail_Dispatch_Station'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'user' => 'setUser',
        'sped_v_team_role_name' => 'setSpedVTeamRoleName',
        'tmp_staff_role_name' => 'setTmpStaffRoleName',
        'show_as_offline' => 'setShowAsOffline',
        'state' => 'setState',
        'steam_id' => 'setSteamId',
        'steam_pic' => 'setSteamPic',
        'twitch_url' => 'setTwitchUrl',
        'discord_uid' => 'setDiscordUid',
        'bot_message' => 'setBotMessage',
        'bot_task' => 'setBotTask',
        'bot_progress_max' => 'setBotProgressMax',
        'bot_progress_cur' => 'setBotProgressCur',
        'sc_s_game' => 'setScSGame',
        'sc_s_total_distance' => 'setScSTotalDistance',
        'sc_s_current_distance' => 'setScSCurrentDistance',
        'sc_s_odometer' => 'setScSOdometer',
        'sc_s_max_fuel' => 'setScSMaxFuel',
        'sc_s_act_fuel' => 'setScSActFuel',
        'sc_s_velocity' => 'setScSVelocity',
        'sc_s_speed_limit' => 'setScSSpeedLimit',
        'sc_s_cruise_control' => 'setScSCruiseControl',
        'sc_s_mp_server' => 'setScSMpServer',
        'sc_s_est_arrival' => 'setScSEstArrival',
        'sc_s_damage_truck' => 'setScSDamageTruck',
        'sc_s_damage_trailer' => 'setScSDamageTrailer',
        'sc_s_damage_freight' => 'setScSDamageFreight',
        'sc_s_truck_manufactor' => 'setScSTruckManufactor',
        'sc_s_truck_model' => 'setScSTruckModel',
        'sc_s_truck_plate' => 'setScSTruckPlate',
        'sc_s_x_coord' => 'setScSXCoord',
        'sc_s_z_coord' => 'setScSZCoord',
        'sc_s_near_by' => 'setScSNearBy',
        'sc_s_scc_follow_user' => 'setScSSccFollowUser',
        'task_weight' => 'setTaskWeight',
        'task_freight' => 'setTaskFreight',
        'task_start' => 'setTaskStart',
        'task_dest' => 'setTaskDest',
        'task_start_company' => 'setTaskStartCompany',
        'task_dest_company' => 'setTaskDestCompany',
        'task_map' => 'setTaskMap',
        'oms_i_line' => 'setOmsILine',
        'oms_i_circ' => 'setOmsICirc',
        'oms_i_dest' => 'setOmsIDest',
        'oms_i_next' => 'setOmsINext',
        'oms_i_delay' => 'setOmsIDelay',
        'oms_i_map' => 'setOmsIMap',
        'st_w_anlage' => 'setStWAnlage',
        'st_w_cur_trains' => 'setStWCurTrains',
        'st_w_total_trains' => 'setStWTotalTrains',
        'st_w_cur_delay' => 'setStWCurDelay',
        'spotify_title' => 'setSpotifyTitle',
        'spotify_artist' => 'setSpotifyArtist',
        'spotify_album' => 'setSpotifyAlbum',
        'spotify_cover_url' => 'setSpotifyCoverUrl',
        'spotify_play_position' => 'setSpotifyPlayPosition',
        'spotify_title_uri' => 'setSpotifyTitleUri',
        'sim_rail_server' => 'setSimRailServer',
        'sim_rail_latitude' => 'setSimRailLatitude',
        'sim_rail_longitude' => 'setSimRailLongitude',
        'sim_rail_train_number' => 'setSimRailTrainNumber',
        'sim_rail_train_velocity' => 'setSimRailTrainVelocity',
        'sim_rail_train_next_stop' => 'setSimRailTrainNextStop',
        'sim_rail_train_destination' => 'setSimRailTrainDestination',
        'sim_rail_dispatch_station' => 'setSimRailDispatchStation'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'user' => 'getUser',
        'sped_v_team_role_name' => 'getSpedVTeamRoleName',
        'tmp_staff_role_name' => 'getTmpStaffRoleName',
        'show_as_offline' => 'getShowAsOffline',
        'state' => 'getState',
        'steam_id' => 'getSteamId',
        'steam_pic' => 'getSteamPic',
        'twitch_url' => 'getTwitchUrl',
        'discord_uid' => 'getDiscordUid',
        'bot_message' => 'getBotMessage',
        'bot_task' => 'getBotTask',
        'bot_progress_max' => 'getBotProgressMax',
        'bot_progress_cur' => 'getBotProgressCur',
        'sc_s_game' => 'getScSGame',
        'sc_s_total_distance' => 'getScSTotalDistance',
        'sc_s_current_distance' => 'getScSCurrentDistance',
        'sc_s_odometer' => 'getScSOdometer',
        'sc_s_max_fuel' => 'getScSMaxFuel',
        'sc_s_act_fuel' => 'getScSActFuel',
        'sc_s_velocity' => 'getScSVelocity',
        'sc_s_speed_limit' => 'getScSSpeedLimit',
        'sc_s_cruise_control' => 'getScSCruiseControl',
        'sc_s_mp_server' => 'getScSMpServer',
        'sc_s_est_arrival' => 'getScSEstArrival',
        'sc_s_damage_truck' => 'getScSDamageTruck',
        'sc_s_damage_trailer' => 'getScSDamageTrailer',
        'sc_s_damage_freight' => 'getScSDamageFreight',
        'sc_s_truck_manufactor' => 'getScSTruckManufactor',
        'sc_s_truck_model' => 'getScSTruckModel',
        'sc_s_truck_plate' => 'getScSTruckPlate',
        'sc_s_x_coord' => 'getScSXCoord',
        'sc_s_z_coord' => 'getScSZCoord',
        'sc_s_near_by' => 'getScSNearBy',
        'sc_s_scc_follow_user' => 'getScSSccFollowUser',
        'task_weight' => 'getTaskWeight',
        'task_freight' => 'getTaskFreight',
        'task_start' => 'getTaskStart',
        'task_dest' => 'getTaskDest',
        'task_start_company' => 'getTaskStartCompany',
        'task_dest_company' => 'getTaskDestCompany',
        'task_map' => 'getTaskMap',
        'oms_i_line' => 'getOmsILine',
        'oms_i_circ' => 'getOmsICirc',
        'oms_i_dest' => 'getOmsIDest',
        'oms_i_next' => 'getOmsINext',
        'oms_i_delay' => 'getOmsIDelay',
        'oms_i_map' => 'getOmsIMap',
        'st_w_anlage' => 'getStWAnlage',
        'st_w_cur_trains' => 'getStWCurTrains',
        'st_w_total_trains' => 'getStWTotalTrains',
        'st_w_cur_delay' => 'getStWCurDelay',
        'spotify_title' => 'getSpotifyTitle',
        'spotify_artist' => 'getSpotifyArtist',
        'spotify_album' => 'getSpotifyAlbum',
        'spotify_cover_url' => 'getSpotifyCoverUrl',
        'spotify_play_position' => 'getSpotifyPlayPosition',
        'spotify_title_uri' => 'getSpotifyTitleUri',
        'sim_rail_server' => 'getSimRailServer',
        'sim_rail_latitude' => 'getSimRailLatitude',
        'sim_rail_longitude' => 'getSimRailLongitude',
        'sim_rail_train_number' => 'getSimRailTrainNumber',
        'sim_rail_train_velocity' => 'getSimRailTrainVelocity',
        'sim_rail_train_next_stop' => 'getSimRailTrainNextStop',
        'sim_rail_train_destination' => 'getSimRailTrainDestination',
        'sim_rail_dispatch_station' => 'getSimRailDispatchStation'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('user', $data ?? [], null);
        $this->setIfExists('sped_v_team_role_name', $data ?? [], null);
        $this->setIfExists('tmp_staff_role_name', $data ?? [], null);
        $this->setIfExists('show_as_offline', $data ?? [], null);
        $this->setIfExists('state', $data ?? [], null);
        $this->setIfExists('steam_id', $data ?? [], null);
        $this->setIfExists('steam_pic', $data ?? [], null);
        $this->setIfExists('twitch_url', $data ?? [], null);
        $this->setIfExists('discord_uid', $data ?? [], null);
        $this->setIfExists('bot_message', $data ?? [], null);
        $this->setIfExists('bot_task', $data ?? [], null);
        $this->setIfExists('bot_progress_max', $data ?? [], null);
        $this->setIfExists('bot_progress_cur', $data ?? [], null);
        $this->setIfExists('sc_s_game', $data ?? [], null);
        $this->setIfExists('sc_s_total_distance', $data ?? [], null);
        $this->setIfExists('sc_s_current_distance', $data ?? [], null);
        $this->setIfExists('sc_s_odometer', $data ?? [], null);
        $this->setIfExists('sc_s_max_fuel', $data ?? [], null);
        $this->setIfExists('sc_s_act_fuel', $data ?? [], null);
        $this->setIfExists('sc_s_velocity', $data ?? [], null);
        $this->setIfExists('sc_s_speed_limit', $data ?? [], null);
        $this->setIfExists('sc_s_cruise_control', $data ?? [], null);
        $this->setIfExists('sc_s_mp_server', $data ?? [], null);
        $this->setIfExists('sc_s_est_arrival', $data ?? [], null);
        $this->setIfExists('sc_s_damage_truck', $data ?? [], null);
        $this->setIfExists('sc_s_damage_trailer', $data ?? [], null);
        $this->setIfExists('sc_s_damage_freight', $data ?? [], null);
        $this->setIfExists('sc_s_truck_manufactor', $data ?? [], null);
        $this->setIfExists('sc_s_truck_model', $data ?? [], null);
        $this->setIfExists('sc_s_truck_plate', $data ?? [], null);
        $this->setIfExists('sc_s_x_coord', $data ?? [], null);
        $this->setIfExists('sc_s_z_coord', $data ?? [], null);
        $this->setIfExists('sc_s_near_by', $data ?? [], null);
        $this->setIfExists('sc_s_scc_follow_user', $data ?? [], null);
        $this->setIfExists('task_weight', $data ?? [], null);
        $this->setIfExists('task_freight', $data ?? [], null);
        $this->setIfExists('task_start', $data ?? [], null);
        $this->setIfExists('task_dest', $data ?? [], null);
        $this->setIfExists('task_start_company', $data ?? [], null);
        $this->setIfExists('task_dest_company', $data ?? [], null);
        $this->setIfExists('task_map', $data ?? [], null);
        $this->setIfExists('oms_i_line', $data ?? [], null);
        $this->setIfExists('oms_i_circ', $data ?? [], null);
        $this->setIfExists('oms_i_dest', $data ?? [], null);
        $this->setIfExists('oms_i_next', $data ?? [], null);
        $this->setIfExists('oms_i_delay', $data ?? [], null);
        $this->setIfExists('oms_i_map', $data ?? [], null);
        $this->setIfExists('st_w_anlage', $data ?? [], null);
        $this->setIfExists('st_w_cur_trains', $data ?? [], null);
        $this->setIfExists('st_w_total_trains', $data ?? [], null);
        $this->setIfExists('st_w_cur_delay', $data ?? [], null);
        $this->setIfExists('spotify_title', $data ?? [], null);
        $this->setIfExists('spotify_artist', $data ?? [], null);
        $this->setIfExists('spotify_album', $data ?? [], null);
        $this->setIfExists('spotify_cover_url', $data ?? [], null);
        $this->setIfExists('spotify_play_position', $data ?? [], null);
        $this->setIfExists('spotify_title_uri', $data ?? [], null);
        $this->setIfExists('sim_rail_server', $data ?? [], null);
        $this->setIfExists('sim_rail_latitude', $data ?? [], null);
        $this->setIfExists('sim_rail_longitude', $data ?? [], null);
        $this->setIfExists('sim_rail_train_number', $data ?? [], null);
        $this->setIfExists('sim_rail_train_velocity', $data ?? [], null);
        $this->setIfExists('sim_rail_train_next_stop', $data ?? [], null);
        $this->setIfExists('sim_rail_train_destination', $data ?? [], null);
        $this->setIfExists('sim_rail_dispatch_station', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['user'] === null) {
            $invalidProperties[] = "'user' can't be null";
        }
        if ($this->container['sped_v_team_role_name'] === null) {
            $invalidProperties[] = "'sped_v_team_role_name' can't be null";
        }
        if ($this->container['tmp_staff_role_name'] === null) {
            $invalidProperties[] = "'tmp_staff_role_name' can't be null";
        }
        if ($this->container['show_as_offline'] === null) {
            $invalidProperties[] = "'show_as_offline' can't be null";
        }
        if ($this->container['state'] === null) {
            $invalidProperties[] = "'state' can't be null";
        }
        if ($this->container['steam_id'] === null) {
            $invalidProperties[] = "'steam_id' can't be null";
        }
        if ($this->container['steam_pic'] === null) {
            $invalidProperties[] = "'steam_pic' can't be null";
        }
        if ($this->container['twitch_url'] === null) {
            $invalidProperties[] = "'twitch_url' can't be null";
        }
        if ($this->container['discord_uid'] === null) {
            $invalidProperties[] = "'discord_uid' can't be null";
        }
        if ($this->container['bot_message'] === null) {
            $invalidProperties[] = "'bot_message' can't be null";
        }
        if ($this->container['bot_task'] === null) {
            $invalidProperties[] = "'bot_task' can't be null";
        }
        if ($this->container['bot_progress_max'] === null) {
            $invalidProperties[] = "'bot_progress_max' can't be null";
        }
        if ($this->container['bot_progress_cur'] === null) {
            $invalidProperties[] = "'bot_progress_cur' can't be null";
        }
        if ($this->container['sc_s_game'] === null) {
            $invalidProperties[] = "'sc_s_game' can't be null";
        }
        if ($this->container['sc_s_total_distance'] === null) {
            $invalidProperties[] = "'sc_s_total_distance' can't be null";
        }
        if ($this->container['sc_s_current_distance'] === null) {
            $invalidProperties[] = "'sc_s_current_distance' can't be null";
        }
        if ($this->container['sc_s_odometer'] === null) {
            $invalidProperties[] = "'sc_s_odometer' can't be null";
        }
        if ($this->container['sc_s_max_fuel'] === null) {
            $invalidProperties[] = "'sc_s_max_fuel' can't be null";
        }
        if ($this->container['sc_s_act_fuel'] === null) {
            $invalidProperties[] = "'sc_s_act_fuel' can't be null";
        }
        if ($this->container['sc_s_velocity'] === null) {
            $invalidProperties[] = "'sc_s_velocity' can't be null";
        }
        if ($this->container['sc_s_speed_limit'] === null) {
            $invalidProperties[] = "'sc_s_speed_limit' can't be null";
        }
        if ($this->container['sc_s_cruise_control'] === null) {
            $invalidProperties[] = "'sc_s_cruise_control' can't be null";
        }
        if ($this->container['sc_s_mp_server'] === null) {
            $invalidProperties[] = "'sc_s_mp_server' can't be null";
        }
        if ($this->container['sc_s_est_arrival'] === null) {
            $invalidProperties[] = "'sc_s_est_arrival' can't be null";
        }
        if ($this->container['sc_s_damage_truck'] === null) {
            $invalidProperties[] = "'sc_s_damage_truck' can't be null";
        }
        if ($this->container['sc_s_damage_trailer'] === null) {
            $invalidProperties[] = "'sc_s_damage_trailer' can't be null";
        }
        if ($this->container['sc_s_damage_freight'] === null) {
            $invalidProperties[] = "'sc_s_damage_freight' can't be null";
        }
        if ($this->container['sc_s_truck_manufactor'] === null) {
            $invalidProperties[] = "'sc_s_truck_manufactor' can't be null";
        }
        if ($this->container['sc_s_truck_model'] === null) {
            $invalidProperties[] = "'sc_s_truck_model' can't be null";
        }
        if ($this->container['sc_s_truck_plate'] === null) {
            $invalidProperties[] = "'sc_s_truck_plate' can't be null";
        }
        if ($this->container['sc_s_x_coord'] === null) {
            $invalidProperties[] = "'sc_s_x_coord' can't be null";
        }
        if ($this->container['sc_s_z_coord'] === null) {
            $invalidProperties[] = "'sc_s_z_coord' can't be null";
        }
        if ($this->container['sc_s_near_by'] === null) {
            $invalidProperties[] = "'sc_s_near_by' can't be null";
        }
        if ($this->container['sc_s_scc_follow_user'] === null) {
            $invalidProperties[] = "'sc_s_scc_follow_user' can't be null";
        }
        if ($this->container['task_weight'] === null) {
            $invalidProperties[] = "'task_weight' can't be null";
        }
        if ($this->container['task_freight'] === null) {
            $invalidProperties[] = "'task_freight' can't be null";
        }
        if ($this->container['task_start'] === null) {
            $invalidProperties[] = "'task_start' can't be null";
        }
        if ($this->container['task_dest'] === null) {
            $invalidProperties[] = "'task_dest' can't be null";
        }
        if ($this->container['task_start_company'] === null) {
            $invalidProperties[] = "'task_start_company' can't be null";
        }
        if ($this->container['task_dest_company'] === null) {
            $invalidProperties[] = "'task_dest_company' can't be null";
        }
        if ($this->container['task_map'] === null) {
            $invalidProperties[] = "'task_map' can't be null";
        }
        if ($this->container['oms_i_line'] === null) {
            $invalidProperties[] = "'oms_i_line' can't be null";
        }
        if ($this->container['oms_i_circ'] === null) {
            $invalidProperties[] = "'oms_i_circ' can't be null";
        }
        if ($this->container['oms_i_dest'] === null) {
            $invalidProperties[] = "'oms_i_dest' can't be null";
        }
        if ($this->container['oms_i_next'] === null) {
            $invalidProperties[] = "'oms_i_next' can't be null";
        }
        if ($this->container['oms_i_delay'] === null) {
            $invalidProperties[] = "'oms_i_delay' can't be null";
        }
        if ($this->container['oms_i_map'] === null) {
            $invalidProperties[] = "'oms_i_map' can't be null";
        }
        if ($this->container['st_w_anlage'] === null) {
            $invalidProperties[] = "'st_w_anlage' can't be null";
        }
        if ($this->container['st_w_cur_trains'] === null) {
            $invalidProperties[] = "'st_w_cur_trains' can't be null";
        }
        if ($this->container['st_w_total_trains'] === null) {
            $invalidProperties[] = "'st_w_total_trains' can't be null";
        }
        if ($this->container['st_w_cur_delay'] === null) {
            $invalidProperties[] = "'st_w_cur_delay' can't be null";
        }
        if ($this->container['spotify_title'] === null) {
            $invalidProperties[] = "'spotify_title' can't be null";
        }
        if ($this->container['spotify_artist'] === null) {
            $invalidProperties[] = "'spotify_artist' can't be null";
        }
        if ($this->container['spotify_album'] === null) {
            $invalidProperties[] = "'spotify_album' can't be null";
        }
        if ($this->container['spotify_cover_url'] === null) {
            $invalidProperties[] = "'spotify_cover_url' can't be null";
        }
        if ($this->container['spotify_play_position'] === null) {
            $invalidProperties[] = "'spotify_play_position' can't be null";
        }
        if ($this->container['spotify_title_uri'] === null) {
            $invalidProperties[] = "'spotify_title_uri' can't be null";
        }
        if ($this->container['sim_rail_server'] === null) {
            $invalidProperties[] = "'sim_rail_server' can't be null";
        }
        if ($this->container['sim_rail_latitude'] === null) {
            $invalidProperties[] = "'sim_rail_latitude' can't be null";
        }
        if ($this->container['sim_rail_longitude'] === null) {
            $invalidProperties[] = "'sim_rail_longitude' can't be null";
        }
        if ($this->container['sim_rail_train_number'] === null) {
            $invalidProperties[] = "'sim_rail_train_number' can't be null";
        }
        if ($this->container['sim_rail_train_velocity'] === null) {
            $invalidProperties[] = "'sim_rail_train_velocity' can't be null";
        }
        if ($this->container['sim_rail_train_next_stop'] === null) {
            $invalidProperties[] = "'sim_rail_train_next_stop' can't be null";
        }
        if ($this->container['sim_rail_train_destination'] === null) {
            $invalidProperties[] = "'sim_rail_train_destination' can't be null";
        }
        if ($this->container['sim_rail_dispatch_station'] === null) {
            $invalidProperties[] = "'sim_rail_dispatch_station' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets user
     *
     * @return \OpenAPI\Client\Model\FPHSpedVAPIObjectsUsersUser
     */
    public function getUser()
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     *
     * @param \OpenAPI\Client\Model\FPHSpedVAPIObjectsUsersUser $user user
     *
     * @return self
     */
    public function setUser($user)
    {
        if (is_null($user)) {
            array_push($this->openAPINullablesSetToNull, 'user');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('user', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['user'] = $user;

        return $this;
    }

    /**
     * Gets sped_v_team_role_name
     *
     * @return string
     */
    public function getSpedVTeamRoleName()
    {
        return $this->container['sped_v_team_role_name'];
    }

    /**
     * Sets sped_v_team_role_name
     *
     * @param string $sped_v_team_role_name sped_v_team_role_name
     *
     * @return self
     */
    public function setSpedVTeamRoleName($sped_v_team_role_name)
    {
        if (is_null($sped_v_team_role_name)) {
            array_push($this->openAPINullablesSetToNull, 'sped_v_team_role_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sped_v_team_role_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sped_v_team_role_name'] = $sped_v_team_role_name;

        return $this;
    }

    /**
     * Gets tmp_staff_role_name
     *
     * @return string
     */
    public function getTmpStaffRoleName()
    {
        return $this->container['tmp_staff_role_name'];
    }

    /**
     * Sets tmp_staff_role_name
     *
     * @param string $tmp_staff_role_name tmp_staff_role_name
     *
     * @return self
     */
    public function setTmpStaffRoleName($tmp_staff_role_name)
    {
        if (is_null($tmp_staff_role_name)) {
            array_push($this->openAPINullablesSetToNull, 'tmp_staff_role_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tmp_staff_role_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tmp_staff_role_name'] = $tmp_staff_role_name;

        return $this;
    }

    /**
     * Gets show_as_offline
     *
     * @return bool
     */
    public function getShowAsOffline()
    {
        return $this->container['show_as_offline'];
    }

    /**
     * Sets show_as_offline
     *
     * @param bool $show_as_offline show_as_offline
     *
     * @return self
     */
    public function setShowAsOffline($show_as_offline)
    {
        if (is_null($show_as_offline)) {
            throw new \InvalidArgumentException('non-nullable show_as_offline cannot be null');
        }
        $this->container['show_as_offline'] = $show_as_offline;

        return $this;
    }

    /**
     * Gets state
     *
     * @return \OpenAPI\Client\Model\FPHSpedVAPIEnumsConvoyInfoDriveState
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param \OpenAPI\Client\Model\FPHSpedVAPIEnumsConvoyInfoDriveState $state 0 = NoGame  1 = Paused  2 = InDrive  3 = OMSI  4 = StellwerkSim  5 = Bot  6 = SimRail_Train  7 = SimRail_Dispatch
     *
     * @return self
     */
    public function setState($state)
    {
        if (is_null($state)) {
            throw new \InvalidArgumentException('non-nullable state cannot be null');
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets steam_id
     *
     * @return int
     */
    public function getSteamId()
    {
        return $this->container['steam_id'];
    }

    /**
     * Sets steam_id
     *
     * @param int $steam_id steam_id
     *
     * @return self
     */
    public function setSteamId($steam_id)
    {
        if (is_null($steam_id)) {
            throw new \InvalidArgumentException('non-nullable steam_id cannot be null');
        }
        $this->container['steam_id'] = $steam_id;

        return $this;
    }

    /**
     * Gets steam_pic
     *
     * @return string
     */
    public function getSteamPic()
    {
        return $this->container['steam_pic'];
    }

    /**
     * Sets steam_pic
     *
     * @param string $steam_pic steam_pic
     *
     * @return self
     */
    public function setSteamPic($steam_pic)
    {
        if (is_null($steam_pic)) {
            array_push($this->openAPINullablesSetToNull, 'steam_pic');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('steam_pic', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['steam_pic'] = $steam_pic;

        return $this;
    }

    /**
     * Gets twitch_url
     *
     * @return string
     */
    public function getTwitchUrl()
    {
        return $this->container['twitch_url'];
    }

    /**
     * Sets twitch_url
     *
     * @param string $twitch_url twitch_url
     *
     * @return self
     */
    public function setTwitchUrl($twitch_url)
    {
        if (is_null($twitch_url)) {
            array_push($this->openAPINullablesSetToNull, 'twitch_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('twitch_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['twitch_url'] = $twitch_url;

        return $this;
    }

    /**
     * Gets discord_uid
     *
     * @return int
     */
    public function getDiscordUid()
    {
        return $this->container['discord_uid'];
    }

    /**
     * Sets discord_uid
     *
     * @param int $discord_uid discord_uid
     *
     * @return self
     */
    public function setDiscordUid($discord_uid)
    {
        if (is_null($discord_uid)) {
            throw new \InvalidArgumentException('non-nullable discord_uid cannot be null');
        }
        $this->container['discord_uid'] = $discord_uid;

        return $this;
    }

    /**
     * Gets bot_message
     *
     * @return string
     */
    public function getBotMessage()
    {
        return $this->container['bot_message'];
    }

    /**
     * Sets bot_message
     *
     * @param string $bot_message bot_message
     *
     * @return self
     */
    public function setBotMessage($bot_message)
    {
        if (is_null($bot_message)) {
            array_push($this->openAPINullablesSetToNull, 'bot_message');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bot_message', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['bot_message'] = $bot_message;

        return $this;
    }

    /**
     * Gets bot_task
     *
     * @return string
     */
    public function getBotTask()
    {
        return $this->container['bot_task'];
    }

    /**
     * Sets bot_task
     *
     * @param string $bot_task bot_task
     *
     * @return self
     */
    public function setBotTask($bot_task)
    {
        if (is_null($bot_task)) {
            array_push($this->openAPINullablesSetToNull, 'bot_task');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bot_task', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['bot_task'] = $bot_task;

        return $this;
    }

    /**
     * Gets bot_progress_max
     *
     * @return int
     */
    public function getBotProgressMax()
    {
        return $this->container['bot_progress_max'];
    }

    /**
     * Sets bot_progress_max
     *
     * @param int $bot_progress_max bot_progress_max
     *
     * @return self
     */
    public function setBotProgressMax($bot_progress_max)
    {
        if (is_null($bot_progress_max)) {
            throw new \InvalidArgumentException('non-nullable bot_progress_max cannot be null');
        }
        $this->container['bot_progress_max'] = $bot_progress_max;

        return $this;
    }

    /**
     * Gets bot_progress_cur
     *
     * @return int
     */
    public function getBotProgressCur()
    {
        return $this->container['bot_progress_cur'];
    }

    /**
     * Sets bot_progress_cur
     *
     * @param int $bot_progress_cur bot_progress_cur
     *
     * @return self
     */
    public function setBotProgressCur($bot_progress_cur)
    {
        if (is_null($bot_progress_cur)) {
            throw new \InvalidArgumentException('non-nullable bot_progress_cur cannot be null');
        }
        $this->container['bot_progress_cur'] = $bot_progress_cur;

        return $this;
    }

    /**
     * Gets sc_s_game
     *
     * @return \OpenAPI\Client\Model\FPHSpedVAPIEnumsGameEnum
     */
    public function getScSGame()
    {
        return $this->container['sc_s_game'];
    }

    /**
     * Sets sc_s_game
     *
     * @param \OpenAPI\Client\Model\FPHSpedVAPIEnumsGameEnum $sc_s_game 0 = ETS2  1 = ATS  -1 = NotSet
     *
     * @return self
     */
    public function setScSGame($sc_s_game)
    {
        if (is_null($sc_s_game)) {
            throw new \InvalidArgumentException('non-nullable sc_s_game cannot be null');
        }
        $this->container['sc_s_game'] = $sc_s_game;

        return $this;
    }

    /**
     * Gets sc_s_total_distance
     *
     * @return int
     */
    public function getScSTotalDistance()
    {
        return $this->container['sc_s_total_distance'];
    }

    /**
     * Sets sc_s_total_distance
     *
     * @param int $sc_s_total_distance sc_s_total_distance
     *
     * @return self
     */
    public function setScSTotalDistance($sc_s_total_distance)
    {
        if (is_null($sc_s_total_distance)) {
            throw new \InvalidArgumentException('non-nullable sc_s_total_distance cannot be null');
        }
        $this->container['sc_s_total_distance'] = $sc_s_total_distance;

        return $this;
    }

    /**
     * Gets sc_s_current_distance
     *
     * @return int
     */
    public function getScSCurrentDistance()
    {
        return $this->container['sc_s_current_distance'];
    }

    /**
     * Sets sc_s_current_distance
     *
     * @param int $sc_s_current_distance sc_s_current_distance
     *
     * @return self
     */
    public function setScSCurrentDistance($sc_s_current_distance)
    {
        if (is_null($sc_s_current_distance)) {
            throw new \InvalidArgumentException('non-nullable sc_s_current_distance cannot be null');
        }
        $this->container['sc_s_current_distance'] = $sc_s_current_distance;

        return $this;
    }

    /**
     * Gets sc_s_odometer
     *
     * @return float
     */
    public function getScSOdometer()
    {
        return $this->container['sc_s_odometer'];
    }

    /**
     * Sets sc_s_odometer
     *
     * @param float $sc_s_odometer sc_s_odometer
     *
     * @return self
     */
    public function setScSOdometer($sc_s_odometer)
    {
        if (is_null($sc_s_odometer)) {
            throw new \InvalidArgumentException('non-nullable sc_s_odometer cannot be null');
        }
        $this->container['sc_s_odometer'] = $sc_s_odometer;

        return $this;
    }

    /**
     * Gets sc_s_max_fuel
     *
     * @return int
     */
    public function getScSMaxFuel()
    {
        return $this->container['sc_s_max_fuel'];
    }

    /**
     * Sets sc_s_max_fuel
     *
     * @param int $sc_s_max_fuel sc_s_max_fuel
     *
     * @return self
     */
    public function setScSMaxFuel($sc_s_max_fuel)
    {
        if (is_null($sc_s_max_fuel)) {
            throw new \InvalidArgumentException('non-nullable sc_s_max_fuel cannot be null');
        }
        $this->container['sc_s_max_fuel'] = $sc_s_max_fuel;

        return $this;
    }

    /**
     * Gets sc_s_act_fuel
     *
     * @return int
     */
    public function getScSActFuel()
    {
        return $this->container['sc_s_act_fuel'];
    }

    /**
     * Sets sc_s_act_fuel
     *
     * @param int $sc_s_act_fuel sc_s_act_fuel
     *
     * @return self
     */
    public function setScSActFuel($sc_s_act_fuel)
    {
        if (is_null($sc_s_act_fuel)) {
            throw new \InvalidArgumentException('non-nullable sc_s_act_fuel cannot be null');
        }
        $this->container['sc_s_act_fuel'] = $sc_s_act_fuel;

        return $this;
    }

    /**
     * Gets sc_s_velocity
     *
     * @return float
     */
    public function getScSVelocity()
    {
        return $this->container['sc_s_velocity'];
    }

    /**
     * Sets sc_s_velocity
     *
     * @param float $sc_s_velocity sc_s_velocity
     *
     * @return self
     */
    public function setScSVelocity($sc_s_velocity)
    {
        if (is_null($sc_s_velocity)) {
            throw new \InvalidArgumentException('non-nullable sc_s_velocity cannot be null');
        }
        $this->container['sc_s_velocity'] = $sc_s_velocity;

        return $this;
    }

    /**
     * Gets sc_s_speed_limit
     *
     * @return int
     */
    public function getScSSpeedLimit()
    {
        return $this->container['sc_s_speed_limit'];
    }

    /**
     * Sets sc_s_speed_limit
     *
     * @param int $sc_s_speed_limit sc_s_speed_limit
     *
     * @return self
     */
    public function setScSSpeedLimit($sc_s_speed_limit)
    {
        if (is_null($sc_s_speed_limit)) {
            throw new \InvalidArgumentException('non-nullable sc_s_speed_limit cannot be null');
        }
        $this->container['sc_s_speed_limit'] = $sc_s_speed_limit;

        return $this;
    }

    /**
     * Gets sc_s_cruise_control
     *
     * @return int
     */
    public function getScSCruiseControl()
    {
        return $this->container['sc_s_cruise_control'];
    }

    /**
     * Sets sc_s_cruise_control
     *
     * @param int $sc_s_cruise_control sc_s_cruise_control
     *
     * @return self
     */
    public function setScSCruiseControl($sc_s_cruise_control)
    {
        if (is_null($sc_s_cruise_control)) {
            throw new \InvalidArgumentException('non-nullable sc_s_cruise_control cannot be null');
        }
        $this->container['sc_s_cruise_control'] = $sc_s_cruise_control;

        return $this;
    }

    /**
     * Gets sc_s_mp_server
     *
     * @return string
     */
    public function getScSMpServer()
    {
        return $this->container['sc_s_mp_server'];
    }

    /**
     * Sets sc_s_mp_server
     *
     * @param string $sc_s_mp_server sc_s_mp_server
     *
     * @return self
     */
    public function setScSMpServer($sc_s_mp_server)
    {
        if (is_null($sc_s_mp_server)) {
            array_push($this->openAPINullablesSetToNull, 'sc_s_mp_server');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sc_s_mp_server', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sc_s_mp_server'] = $sc_s_mp_server;

        return $this;
    }

    /**
     * Gets sc_s_est_arrival
     *
     * @return \DateTime
     */
    public function getScSEstArrival()
    {
        return $this->container['sc_s_est_arrival'];
    }

    /**
     * Sets sc_s_est_arrival
     *
     * @param \DateTime $sc_s_est_arrival sc_s_est_arrival
     *
     * @return self
     */
    public function setScSEstArrival($sc_s_est_arrival)
    {
        if (is_null($sc_s_est_arrival)) {
            throw new \InvalidArgumentException('non-nullable sc_s_est_arrival cannot be null');
        }
        $this->container['sc_s_est_arrival'] = $sc_s_est_arrival;

        return $this;
    }

    /**
     * Gets sc_s_damage_truck
     *
     * @return float
     */
    public function getScSDamageTruck()
    {
        return $this->container['sc_s_damage_truck'];
    }

    /**
     * Sets sc_s_damage_truck
     *
     * @param float $sc_s_damage_truck sc_s_damage_truck
     *
     * @return self
     */
    public function setScSDamageTruck($sc_s_damage_truck)
    {
        if (is_null($sc_s_damage_truck)) {
            throw new \InvalidArgumentException('non-nullable sc_s_damage_truck cannot be null');
        }
        $this->container['sc_s_damage_truck'] = $sc_s_damage_truck;

        return $this;
    }

    /**
     * Gets sc_s_damage_trailer
     *
     * @return float
     */
    public function getScSDamageTrailer()
    {
        return $this->container['sc_s_damage_trailer'];
    }

    /**
     * Sets sc_s_damage_trailer
     *
     * @param float $sc_s_damage_trailer sc_s_damage_trailer
     *
     * @return self
     */
    public function setScSDamageTrailer($sc_s_damage_trailer)
    {
        if (is_null($sc_s_damage_trailer)) {
            throw new \InvalidArgumentException('non-nullable sc_s_damage_trailer cannot be null');
        }
        $this->container['sc_s_damage_trailer'] = $sc_s_damage_trailer;

        return $this;
    }

    /**
     * Gets sc_s_damage_freight
     *
     * @return float
     */
    public function getScSDamageFreight()
    {
        return $this->container['sc_s_damage_freight'];
    }

    /**
     * Sets sc_s_damage_freight
     *
     * @param float $sc_s_damage_freight sc_s_damage_freight
     *
     * @return self
     */
    public function setScSDamageFreight($sc_s_damage_freight)
    {
        if (is_null($sc_s_damage_freight)) {
            throw new \InvalidArgumentException('non-nullable sc_s_damage_freight cannot be null');
        }
        $this->container['sc_s_damage_freight'] = $sc_s_damage_freight;

        return $this;
    }

    /**
     * Gets sc_s_truck_manufactor
     *
     * @return string
     */
    public function getScSTruckManufactor()
    {
        return $this->container['sc_s_truck_manufactor'];
    }

    /**
     * Sets sc_s_truck_manufactor
     *
     * @param string $sc_s_truck_manufactor sc_s_truck_manufactor
     *
     * @return self
     */
    public function setScSTruckManufactor($sc_s_truck_manufactor)
    {
        if (is_null($sc_s_truck_manufactor)) {
            array_push($this->openAPINullablesSetToNull, 'sc_s_truck_manufactor');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sc_s_truck_manufactor', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sc_s_truck_manufactor'] = $sc_s_truck_manufactor;

        return $this;
    }

    /**
     * Gets sc_s_truck_model
     *
     * @return string
     */
    public function getScSTruckModel()
    {
        return $this->container['sc_s_truck_model'];
    }

    /**
     * Sets sc_s_truck_model
     *
     * @param string $sc_s_truck_model sc_s_truck_model
     *
     * @return self
     */
    public function setScSTruckModel($sc_s_truck_model)
    {
        if (is_null($sc_s_truck_model)) {
            array_push($this->openAPINullablesSetToNull, 'sc_s_truck_model');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sc_s_truck_model', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sc_s_truck_model'] = $sc_s_truck_model;

        return $this;
    }

    /**
     * Gets sc_s_truck_plate
     *
     * @return string
     */
    public function getScSTruckPlate()
    {
        return $this->container['sc_s_truck_plate'];
    }

    /**
     * Sets sc_s_truck_plate
     *
     * @param string $sc_s_truck_plate sc_s_truck_plate
     *
     * @return self
     */
    public function setScSTruckPlate($sc_s_truck_plate)
    {
        if (is_null($sc_s_truck_plate)) {
            array_push($this->openAPINullablesSetToNull, 'sc_s_truck_plate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sc_s_truck_plate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sc_s_truck_plate'] = $sc_s_truck_plate;

        return $this;
    }

    /**
     * Gets sc_s_x_coord
     *
     * @return float
     */
    public function getScSXCoord()
    {
        return $this->container['sc_s_x_coord'];
    }

    /**
     * Sets sc_s_x_coord
     *
     * @param float $sc_s_x_coord sc_s_x_coord
     *
     * @return self
     */
    public function setScSXCoord($sc_s_x_coord)
    {
        if (is_null($sc_s_x_coord)) {
            throw new \InvalidArgumentException('non-nullable sc_s_x_coord cannot be null');
        }
        $this->container['sc_s_x_coord'] = $sc_s_x_coord;

        return $this;
    }

    /**
     * Gets sc_s_z_coord
     *
     * @return float
     */
    public function getScSZCoord()
    {
        return $this->container['sc_s_z_coord'];
    }

    /**
     * Sets sc_s_z_coord
     *
     * @param float $sc_s_z_coord sc_s_z_coord
     *
     * @return self
     */
    public function setScSZCoord($sc_s_z_coord)
    {
        if (is_null($sc_s_z_coord)) {
            throw new \InvalidArgumentException('non-nullable sc_s_z_coord cannot be null');
        }
        $this->container['sc_s_z_coord'] = $sc_s_z_coord;

        return $this;
    }

    /**
     * Gets sc_s_near_by
     *
     * @return string
     */
    public function getScSNearBy()
    {
        return $this->container['sc_s_near_by'];
    }

    /**
     * Sets sc_s_near_by
     *
     * @param string $sc_s_near_by sc_s_near_by
     *
     * @return self
     */
    public function setScSNearBy($sc_s_near_by)
    {
        if (is_null($sc_s_near_by)) {
            array_push($this->openAPINullablesSetToNull, 'sc_s_near_by');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sc_s_near_by', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sc_s_near_by'] = $sc_s_near_by;

        return $this;
    }

    /**
     * Gets sc_s_scc_follow_user
     *
     * @return string
     */
    public function getScSSccFollowUser()
    {
        return $this->container['sc_s_scc_follow_user'];
    }

    /**
     * Sets sc_s_scc_follow_user
     *
     * @param string $sc_s_scc_follow_user sc_s_scc_follow_user
     *
     * @return self
     */
    public function setScSSccFollowUser($sc_s_scc_follow_user)
    {
        if (is_null($sc_s_scc_follow_user)) {
            array_push($this->openAPINullablesSetToNull, 'sc_s_scc_follow_user');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sc_s_scc_follow_user', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sc_s_scc_follow_user'] = $sc_s_scc_follow_user;

        return $this;
    }

    /**
     * Gets task_weight
     *
     * @return string
     */
    public function getTaskWeight()
    {
        return $this->container['task_weight'];
    }

    /**
     * Sets task_weight
     *
     * @param string $task_weight task_weight
     *
     * @return self
     */
    public function setTaskWeight($task_weight)
    {
        if (is_null($task_weight)) {
            array_push($this->openAPINullablesSetToNull, 'task_weight');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('task_weight', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['task_weight'] = $task_weight;

        return $this;
    }

    /**
     * Gets task_freight
     *
     * @return string
     */
    public function getTaskFreight()
    {
        return $this->container['task_freight'];
    }

    /**
     * Sets task_freight
     *
     * @param string $task_freight task_freight
     *
     * @return self
     */
    public function setTaskFreight($task_freight)
    {
        if (is_null($task_freight)) {
            array_push($this->openAPINullablesSetToNull, 'task_freight');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('task_freight', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['task_freight'] = $task_freight;

        return $this;
    }

    /**
     * Gets task_start
     *
     * @return string
     */
    public function getTaskStart()
    {
        return $this->container['task_start'];
    }

    /**
     * Sets task_start
     *
     * @param string $task_start task_start
     *
     * @return self
     */
    public function setTaskStart($task_start)
    {
        if (is_null($task_start)) {
            array_push($this->openAPINullablesSetToNull, 'task_start');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('task_start', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['task_start'] = $task_start;

        return $this;
    }

    /**
     * Gets task_dest
     *
     * @return string
     */
    public function getTaskDest()
    {
        return $this->container['task_dest'];
    }

    /**
     * Sets task_dest
     *
     * @param string $task_dest task_dest
     *
     * @return self
     */
    public function setTaskDest($task_dest)
    {
        if (is_null($task_dest)) {
            array_push($this->openAPINullablesSetToNull, 'task_dest');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('task_dest', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['task_dest'] = $task_dest;

        return $this;
    }

    /**
     * Gets task_start_company
     *
     * @return string
     */
    public function getTaskStartCompany()
    {
        return $this->container['task_start_company'];
    }

    /**
     * Sets task_start_company
     *
     * @param string $task_start_company task_start_company
     *
     * @return self
     */
    public function setTaskStartCompany($task_start_company)
    {
        if (is_null($task_start_company)) {
            array_push($this->openAPINullablesSetToNull, 'task_start_company');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('task_start_company', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['task_start_company'] = $task_start_company;

        return $this;
    }

    /**
     * Gets task_dest_company
     *
     * @return string
     */
    public function getTaskDestCompany()
    {
        return $this->container['task_dest_company'];
    }

    /**
     * Sets task_dest_company
     *
     * @param string $task_dest_company task_dest_company
     *
     * @return self
     */
    public function setTaskDestCompany($task_dest_company)
    {
        if (is_null($task_dest_company)) {
            array_push($this->openAPINullablesSetToNull, 'task_dest_company');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('task_dest_company', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['task_dest_company'] = $task_dest_company;

        return $this;
    }

    /**
     * Gets task_map
     *
     * @return string
     */
    public function getTaskMap()
    {
        return $this->container['task_map'];
    }

    /**
     * Sets task_map
     *
     * @param string $task_map task_map
     *
     * @return self
     */
    public function setTaskMap($task_map)
    {
        if (is_null($task_map)) {
            array_push($this->openAPINullablesSetToNull, 'task_map');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('task_map', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['task_map'] = $task_map;

        return $this;
    }

    /**
     * Gets oms_i_line
     *
     * @return string
     */
    public function getOmsILine()
    {
        return $this->container['oms_i_line'];
    }

    /**
     * Sets oms_i_line
     *
     * @param string $oms_i_line oms_i_line
     *
     * @return self
     */
    public function setOmsILine($oms_i_line)
    {
        if (is_null($oms_i_line)) {
            array_push($this->openAPINullablesSetToNull, 'oms_i_line');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('oms_i_line', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['oms_i_line'] = $oms_i_line;

        return $this;
    }

    /**
     * Gets oms_i_circ
     *
     * @return string
     */
    public function getOmsICirc()
    {
        return $this->container['oms_i_circ'];
    }

    /**
     * Sets oms_i_circ
     *
     * @param string $oms_i_circ oms_i_circ
     *
     * @return self
     */
    public function setOmsICirc($oms_i_circ)
    {
        if (is_null($oms_i_circ)) {
            array_push($this->openAPINullablesSetToNull, 'oms_i_circ');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('oms_i_circ', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['oms_i_circ'] = $oms_i_circ;

        return $this;
    }

    /**
     * Gets oms_i_dest
     *
     * @return string
     */
    public function getOmsIDest()
    {
        return $this->container['oms_i_dest'];
    }

    /**
     * Sets oms_i_dest
     *
     * @param string $oms_i_dest oms_i_dest
     *
     * @return self
     */
    public function setOmsIDest($oms_i_dest)
    {
        if (is_null($oms_i_dest)) {
            array_push($this->openAPINullablesSetToNull, 'oms_i_dest');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('oms_i_dest', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['oms_i_dest'] = $oms_i_dest;

        return $this;
    }

    /**
     * Gets oms_i_next
     *
     * @return string
     */
    public function getOmsINext()
    {
        return $this->container['oms_i_next'];
    }

    /**
     * Sets oms_i_next
     *
     * @param string $oms_i_next oms_i_next
     *
     * @return self
     */
    public function setOmsINext($oms_i_next)
    {
        if (is_null($oms_i_next)) {
            array_push($this->openAPINullablesSetToNull, 'oms_i_next');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('oms_i_next', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['oms_i_next'] = $oms_i_next;

        return $this;
    }

    /**
     * Gets oms_i_delay
     *
     * @return string
     */
    public function getOmsIDelay()
    {
        return $this->container['oms_i_delay'];
    }

    /**
     * Sets oms_i_delay
     *
     * @param string $oms_i_delay oms_i_delay
     *
     * @return self
     */
    public function setOmsIDelay($oms_i_delay)
    {
        if (is_null($oms_i_delay)) {
            array_push($this->openAPINullablesSetToNull, 'oms_i_delay');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('oms_i_delay', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['oms_i_delay'] = $oms_i_delay;

        return $this;
    }

    /**
     * Gets oms_i_map
     *
     * @return string
     */
    public function getOmsIMap()
    {
        return $this->container['oms_i_map'];
    }

    /**
     * Sets oms_i_map
     *
     * @param string $oms_i_map oms_i_map
     *
     * @return self
     */
    public function setOmsIMap($oms_i_map)
    {
        if (is_null($oms_i_map)) {
            array_push($this->openAPINullablesSetToNull, 'oms_i_map');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('oms_i_map', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['oms_i_map'] = $oms_i_map;

        return $this;
    }

    /**
     * Gets st_w_anlage
     *
     * @return string
     */
    public function getStWAnlage()
    {
        return $this->container['st_w_anlage'];
    }

    /**
     * Sets st_w_anlage
     *
     * @param string $st_w_anlage st_w_anlage
     *
     * @return self
     */
    public function setStWAnlage($st_w_anlage)
    {
        if (is_null($st_w_anlage)) {
            array_push($this->openAPINullablesSetToNull, 'st_w_anlage');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('st_w_anlage', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['st_w_anlage'] = $st_w_anlage;

        return $this;
    }

    /**
     * Gets st_w_cur_trains
     *
     * @return int
     */
    public function getStWCurTrains()
    {
        return $this->container['st_w_cur_trains'];
    }

    /**
     * Sets st_w_cur_trains
     *
     * @param int $st_w_cur_trains st_w_cur_trains
     *
     * @return self
     */
    public function setStWCurTrains($st_w_cur_trains)
    {
        if (is_null($st_w_cur_trains)) {
            throw new \InvalidArgumentException('non-nullable st_w_cur_trains cannot be null');
        }
        $this->container['st_w_cur_trains'] = $st_w_cur_trains;

        return $this;
    }

    /**
     * Gets st_w_total_trains
     *
     * @return int
     */
    public function getStWTotalTrains()
    {
        return $this->container['st_w_total_trains'];
    }

    /**
     * Sets st_w_total_trains
     *
     * @param int $st_w_total_trains st_w_total_trains
     *
     * @return self
     */
    public function setStWTotalTrains($st_w_total_trains)
    {
        if (is_null($st_w_total_trains)) {
            throw new \InvalidArgumentException('non-nullable st_w_total_trains cannot be null');
        }
        $this->container['st_w_total_trains'] = $st_w_total_trains;

        return $this;
    }

    /**
     * Gets st_w_cur_delay
     *
     * @return int
     */
    public function getStWCurDelay()
    {
        return $this->container['st_w_cur_delay'];
    }

    /**
     * Sets st_w_cur_delay
     *
     * @param int $st_w_cur_delay st_w_cur_delay
     *
     * @return self
     */
    public function setStWCurDelay($st_w_cur_delay)
    {
        if (is_null($st_w_cur_delay)) {
            throw new \InvalidArgumentException('non-nullable st_w_cur_delay cannot be null');
        }
        $this->container['st_w_cur_delay'] = $st_w_cur_delay;

        return $this;
    }

    /**
     * Gets spotify_title
     *
     * @return string
     */
    public function getSpotifyTitle()
    {
        return $this->container['spotify_title'];
    }

    /**
     * Sets spotify_title
     *
     * @param string $spotify_title spotify_title
     *
     * @return self
     */
    public function setSpotifyTitle($spotify_title)
    {
        if (is_null($spotify_title)) {
            array_push($this->openAPINullablesSetToNull, 'spotify_title');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('spotify_title', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['spotify_title'] = $spotify_title;

        return $this;
    }

    /**
     * Gets spotify_artist
     *
     * @return string
     */
    public function getSpotifyArtist()
    {
        return $this->container['spotify_artist'];
    }

    /**
     * Sets spotify_artist
     *
     * @param string $spotify_artist spotify_artist
     *
     * @return self
     */
    public function setSpotifyArtist($spotify_artist)
    {
        if (is_null($spotify_artist)) {
            array_push($this->openAPINullablesSetToNull, 'spotify_artist');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('spotify_artist', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['spotify_artist'] = $spotify_artist;

        return $this;
    }

    /**
     * Gets spotify_album
     *
     * @return string
     */
    public function getSpotifyAlbum()
    {
        return $this->container['spotify_album'];
    }

    /**
     * Sets spotify_album
     *
     * @param string $spotify_album spotify_album
     *
     * @return self
     */
    public function setSpotifyAlbum($spotify_album)
    {
        if (is_null($spotify_album)) {
            array_push($this->openAPINullablesSetToNull, 'spotify_album');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('spotify_album', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['spotify_album'] = $spotify_album;

        return $this;
    }

    /**
     * Gets spotify_cover_url
     *
     * @return string
     */
    public function getSpotifyCoverUrl()
    {
        return $this->container['spotify_cover_url'];
    }

    /**
     * Sets spotify_cover_url
     *
     * @param string $spotify_cover_url spotify_cover_url
     *
     * @return self
     */
    public function setSpotifyCoverUrl($spotify_cover_url)
    {
        if (is_null($spotify_cover_url)) {
            array_push($this->openAPINullablesSetToNull, 'spotify_cover_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('spotify_cover_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['spotify_cover_url'] = $spotify_cover_url;

        return $this;
    }

    /**
     * Gets spotify_play_position
     *
     * @return int
     */
    public function getSpotifyPlayPosition()
    {
        return $this->container['spotify_play_position'];
    }

    /**
     * Sets spotify_play_position
     *
     * @param int $spotify_play_position spotify_play_position
     *
     * @return self
     */
    public function setSpotifyPlayPosition($spotify_play_position)
    {
        if (is_null($spotify_play_position)) {
            throw new \InvalidArgumentException('non-nullable spotify_play_position cannot be null');
        }
        $this->container['spotify_play_position'] = $spotify_play_position;

        return $this;
    }

    /**
     * Gets spotify_title_uri
     *
     * @return string
     */
    public function getSpotifyTitleUri()
    {
        return $this->container['spotify_title_uri'];
    }

    /**
     * Sets spotify_title_uri
     *
     * @param string $spotify_title_uri spotify_title_uri
     *
     * @return self
     */
    public function setSpotifyTitleUri($spotify_title_uri)
    {
        if (is_null($spotify_title_uri)) {
            array_push($this->openAPINullablesSetToNull, 'spotify_title_uri');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('spotify_title_uri', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['spotify_title_uri'] = $spotify_title_uri;

        return $this;
    }

    /**
     * Gets sim_rail_server
     *
     * @return string
     */
    public function getSimRailServer()
    {
        return $this->container['sim_rail_server'];
    }

    /**
     * Sets sim_rail_server
     *
     * @param string $sim_rail_server sim_rail_server
     *
     * @return self
     */
    public function setSimRailServer($sim_rail_server)
    {
        if (is_null($sim_rail_server)) {
            array_push($this->openAPINullablesSetToNull, 'sim_rail_server');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sim_rail_server', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sim_rail_server'] = $sim_rail_server;

        return $this;
    }

    /**
     * Gets sim_rail_latitude
     *
     * @return float
     */
    public function getSimRailLatitude()
    {
        return $this->container['sim_rail_latitude'];
    }

    /**
     * Sets sim_rail_latitude
     *
     * @param float $sim_rail_latitude sim_rail_latitude
     *
     * @return self
     */
    public function setSimRailLatitude($sim_rail_latitude)
    {
        if (is_null($sim_rail_latitude)) {
            throw new \InvalidArgumentException('non-nullable sim_rail_latitude cannot be null');
        }
        $this->container['sim_rail_latitude'] = $sim_rail_latitude;

        return $this;
    }

    /**
     * Gets sim_rail_longitude
     *
     * @return float
     */
    public function getSimRailLongitude()
    {
        return $this->container['sim_rail_longitude'];
    }

    /**
     * Sets sim_rail_longitude
     *
     * @param float $sim_rail_longitude sim_rail_longitude
     *
     * @return self
     */
    public function setSimRailLongitude($sim_rail_longitude)
    {
        if (is_null($sim_rail_longitude)) {
            throw new \InvalidArgumentException('non-nullable sim_rail_longitude cannot be null');
        }
        $this->container['sim_rail_longitude'] = $sim_rail_longitude;

        return $this;
    }

    /**
     * Gets sim_rail_train_number
     *
     * @return string
     */
    public function getSimRailTrainNumber()
    {
        return $this->container['sim_rail_train_number'];
    }

    /**
     * Sets sim_rail_train_number
     *
     * @param string $sim_rail_train_number sim_rail_train_number
     *
     * @return self
     */
    public function setSimRailTrainNumber($sim_rail_train_number)
    {
        if (is_null($sim_rail_train_number)) {
            array_push($this->openAPINullablesSetToNull, 'sim_rail_train_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sim_rail_train_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sim_rail_train_number'] = $sim_rail_train_number;

        return $this;
    }

    /**
     * Gets sim_rail_train_velocity
     *
     * @return float
     */
    public function getSimRailTrainVelocity()
    {
        return $this->container['sim_rail_train_velocity'];
    }

    /**
     * Sets sim_rail_train_velocity
     *
     * @param float $sim_rail_train_velocity sim_rail_train_velocity
     *
     * @return self
     */
    public function setSimRailTrainVelocity($sim_rail_train_velocity)
    {
        if (is_null($sim_rail_train_velocity)) {
            throw new \InvalidArgumentException('non-nullable sim_rail_train_velocity cannot be null');
        }
        $this->container['sim_rail_train_velocity'] = $sim_rail_train_velocity;

        return $this;
    }

    /**
     * Gets sim_rail_train_next_stop
     *
     * @return string
     */
    public function getSimRailTrainNextStop()
    {
        return $this->container['sim_rail_train_next_stop'];
    }

    /**
     * Sets sim_rail_train_next_stop
     *
     * @param string $sim_rail_train_next_stop sim_rail_train_next_stop
     *
     * @return self
     */
    public function setSimRailTrainNextStop($sim_rail_train_next_stop)
    {
        if (is_null($sim_rail_train_next_stop)) {
            array_push($this->openAPINullablesSetToNull, 'sim_rail_train_next_stop');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sim_rail_train_next_stop', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sim_rail_train_next_stop'] = $sim_rail_train_next_stop;

        return $this;
    }

    /**
     * Gets sim_rail_train_destination
     *
     * @return string
     */
    public function getSimRailTrainDestination()
    {
        return $this->container['sim_rail_train_destination'];
    }

    /**
     * Sets sim_rail_train_destination
     *
     * @param string $sim_rail_train_destination sim_rail_train_destination
     *
     * @return self
     */
    public function setSimRailTrainDestination($sim_rail_train_destination)
    {
        if (is_null($sim_rail_train_destination)) {
            array_push($this->openAPINullablesSetToNull, 'sim_rail_train_destination');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sim_rail_train_destination', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sim_rail_train_destination'] = $sim_rail_train_destination;

        return $this;
    }

    /**
     * Gets sim_rail_dispatch_station
     *
     * @return string
     */
    public function getSimRailDispatchStation()
    {
        return $this->container['sim_rail_dispatch_station'];
    }

    /**
     * Sets sim_rail_dispatch_station
     *
     * @param string $sim_rail_dispatch_station sim_rail_dispatch_station
     *
     * @return self
     */
    public function setSimRailDispatchStation($sim_rail_dispatch_station)
    {
        if (is_null($sim_rail_dispatch_station)) {
            array_push($this->openAPINullablesSetToNull, 'sim_rail_dispatch_station');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sim_rail_dispatch_station', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sim_rail_dispatch_station'] = $sim_rail_dispatch_station;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



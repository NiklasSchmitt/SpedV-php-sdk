<?php
/**
 * FPHSpedVAPIServerCommunicationHelperRESTSpedStats
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SpedV API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * FPHSpedVAPIServerCommunicationHelperRESTSpedStats Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class FPHSpedVAPIServerCommunicationHelperRESTSpedStats implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'FPH.SpedV.API.ServerCommunication.Helper.REST.SpedStats';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'driven_tasks' => 'float',
        'driven_km' => 'float',
        'driven_mi' => 'float',
        'driven_weight_kg' => 'float',
        'driven_weight_lbs' => 'float',
        'sum_boni' => 'float',
        'sum_damage' => 'float',
        'sum_ferry' => 'float',
        'used_fuel_li' => 'float',
        'used_fuel_gal' => 'float',
        'sum_income' => 'float',
        'sum_maintenance' => 'float',
        'sum_refuel' => 'float',
        'sum_taxes' => 'float',
        'sum_toll' => 'float',
        'sum_value' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'driven_tasks' => 'double',
        'driven_km' => 'double',
        'driven_mi' => 'double',
        'driven_weight_kg' => 'double',
        'driven_weight_lbs' => 'double',
        'sum_boni' => 'double',
        'sum_damage' => 'double',
        'sum_ferry' => 'double',
        'used_fuel_li' => 'double',
        'used_fuel_gal' => 'double',
        'sum_income' => 'double',
        'sum_maintenance' => 'double',
        'sum_refuel' => 'double',
        'sum_taxes' => 'double',
        'sum_toll' => 'double',
        'sum_value' => 'double'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'driven_tasks' => false,
        'driven_km' => false,
        'driven_mi' => false,
        'driven_weight_kg' => false,
        'driven_weight_lbs' => false,
        'sum_boni' => false,
        'sum_damage' => false,
        'sum_ferry' => false,
        'used_fuel_li' => false,
        'used_fuel_gal' => false,
        'sum_income' => false,
        'sum_maintenance' => false,
        'sum_refuel' => false,
        'sum_taxes' => false,
        'sum_toll' => false,
        'sum_value' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'driven_tasks' => 'drivenTasks',
        'driven_km' => 'drivenKM',
        'driven_mi' => 'drivenMI',
        'driven_weight_kg' => 'drivenWeightKG',
        'driven_weight_lbs' => 'drivenWeightLBS',
        'sum_boni' => 'sumBoni',
        'sum_damage' => 'sumDamage',
        'sum_ferry' => 'sumFerry',
        'used_fuel_li' => 'usedFuelLi',
        'used_fuel_gal' => 'usedFuelGal',
        'sum_income' => 'sumIncome',
        'sum_maintenance' => 'sumMaintenance',
        'sum_refuel' => 'sumRefuel',
        'sum_taxes' => 'sumTaxes',
        'sum_toll' => 'sumToll',
        'sum_value' => 'sumValue'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'driven_tasks' => 'setDrivenTasks',
        'driven_km' => 'setDrivenKm',
        'driven_mi' => 'setDrivenMi',
        'driven_weight_kg' => 'setDrivenWeightKg',
        'driven_weight_lbs' => 'setDrivenWeightLbs',
        'sum_boni' => 'setSumBoni',
        'sum_damage' => 'setSumDamage',
        'sum_ferry' => 'setSumFerry',
        'used_fuel_li' => 'setUsedFuelLi',
        'used_fuel_gal' => 'setUsedFuelGal',
        'sum_income' => 'setSumIncome',
        'sum_maintenance' => 'setSumMaintenance',
        'sum_refuel' => 'setSumRefuel',
        'sum_taxes' => 'setSumTaxes',
        'sum_toll' => 'setSumToll',
        'sum_value' => 'setSumValue'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'driven_tasks' => 'getDrivenTasks',
        'driven_km' => 'getDrivenKm',
        'driven_mi' => 'getDrivenMi',
        'driven_weight_kg' => 'getDrivenWeightKg',
        'driven_weight_lbs' => 'getDrivenWeightLbs',
        'sum_boni' => 'getSumBoni',
        'sum_damage' => 'getSumDamage',
        'sum_ferry' => 'getSumFerry',
        'used_fuel_li' => 'getUsedFuelLi',
        'used_fuel_gal' => 'getUsedFuelGal',
        'sum_income' => 'getSumIncome',
        'sum_maintenance' => 'getSumMaintenance',
        'sum_refuel' => 'getSumRefuel',
        'sum_taxes' => 'getSumTaxes',
        'sum_toll' => 'getSumToll',
        'sum_value' => 'getSumValue'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('driven_tasks', $data ?? [], null);
        $this->setIfExists('driven_km', $data ?? [], null);
        $this->setIfExists('driven_mi', $data ?? [], null);
        $this->setIfExists('driven_weight_kg', $data ?? [], null);
        $this->setIfExists('driven_weight_lbs', $data ?? [], null);
        $this->setIfExists('sum_boni', $data ?? [], null);
        $this->setIfExists('sum_damage', $data ?? [], null);
        $this->setIfExists('sum_ferry', $data ?? [], null);
        $this->setIfExists('used_fuel_li', $data ?? [], null);
        $this->setIfExists('used_fuel_gal', $data ?? [], null);
        $this->setIfExists('sum_income', $data ?? [], null);
        $this->setIfExists('sum_maintenance', $data ?? [], null);
        $this->setIfExists('sum_refuel', $data ?? [], null);
        $this->setIfExists('sum_taxes', $data ?? [], null);
        $this->setIfExists('sum_toll', $data ?? [], null);
        $this->setIfExists('sum_value', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['driven_tasks'] === null) {
            $invalidProperties[] = "'driven_tasks' can't be null";
        }
        if ($this->container['driven_km'] === null) {
            $invalidProperties[] = "'driven_km' can't be null";
        }
        if ($this->container['driven_mi'] === null) {
            $invalidProperties[] = "'driven_mi' can't be null";
        }
        if ($this->container['driven_weight_kg'] === null) {
            $invalidProperties[] = "'driven_weight_kg' can't be null";
        }
        if ($this->container['driven_weight_lbs'] === null) {
            $invalidProperties[] = "'driven_weight_lbs' can't be null";
        }
        if ($this->container['sum_boni'] === null) {
            $invalidProperties[] = "'sum_boni' can't be null";
        }
        if ($this->container['sum_damage'] === null) {
            $invalidProperties[] = "'sum_damage' can't be null";
        }
        if ($this->container['sum_ferry'] === null) {
            $invalidProperties[] = "'sum_ferry' can't be null";
        }
        if ($this->container['used_fuel_li'] === null) {
            $invalidProperties[] = "'used_fuel_li' can't be null";
        }
        if ($this->container['used_fuel_gal'] === null) {
            $invalidProperties[] = "'used_fuel_gal' can't be null";
        }
        if ($this->container['sum_income'] === null) {
            $invalidProperties[] = "'sum_income' can't be null";
        }
        if ($this->container['sum_maintenance'] === null) {
            $invalidProperties[] = "'sum_maintenance' can't be null";
        }
        if ($this->container['sum_refuel'] === null) {
            $invalidProperties[] = "'sum_refuel' can't be null";
        }
        if ($this->container['sum_taxes'] === null) {
            $invalidProperties[] = "'sum_taxes' can't be null";
        }
        if ($this->container['sum_toll'] === null) {
            $invalidProperties[] = "'sum_toll' can't be null";
        }
        if ($this->container['sum_value'] === null) {
            $invalidProperties[] = "'sum_value' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets driven_tasks
     *
     * @return float
     */
    public function getDrivenTasks()
    {
        return $this->container['driven_tasks'];
    }

    /**
     * Sets driven_tasks
     *
     * @param float $driven_tasks driven_tasks
     *
     * @return self
     */
    public function setDrivenTasks($driven_tasks)
    {
        if (is_null($driven_tasks)) {
            throw new \InvalidArgumentException('non-nullable driven_tasks cannot be null');
        }
        $this->container['driven_tasks'] = $driven_tasks;

        return $this;
    }

    /**
     * Gets driven_km
     *
     * @return float
     */
    public function getDrivenKm()
    {
        return $this->container['driven_km'];
    }

    /**
     * Sets driven_km
     *
     * @param float $driven_km driven_km
     *
     * @return self
     */
    public function setDrivenKm($driven_km)
    {
        if (is_null($driven_km)) {
            throw new \InvalidArgumentException('non-nullable driven_km cannot be null');
        }
        $this->container['driven_km'] = $driven_km;

        return $this;
    }

    /**
     * Gets driven_mi
     *
     * @return float
     */
    public function getDrivenMi()
    {
        return $this->container['driven_mi'];
    }

    /**
     * Sets driven_mi
     *
     * @param float $driven_mi driven_mi
     *
     * @return self
     */
    public function setDrivenMi($driven_mi)
    {
        if (is_null($driven_mi)) {
            throw new \InvalidArgumentException('non-nullable driven_mi cannot be null');
        }
        $this->container['driven_mi'] = $driven_mi;

        return $this;
    }

    /**
     * Gets driven_weight_kg
     *
     * @return float
     */
    public function getDrivenWeightKg()
    {
        return $this->container['driven_weight_kg'];
    }

    /**
     * Sets driven_weight_kg
     *
     * @param float $driven_weight_kg driven_weight_kg
     *
     * @return self
     */
    public function setDrivenWeightKg($driven_weight_kg)
    {
        if (is_null($driven_weight_kg)) {
            throw new \InvalidArgumentException('non-nullable driven_weight_kg cannot be null');
        }
        $this->container['driven_weight_kg'] = $driven_weight_kg;

        return $this;
    }

    /**
     * Gets driven_weight_lbs
     *
     * @return float
     */
    public function getDrivenWeightLbs()
    {
        return $this->container['driven_weight_lbs'];
    }

    /**
     * Sets driven_weight_lbs
     *
     * @param float $driven_weight_lbs driven_weight_lbs
     *
     * @return self
     */
    public function setDrivenWeightLbs($driven_weight_lbs)
    {
        if (is_null($driven_weight_lbs)) {
            throw new \InvalidArgumentException('non-nullable driven_weight_lbs cannot be null');
        }
        $this->container['driven_weight_lbs'] = $driven_weight_lbs;

        return $this;
    }

    /**
     * Gets sum_boni
     *
     * @return float
     */
    public function getSumBoni()
    {
        return $this->container['sum_boni'];
    }

    /**
     * Sets sum_boni
     *
     * @param float $sum_boni sum_boni
     *
     * @return self
     */
    public function setSumBoni($sum_boni)
    {
        if (is_null($sum_boni)) {
            throw new \InvalidArgumentException('non-nullable sum_boni cannot be null');
        }
        $this->container['sum_boni'] = $sum_boni;

        return $this;
    }

    /**
     * Gets sum_damage
     *
     * @return float
     */
    public function getSumDamage()
    {
        return $this->container['sum_damage'];
    }

    /**
     * Sets sum_damage
     *
     * @param float $sum_damage sum_damage
     *
     * @return self
     */
    public function setSumDamage($sum_damage)
    {
        if (is_null($sum_damage)) {
            throw new \InvalidArgumentException('non-nullable sum_damage cannot be null');
        }
        $this->container['sum_damage'] = $sum_damage;

        return $this;
    }

    /**
     * Gets sum_ferry
     *
     * @return float
     */
    public function getSumFerry()
    {
        return $this->container['sum_ferry'];
    }

    /**
     * Sets sum_ferry
     *
     * @param float $sum_ferry sum_ferry
     *
     * @return self
     */
    public function setSumFerry($sum_ferry)
    {
        if (is_null($sum_ferry)) {
            throw new \InvalidArgumentException('non-nullable sum_ferry cannot be null');
        }
        $this->container['sum_ferry'] = $sum_ferry;

        return $this;
    }

    /**
     * Gets used_fuel_li
     *
     * @return float
     */
    public function getUsedFuelLi()
    {
        return $this->container['used_fuel_li'];
    }

    /**
     * Sets used_fuel_li
     *
     * @param float $used_fuel_li used_fuel_li
     *
     * @return self
     */
    public function setUsedFuelLi($used_fuel_li)
    {
        if (is_null($used_fuel_li)) {
            throw new \InvalidArgumentException('non-nullable used_fuel_li cannot be null');
        }
        $this->container['used_fuel_li'] = $used_fuel_li;

        return $this;
    }

    /**
     * Gets used_fuel_gal
     *
     * @return float
     */
    public function getUsedFuelGal()
    {
        return $this->container['used_fuel_gal'];
    }

    /**
     * Sets used_fuel_gal
     *
     * @param float $used_fuel_gal used_fuel_gal
     *
     * @return self
     */
    public function setUsedFuelGal($used_fuel_gal)
    {
        if (is_null($used_fuel_gal)) {
            throw new \InvalidArgumentException('non-nullable used_fuel_gal cannot be null');
        }
        $this->container['used_fuel_gal'] = $used_fuel_gal;

        return $this;
    }

    /**
     * Gets sum_income
     *
     * @return float
     */
    public function getSumIncome()
    {
        return $this->container['sum_income'];
    }

    /**
     * Sets sum_income
     *
     * @param float $sum_income sum_income
     *
     * @return self
     */
    public function setSumIncome($sum_income)
    {
        if (is_null($sum_income)) {
            throw new \InvalidArgumentException('non-nullable sum_income cannot be null');
        }
        $this->container['sum_income'] = $sum_income;

        return $this;
    }

    /**
     * Gets sum_maintenance
     *
     * @return float
     */
    public function getSumMaintenance()
    {
        return $this->container['sum_maintenance'];
    }

    /**
     * Sets sum_maintenance
     *
     * @param float $sum_maintenance sum_maintenance
     *
     * @return self
     */
    public function setSumMaintenance($sum_maintenance)
    {
        if (is_null($sum_maintenance)) {
            throw new \InvalidArgumentException('non-nullable sum_maintenance cannot be null');
        }
        $this->container['sum_maintenance'] = $sum_maintenance;

        return $this;
    }

    /**
     * Gets sum_refuel
     *
     * @return float
     */
    public function getSumRefuel()
    {
        return $this->container['sum_refuel'];
    }

    /**
     * Sets sum_refuel
     *
     * @param float $sum_refuel sum_refuel
     *
     * @return self
     */
    public function setSumRefuel($sum_refuel)
    {
        if (is_null($sum_refuel)) {
            throw new \InvalidArgumentException('non-nullable sum_refuel cannot be null');
        }
        $this->container['sum_refuel'] = $sum_refuel;

        return $this;
    }

    /**
     * Gets sum_taxes
     *
     * @return float
     */
    public function getSumTaxes()
    {
        return $this->container['sum_taxes'];
    }

    /**
     * Sets sum_taxes
     *
     * @param float $sum_taxes sum_taxes
     *
     * @return self
     */
    public function setSumTaxes($sum_taxes)
    {
        if (is_null($sum_taxes)) {
            throw new \InvalidArgumentException('non-nullable sum_taxes cannot be null');
        }
        $this->container['sum_taxes'] = $sum_taxes;

        return $this;
    }

    /**
     * Gets sum_toll
     *
     * @return float
     */
    public function getSumToll()
    {
        return $this->container['sum_toll'];
    }

    /**
     * Sets sum_toll
     *
     * @param float $sum_toll sum_toll
     *
     * @return self
     */
    public function setSumToll($sum_toll)
    {
        if (is_null($sum_toll)) {
            throw new \InvalidArgumentException('non-nullable sum_toll cannot be null');
        }
        $this->container['sum_toll'] = $sum_toll;

        return $this;
    }

    /**
     * Gets sum_value
     *
     * @return float
     */
    public function getSumValue()
    {
        return $this->container['sum_value'];
    }

    /**
     * Sets sum_value
     *
     * @param float $sum_value sum_value
     *
     * @return self
     */
    public function setSumValue($sum_value)
    {
        if (is_null($sum_value)) {
            throw new \InvalidArgumentException('non-nullable sum_value cannot be null');
        }
        $this->container['sum_value'] = $sum_value;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



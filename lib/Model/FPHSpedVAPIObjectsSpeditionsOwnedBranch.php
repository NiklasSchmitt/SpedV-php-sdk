<?php
/**
 * FPHSpedVAPIObjectsSpeditionsOwnedBranch
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SpedV API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * FPHSpedVAPIObjectsSpeditionsOwnedBranch Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class FPHSpedVAPIObjectsSpeditionsOwnedBranch implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'FPH.SpedV.API.Objects.Speditions.OwnedBranch';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'spedition' => '\OpenAPI\Client\Model\FPHSpedVAPIObjectsSpeditionsSpedition',
        'company_city' => '\OpenAPI\Client\Model\FPHSpedVAPIObjectsMapsCompanyCity',
        'comment' => 'string',
        'maintenance_places' => 'int',
        'truck_parkplaces' => 'int',
        'trailer_parkplaces' => 'int',
        'breakbulk_cargo_place' => 'int',
        'truck_parkplaces_used' => 'int',
        'maintenance_places_used' => 'int',
        'spare_parts_in_storage' => '\OpenAPI\Client\Model\FPHSpedVAPIObjectsSpeditionsSparePartStock[]',
        'truck_parkplaces_not_full' => 'bool',
        'maintenance_places_not_full' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int32',
        'spedition' => null,
        'company_city' => null,
        'comment' => null,
        'maintenance_places' => 'int32',
        'truck_parkplaces' => 'int32',
        'trailer_parkplaces' => 'int32',
        'breakbulk_cargo_place' => 'int32',
        'truck_parkplaces_used' => 'int32',
        'maintenance_places_used' => 'int32',
        'spare_parts_in_storage' => null,
        'truck_parkplaces_not_full' => null,
        'maintenance_places_not_full' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'spedition' => true,
        'company_city' => true,
        'comment' => true,
        'maintenance_places' => false,
        'truck_parkplaces' => false,
        'trailer_parkplaces' => false,
        'breakbulk_cargo_place' => false,
        'truck_parkplaces_used' => false,
        'maintenance_places_used' => false,
        'spare_parts_in_storage' => true,
        'truck_parkplaces_not_full' => false,
        'maintenance_places_not_full' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'spedition' => 'spedition',
        'company_city' => 'companyCity',
        'comment' => 'comment',
        'maintenance_places' => 'maintenancePlaces',
        'truck_parkplaces' => 'truckParkplaces',
        'trailer_parkplaces' => 'trailerParkplaces',
        'breakbulk_cargo_place' => 'breakbulkCargoPlace',
        'truck_parkplaces_used' => 'truckParkplacesUsed',
        'maintenance_places_used' => 'maintenancePlacesUsed',
        'spare_parts_in_storage' => 'sparePartsInStorage',
        'truck_parkplaces_not_full' => 'truckParkplacesNotFull',
        'maintenance_places_not_full' => 'maintenancePlacesNotFull'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'spedition' => 'setSpedition',
        'company_city' => 'setCompanyCity',
        'comment' => 'setComment',
        'maintenance_places' => 'setMaintenancePlaces',
        'truck_parkplaces' => 'setTruckParkplaces',
        'trailer_parkplaces' => 'setTrailerParkplaces',
        'breakbulk_cargo_place' => 'setBreakbulkCargoPlace',
        'truck_parkplaces_used' => 'setTruckParkplacesUsed',
        'maintenance_places_used' => 'setMaintenancePlacesUsed',
        'spare_parts_in_storage' => 'setSparePartsInStorage',
        'truck_parkplaces_not_full' => 'setTruckParkplacesNotFull',
        'maintenance_places_not_full' => 'setMaintenancePlacesNotFull'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'spedition' => 'getSpedition',
        'company_city' => 'getCompanyCity',
        'comment' => 'getComment',
        'maintenance_places' => 'getMaintenancePlaces',
        'truck_parkplaces' => 'getTruckParkplaces',
        'trailer_parkplaces' => 'getTrailerParkplaces',
        'breakbulk_cargo_place' => 'getBreakbulkCargoPlace',
        'truck_parkplaces_used' => 'getTruckParkplacesUsed',
        'maintenance_places_used' => 'getMaintenancePlacesUsed',
        'spare_parts_in_storage' => 'getSparePartsInStorage',
        'truck_parkplaces_not_full' => 'getTruckParkplacesNotFull',
        'maintenance_places_not_full' => 'getMaintenancePlacesNotFull'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('spedition', $data ?? [], null);
        $this->setIfExists('company_city', $data ?? [], null);
        $this->setIfExists('comment', $data ?? [], null);
        $this->setIfExists('maintenance_places', $data ?? [], null);
        $this->setIfExists('truck_parkplaces', $data ?? [], null);
        $this->setIfExists('trailer_parkplaces', $data ?? [], null);
        $this->setIfExists('breakbulk_cargo_place', $data ?? [], null);
        $this->setIfExists('truck_parkplaces_used', $data ?? [], null);
        $this->setIfExists('maintenance_places_used', $data ?? [], null);
        $this->setIfExists('spare_parts_in_storage', $data ?? [], null);
        $this->setIfExists('truck_parkplaces_not_full', $data ?? [], null);
        $this->setIfExists('maintenance_places_not_full', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['spedition'] === null) {
            $invalidProperties[] = "'spedition' can't be null";
        }
        if ($this->container['company_city'] === null) {
            $invalidProperties[] = "'company_city' can't be null";
        }
        if ($this->container['comment'] === null) {
            $invalidProperties[] = "'comment' can't be null";
        }
        if ($this->container['maintenance_places'] === null) {
            $invalidProperties[] = "'maintenance_places' can't be null";
        }
        if ($this->container['truck_parkplaces'] === null) {
            $invalidProperties[] = "'truck_parkplaces' can't be null";
        }
        if ($this->container['trailer_parkplaces'] === null) {
            $invalidProperties[] = "'trailer_parkplaces' can't be null";
        }
        if ($this->container['breakbulk_cargo_place'] === null) {
            $invalidProperties[] = "'breakbulk_cargo_place' can't be null";
        }
        if ($this->container['truck_parkplaces_used'] === null) {
            $invalidProperties[] = "'truck_parkplaces_used' can't be null";
        }
        if ($this->container['maintenance_places_used'] === null) {
            $invalidProperties[] = "'maintenance_places_used' can't be null";
        }
        if ($this->container['spare_parts_in_storage'] === null) {
            $invalidProperties[] = "'spare_parts_in_storage' can't be null";
        }
        if ($this->container['truck_parkplaces_not_full'] === null) {
            $invalidProperties[] = "'truck_parkplaces_not_full' can't be null";
        }
        if ($this->container['maintenance_places_not_full'] === null) {
            $invalidProperties[] = "'maintenance_places_not_full' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets spedition
     *
     * @return \OpenAPI\Client\Model\FPHSpedVAPIObjectsSpeditionsSpedition
     */
    public function getSpedition()
    {
        return $this->container['spedition'];
    }

    /**
     * Sets spedition
     *
     * @param \OpenAPI\Client\Model\FPHSpedVAPIObjectsSpeditionsSpedition $spedition spedition
     *
     * @return self
     */
    public function setSpedition($spedition)
    {
        if (is_null($spedition)) {
            array_push($this->openAPINullablesSetToNull, 'spedition');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('spedition', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['spedition'] = $spedition;

        return $this;
    }

    /**
     * Gets company_city
     *
     * @return \OpenAPI\Client\Model\FPHSpedVAPIObjectsMapsCompanyCity
     */
    public function getCompanyCity()
    {
        return $this->container['company_city'];
    }

    /**
     * Sets company_city
     *
     * @param \OpenAPI\Client\Model\FPHSpedVAPIObjectsMapsCompanyCity $company_city company_city
     *
     * @return self
     */
    public function setCompanyCity($company_city)
    {
        if (is_null($company_city)) {
            array_push($this->openAPINullablesSetToNull, 'company_city');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('company_city', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['company_city'] = $company_city;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string $comment comment
     *
     * @return self
     */
    public function setComment($comment)
    {
        if (is_null($comment)) {
            array_push($this->openAPINullablesSetToNull, 'comment');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('comment', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets maintenance_places
     *
     * @return int
     */
    public function getMaintenancePlaces()
    {
        return $this->container['maintenance_places'];
    }

    /**
     * Sets maintenance_places
     *
     * @param int $maintenance_places maintenance_places
     *
     * @return self
     */
    public function setMaintenancePlaces($maintenance_places)
    {
        if (is_null($maintenance_places)) {
            throw new \InvalidArgumentException('non-nullable maintenance_places cannot be null');
        }
        $this->container['maintenance_places'] = $maintenance_places;

        return $this;
    }

    /**
     * Gets truck_parkplaces
     *
     * @return int
     */
    public function getTruckParkplaces()
    {
        return $this->container['truck_parkplaces'];
    }

    /**
     * Sets truck_parkplaces
     *
     * @param int $truck_parkplaces truck_parkplaces
     *
     * @return self
     */
    public function setTruckParkplaces($truck_parkplaces)
    {
        if (is_null($truck_parkplaces)) {
            throw new \InvalidArgumentException('non-nullable truck_parkplaces cannot be null');
        }
        $this->container['truck_parkplaces'] = $truck_parkplaces;

        return $this;
    }

    /**
     * Gets trailer_parkplaces
     *
     * @return int
     */
    public function getTrailerParkplaces()
    {
        return $this->container['trailer_parkplaces'];
    }

    /**
     * Sets trailer_parkplaces
     *
     * @param int $trailer_parkplaces trailer_parkplaces
     *
     * @return self
     */
    public function setTrailerParkplaces($trailer_parkplaces)
    {
        if (is_null($trailer_parkplaces)) {
            throw new \InvalidArgumentException('non-nullable trailer_parkplaces cannot be null');
        }
        $this->container['trailer_parkplaces'] = $trailer_parkplaces;

        return $this;
    }

    /**
     * Gets breakbulk_cargo_place
     *
     * @return int
     */
    public function getBreakbulkCargoPlace()
    {
        return $this->container['breakbulk_cargo_place'];
    }

    /**
     * Sets breakbulk_cargo_place
     *
     * @param int $breakbulk_cargo_place breakbulk_cargo_place
     *
     * @return self
     */
    public function setBreakbulkCargoPlace($breakbulk_cargo_place)
    {
        if (is_null($breakbulk_cargo_place)) {
            throw new \InvalidArgumentException('non-nullable breakbulk_cargo_place cannot be null');
        }
        $this->container['breakbulk_cargo_place'] = $breakbulk_cargo_place;

        return $this;
    }

    /**
     * Gets truck_parkplaces_used
     *
     * @return int
     */
    public function getTruckParkplacesUsed()
    {
        return $this->container['truck_parkplaces_used'];
    }

    /**
     * Sets truck_parkplaces_used
     *
     * @param int $truck_parkplaces_used truck_parkplaces_used
     *
     * @return self
     */
    public function setTruckParkplacesUsed($truck_parkplaces_used)
    {
        if (is_null($truck_parkplaces_used)) {
            throw new \InvalidArgumentException('non-nullable truck_parkplaces_used cannot be null');
        }
        $this->container['truck_parkplaces_used'] = $truck_parkplaces_used;

        return $this;
    }

    /**
     * Gets maintenance_places_used
     *
     * @return int
     */
    public function getMaintenancePlacesUsed()
    {
        return $this->container['maintenance_places_used'];
    }

    /**
     * Sets maintenance_places_used
     *
     * @param int $maintenance_places_used maintenance_places_used
     *
     * @return self
     */
    public function setMaintenancePlacesUsed($maintenance_places_used)
    {
        if (is_null($maintenance_places_used)) {
            throw new \InvalidArgumentException('non-nullable maintenance_places_used cannot be null');
        }
        $this->container['maintenance_places_used'] = $maintenance_places_used;

        return $this;
    }

    /**
     * Gets spare_parts_in_storage
     *
     * @return \OpenAPI\Client\Model\FPHSpedVAPIObjectsSpeditionsSparePartStock[]
     */
    public function getSparePartsInStorage()
    {
        return $this->container['spare_parts_in_storage'];
    }

    /**
     * Sets spare_parts_in_storage
     *
     * @param \OpenAPI\Client\Model\FPHSpedVAPIObjectsSpeditionsSparePartStock[] $spare_parts_in_storage spare_parts_in_storage
     *
     * @return self
     */
    public function setSparePartsInStorage($spare_parts_in_storage)
    {
        if (is_null($spare_parts_in_storage)) {
            array_push($this->openAPINullablesSetToNull, 'spare_parts_in_storage');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('spare_parts_in_storage', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['spare_parts_in_storage'] = $spare_parts_in_storage;

        return $this;
    }

    /**
     * Gets truck_parkplaces_not_full
     *
     * @return bool
     */
    public function getTruckParkplacesNotFull()
    {
        return $this->container['truck_parkplaces_not_full'];
    }

    /**
     * Sets truck_parkplaces_not_full
     *
     * @param bool $truck_parkplaces_not_full truck_parkplaces_not_full
     *
     * @return self
     */
    public function setTruckParkplacesNotFull($truck_parkplaces_not_full)
    {
        if (is_null($truck_parkplaces_not_full)) {
            throw new \InvalidArgumentException('non-nullable truck_parkplaces_not_full cannot be null');
        }
        $this->container['truck_parkplaces_not_full'] = $truck_parkplaces_not_full;

        return $this;
    }

    /**
     * Gets maintenance_places_not_full
     *
     * @return bool
     */
    public function getMaintenancePlacesNotFull()
    {
        return $this->container['maintenance_places_not_full'];
    }

    /**
     * Sets maintenance_places_not_full
     *
     * @param bool $maintenance_places_not_full maintenance_places_not_full
     *
     * @return self
     */
    public function setMaintenancePlacesNotFull($maintenance_places_not_full)
    {
        if (is_null($maintenance_places_not_full)) {
            throw new \InvalidArgumentException('non-nullable maintenance_places_not_full cannot be null');
        }
        $this->container['maintenance_places_not_full'] = $maintenance_places_not_full;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



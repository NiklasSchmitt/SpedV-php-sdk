<?php
/**
 * BingMapsRESTToolkitLocation
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SpedV API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * BingMapsRESTToolkitLocation Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class BingMapsRESTToolkitLocation implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'BingMapsRESTToolkit.Location';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'point' => '\OpenAPI\Client\Model\BingMapsRESTToolkitPoint',
        'entity_type' => 'string',
        'address' => '\OpenAPI\Client\Model\BingMapsRESTToolkitAddress',
        'confidence' => 'string',
        'match_codes' => 'string[]',
        'geocode_points' => '\OpenAPI\Client\Model\BingMapsRESTToolkitPoint[]',
        'query_parse_values' => '\OpenAPI\Client\Model\BingMapsRESTToolkitQueryParseValue[]',
        'bbox' => 'float[]',
        '__type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'point' => null,
        'entity_type' => null,
        'address' => null,
        'confidence' => null,
        'match_codes' => null,
        'geocode_points' => null,
        'query_parse_values' => null,
        'bbox' => 'double',
        '__type' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'name' => true,
        'point' => true,
        'entity_type' => true,
        'address' => true,
        'confidence' => true,
        'match_codes' => true,
        'geocode_points' => true,
        'query_parse_values' => true,
        'bbox' => true,
        '__type' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'point' => 'point',
        'entity_type' => 'entityType',
        'address' => 'address',
        'confidence' => 'confidence',
        'match_codes' => 'matchCodes',
        'geocode_points' => 'geocodePoints',
        'query_parse_values' => 'queryParseValues',
        'bbox' => 'bbox',
        '__type' => '__type'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'point' => 'setPoint',
        'entity_type' => 'setEntityType',
        'address' => 'setAddress',
        'confidence' => 'setConfidence',
        'match_codes' => 'setMatchCodes',
        'geocode_points' => 'setGeocodePoints',
        'query_parse_values' => 'setQueryParseValues',
        'bbox' => 'setBbox',
        '__type' => 'setType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'point' => 'getPoint',
        'entity_type' => 'getEntityType',
        'address' => 'getAddress',
        'confidence' => 'getConfidence',
        'match_codes' => 'getMatchCodes',
        'geocode_points' => 'getGeocodePoints',
        'query_parse_values' => 'getQueryParseValues',
        'bbox' => 'getBbox',
        '__type' => 'getType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('point', $data ?? [], null);
        $this->setIfExists('entity_type', $data ?? [], null);
        $this->setIfExists('address', $data ?? [], null);
        $this->setIfExists('confidence', $data ?? [], null);
        $this->setIfExists('match_codes', $data ?? [], null);
        $this->setIfExists('geocode_points', $data ?? [], null);
        $this->setIfExists('query_parse_values', $data ?? [], null);
        $this->setIfExists('bbox', $data ?? [], null);
        $this->setIfExists('__type', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['point'] === null) {
            $invalidProperties[] = "'point' can't be null";
        }
        if ($this->container['entity_type'] === null) {
            $invalidProperties[] = "'entity_type' can't be null";
        }
        if ($this->container['address'] === null) {
            $invalidProperties[] = "'address' can't be null";
        }
        if ($this->container['confidence'] === null) {
            $invalidProperties[] = "'confidence' can't be null";
        }
        if ($this->container['match_codes'] === null) {
            $invalidProperties[] = "'match_codes' can't be null";
        }
        if ($this->container['geocode_points'] === null) {
            $invalidProperties[] = "'geocode_points' can't be null";
        }
        if ($this->container['query_parse_values'] === null) {
            $invalidProperties[] = "'query_parse_values' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            array_push($this->openAPINullablesSetToNull, 'name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets point
     *
     * @return \OpenAPI\Client\Model\BingMapsRESTToolkitPoint
     */
    public function getPoint()
    {
        return $this->container['point'];
    }

    /**
     * Sets point
     *
     * @param \OpenAPI\Client\Model\BingMapsRESTToolkitPoint $point point
     *
     * @return self
     */
    public function setPoint($point)
    {
        if (is_null($point)) {
            array_push($this->openAPINullablesSetToNull, 'point');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('point', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['point'] = $point;

        return $this;
    }

    /**
     * Gets entity_type
     *
     * @return string
     */
    public function getEntityType()
    {
        return $this->container['entity_type'];
    }

    /**
     * Sets entity_type
     *
     * @param string $entity_type entity_type
     *
     * @return self
     */
    public function setEntityType($entity_type)
    {
        if (is_null($entity_type)) {
            array_push($this->openAPINullablesSetToNull, 'entity_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('entity_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['entity_type'] = $entity_type;

        return $this;
    }

    /**
     * Gets address
     *
     * @return \OpenAPI\Client\Model\BingMapsRESTToolkitAddress
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param \OpenAPI\Client\Model\BingMapsRESTToolkitAddress $address address
     *
     * @return self
     */
    public function setAddress($address)
    {
        if (is_null($address)) {
            array_push($this->openAPINullablesSetToNull, 'address');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('address', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets confidence
     *
     * @return string
     */
    public function getConfidence()
    {
        return $this->container['confidence'];
    }

    /**
     * Sets confidence
     *
     * @param string $confidence confidence
     *
     * @return self
     */
    public function setConfidence($confidence)
    {
        if (is_null($confidence)) {
            array_push($this->openAPINullablesSetToNull, 'confidence');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('confidence', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['confidence'] = $confidence;

        return $this;
    }

    /**
     * Gets match_codes
     *
     * @return string[]
     */
    public function getMatchCodes()
    {
        return $this->container['match_codes'];
    }

    /**
     * Sets match_codes
     *
     * @param string[] $match_codes match_codes
     *
     * @return self
     */
    public function setMatchCodes($match_codes)
    {
        if (is_null($match_codes)) {
            array_push($this->openAPINullablesSetToNull, 'match_codes');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('match_codes', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['match_codes'] = $match_codes;

        return $this;
    }

    /**
     * Gets geocode_points
     *
     * @return \OpenAPI\Client\Model\BingMapsRESTToolkitPoint[]
     */
    public function getGeocodePoints()
    {
        return $this->container['geocode_points'];
    }

    /**
     * Sets geocode_points
     *
     * @param \OpenAPI\Client\Model\BingMapsRESTToolkitPoint[] $geocode_points geocode_points
     *
     * @return self
     */
    public function setGeocodePoints($geocode_points)
    {
        if (is_null($geocode_points)) {
            array_push($this->openAPINullablesSetToNull, 'geocode_points');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('geocode_points', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['geocode_points'] = $geocode_points;

        return $this;
    }

    /**
     * Gets query_parse_values
     *
     * @return \OpenAPI\Client\Model\BingMapsRESTToolkitQueryParseValue[]
     */
    public function getQueryParseValues()
    {
        return $this->container['query_parse_values'];
    }

    /**
     * Sets query_parse_values
     *
     * @param \OpenAPI\Client\Model\BingMapsRESTToolkitQueryParseValue[] $query_parse_values query_parse_values
     *
     * @return self
     */
    public function setQueryParseValues($query_parse_values)
    {
        if (is_null($query_parse_values)) {
            array_push($this->openAPINullablesSetToNull, 'query_parse_values');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('query_parse_values', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['query_parse_values'] = $query_parse_values;

        return $this;
    }

    /**
     * Gets bbox
     *
     * @return float[]|null
     */
    public function getBbox()
    {
        return $this->container['bbox'];
    }

    /**
     * Sets bbox
     *
     * @param float[]|null $bbox bbox
     *
     * @return self
     */
    public function setBbox($bbox)
    {
        if (is_null($bbox)) {
            array_push($this->openAPINullablesSetToNull, 'bbox');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bbox', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['bbox'] = $bbox;

        return $this;
    }

    /**
     * Gets __type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['__type'];
    }

    /**
     * Sets __type
     *
     * @param string|null $__type __type
     *
     * @return self
     */
    public function setType($__type)
    {
        if (is_null($__type)) {
            array_push($this->openAPINullablesSetToNull, '__type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('__type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['__type'] = $__type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



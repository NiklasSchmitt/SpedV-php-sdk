<?php
/**
 * FPHSpedVAPIObjectsSpeditionsTruck
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SpedV API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * FPHSpedVAPIObjectsSpeditionsTruck Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class FPHSpedVAPIObjectsSpeditionsTruck implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'FPH.SpedV.API.Objects.Speditions.Truck';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'type' => '\OpenAPI\Client\Model\FPHSpedVAPIObjectsSpeditionsTruckType',
        'branch' => '\OpenAPI\Client\Model\FPHSpedVAPIObjectsSpeditionsOwnedBranch',
        'license_plate' => 'string',
        'user' => '\OpenAPI\Client\Model\FPHSpedVAPIObjectsUsersUser',
        'driven_km' => 'int',
        'last_city' => '\OpenAPI\Client\Model\FPHSpedVAPIObjectsMapsCity',
        'last_transfer' => '\DateTime',
        'free_usage_allowed' => 'bool',
        'is_parked' => 'bool',
        'truck_available' => '\DateTime',
        'next_main_inspection' => '\DateTime',
        'next_safety_check' => '\DateTime',
        'next_engine_maintenance' => 'int',
        'next_tire_change' => 'int',
        'next_brake_pads_change' => 'int',
        'next_brake_disc_change' => 'int',
        'has_wishbone_defect' => 'bool',
        'has_stabilizer_defect' => 'bool',
        'has_oszilation_damper_defect' => 'bool',
        'has_engine_malfunction' => 'bool',
        'has_transmission_damage' => 'bool',
        'has_saddle_plate_damage' => 'bool',
        'has_apu_damage' => 'bool',
        'has_alternator_damage' => 'bool',
        'has_stone_chip' => 'bool',
        'current_task_id' => 'int',
        'needed_maintenance_jobs' => '\OpenAPI\Client\Model\FPHSpedVAPIObjectsSpeditionsNeededTruckMaintenance[]',
        'image_url' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int32',
        'type' => null,
        'branch' => null,
        'license_plate' => null,
        'user' => null,
        'driven_km' => 'int32',
        'last_city' => null,
        'last_transfer' => 'date-time',
        'free_usage_allowed' => null,
        'is_parked' => null,
        'truck_available' => 'date-time',
        'next_main_inspection' => 'date-time',
        'next_safety_check' => 'date-time',
        'next_engine_maintenance' => 'int32',
        'next_tire_change' => 'int32',
        'next_brake_pads_change' => 'int32',
        'next_brake_disc_change' => 'int32',
        'has_wishbone_defect' => null,
        'has_stabilizer_defect' => null,
        'has_oszilation_damper_defect' => null,
        'has_engine_malfunction' => null,
        'has_transmission_damage' => null,
        'has_saddle_plate_damage' => null,
        'has_apu_damage' => null,
        'has_alternator_damage' => null,
        'has_stone_chip' => null,
        'current_task_id' => 'int32',
        'needed_maintenance_jobs' => null,
        'image_url' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'type' => true,
        'branch' => true,
        'license_plate' => true,
        'user' => true,
        'driven_km' => false,
        'last_city' => true,
        'last_transfer' => false,
        'free_usage_allowed' => false,
        'is_parked' => false,
        'truck_available' => false,
        'next_main_inspection' => false,
        'next_safety_check' => false,
        'next_engine_maintenance' => false,
        'next_tire_change' => false,
        'next_brake_pads_change' => false,
        'next_brake_disc_change' => false,
        'has_wishbone_defect' => false,
        'has_stabilizer_defect' => false,
        'has_oszilation_damper_defect' => false,
        'has_engine_malfunction' => false,
        'has_transmission_damage' => false,
        'has_saddle_plate_damage' => false,
        'has_apu_damage' => false,
        'has_alternator_damage' => false,
        'has_stone_chip' => false,
        'current_task_id' => false,
        'needed_maintenance_jobs' => true,
        'image_url' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'type' => 'type',
        'branch' => 'branch',
        'license_plate' => 'licensePlate',
        'user' => 'user',
        'driven_km' => 'drivenKM',
        'last_city' => 'lastCity',
        'last_transfer' => 'lastTransfer',
        'free_usage_allowed' => 'freeUsageAllowed',
        'is_parked' => 'isParked',
        'truck_available' => 'truckAvailable',
        'next_main_inspection' => 'nextMainInspection',
        'next_safety_check' => 'nextSafetyCheck',
        'next_engine_maintenance' => 'nextEngineMaintenance',
        'next_tire_change' => 'nextTireChange',
        'next_brake_pads_change' => 'nextBrakePadsChange',
        'next_brake_disc_change' => 'nextBrakeDiscChange',
        'has_wishbone_defect' => 'hasWishboneDefect',
        'has_stabilizer_defect' => 'hasStabilizerDefect',
        'has_oszilation_damper_defect' => 'hasOszilationDamperDefect',
        'has_engine_malfunction' => 'hasEngineMalfunction',
        'has_transmission_damage' => 'hasTransmissionDamage',
        'has_saddle_plate_damage' => 'hasSaddlePlateDamage',
        'has_apu_damage' => 'hasAPUDamage',
        'has_alternator_damage' => 'hasAlternatorDamage',
        'has_stone_chip' => 'hasStoneChip',
        'current_task_id' => 'currentTaskID',
        'needed_maintenance_jobs' => 'neededMaintenanceJobs',
        'image_url' => 'imageURL'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'type' => 'setType',
        'branch' => 'setBranch',
        'license_plate' => 'setLicensePlate',
        'user' => 'setUser',
        'driven_km' => 'setDrivenKm',
        'last_city' => 'setLastCity',
        'last_transfer' => 'setLastTransfer',
        'free_usage_allowed' => 'setFreeUsageAllowed',
        'is_parked' => 'setIsParked',
        'truck_available' => 'setTruckAvailable',
        'next_main_inspection' => 'setNextMainInspection',
        'next_safety_check' => 'setNextSafetyCheck',
        'next_engine_maintenance' => 'setNextEngineMaintenance',
        'next_tire_change' => 'setNextTireChange',
        'next_brake_pads_change' => 'setNextBrakePadsChange',
        'next_brake_disc_change' => 'setNextBrakeDiscChange',
        'has_wishbone_defect' => 'setHasWishboneDefect',
        'has_stabilizer_defect' => 'setHasStabilizerDefect',
        'has_oszilation_damper_defect' => 'setHasOszilationDamperDefect',
        'has_engine_malfunction' => 'setHasEngineMalfunction',
        'has_transmission_damage' => 'setHasTransmissionDamage',
        'has_saddle_plate_damage' => 'setHasSaddlePlateDamage',
        'has_apu_damage' => 'setHasApuDamage',
        'has_alternator_damage' => 'setHasAlternatorDamage',
        'has_stone_chip' => 'setHasStoneChip',
        'current_task_id' => 'setCurrentTaskId',
        'needed_maintenance_jobs' => 'setNeededMaintenanceJobs',
        'image_url' => 'setImageUrl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'type' => 'getType',
        'branch' => 'getBranch',
        'license_plate' => 'getLicensePlate',
        'user' => 'getUser',
        'driven_km' => 'getDrivenKm',
        'last_city' => 'getLastCity',
        'last_transfer' => 'getLastTransfer',
        'free_usage_allowed' => 'getFreeUsageAllowed',
        'is_parked' => 'getIsParked',
        'truck_available' => 'getTruckAvailable',
        'next_main_inspection' => 'getNextMainInspection',
        'next_safety_check' => 'getNextSafetyCheck',
        'next_engine_maintenance' => 'getNextEngineMaintenance',
        'next_tire_change' => 'getNextTireChange',
        'next_brake_pads_change' => 'getNextBrakePadsChange',
        'next_brake_disc_change' => 'getNextBrakeDiscChange',
        'has_wishbone_defect' => 'getHasWishboneDefect',
        'has_stabilizer_defect' => 'getHasStabilizerDefect',
        'has_oszilation_damper_defect' => 'getHasOszilationDamperDefect',
        'has_engine_malfunction' => 'getHasEngineMalfunction',
        'has_transmission_damage' => 'getHasTransmissionDamage',
        'has_saddle_plate_damage' => 'getHasSaddlePlateDamage',
        'has_apu_damage' => 'getHasApuDamage',
        'has_alternator_damage' => 'getHasAlternatorDamage',
        'has_stone_chip' => 'getHasStoneChip',
        'current_task_id' => 'getCurrentTaskId',
        'needed_maintenance_jobs' => 'getNeededMaintenanceJobs',
        'image_url' => 'getImageUrl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('branch', $data ?? [], null);
        $this->setIfExists('license_plate', $data ?? [], null);
        $this->setIfExists('user', $data ?? [], null);
        $this->setIfExists('driven_km', $data ?? [], null);
        $this->setIfExists('last_city', $data ?? [], null);
        $this->setIfExists('last_transfer', $data ?? [], null);
        $this->setIfExists('free_usage_allowed', $data ?? [], null);
        $this->setIfExists('is_parked', $data ?? [], null);
        $this->setIfExists('truck_available', $data ?? [], null);
        $this->setIfExists('next_main_inspection', $data ?? [], null);
        $this->setIfExists('next_safety_check', $data ?? [], null);
        $this->setIfExists('next_engine_maintenance', $data ?? [], null);
        $this->setIfExists('next_tire_change', $data ?? [], null);
        $this->setIfExists('next_brake_pads_change', $data ?? [], null);
        $this->setIfExists('next_brake_disc_change', $data ?? [], null);
        $this->setIfExists('has_wishbone_defect', $data ?? [], null);
        $this->setIfExists('has_stabilizer_defect', $data ?? [], null);
        $this->setIfExists('has_oszilation_damper_defect', $data ?? [], null);
        $this->setIfExists('has_engine_malfunction', $data ?? [], null);
        $this->setIfExists('has_transmission_damage', $data ?? [], null);
        $this->setIfExists('has_saddle_plate_damage', $data ?? [], null);
        $this->setIfExists('has_apu_damage', $data ?? [], null);
        $this->setIfExists('has_alternator_damage', $data ?? [], null);
        $this->setIfExists('has_stone_chip', $data ?? [], null);
        $this->setIfExists('current_task_id', $data ?? [], null);
        $this->setIfExists('needed_maintenance_jobs', $data ?? [], null);
        $this->setIfExists('image_url', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        if ($this->container['branch'] === null) {
            $invalidProperties[] = "'branch' can't be null";
        }
        if ($this->container['license_plate'] === null) {
            $invalidProperties[] = "'license_plate' can't be null";
        }
        if ($this->container['user'] === null) {
            $invalidProperties[] = "'user' can't be null";
        }
        if ($this->container['driven_km'] === null) {
            $invalidProperties[] = "'driven_km' can't be null";
        }
        if ($this->container['last_city'] === null) {
            $invalidProperties[] = "'last_city' can't be null";
        }
        if ($this->container['last_transfer'] === null) {
            $invalidProperties[] = "'last_transfer' can't be null";
        }
        if ($this->container['free_usage_allowed'] === null) {
            $invalidProperties[] = "'free_usage_allowed' can't be null";
        }
        if ($this->container['is_parked'] === null) {
            $invalidProperties[] = "'is_parked' can't be null";
        }
        if ($this->container['truck_available'] === null) {
            $invalidProperties[] = "'truck_available' can't be null";
        }
        if ($this->container['next_main_inspection'] === null) {
            $invalidProperties[] = "'next_main_inspection' can't be null";
        }
        if ($this->container['next_safety_check'] === null) {
            $invalidProperties[] = "'next_safety_check' can't be null";
        }
        if ($this->container['next_engine_maintenance'] === null) {
            $invalidProperties[] = "'next_engine_maintenance' can't be null";
        }
        if ($this->container['next_tire_change'] === null) {
            $invalidProperties[] = "'next_tire_change' can't be null";
        }
        if ($this->container['next_brake_pads_change'] === null) {
            $invalidProperties[] = "'next_brake_pads_change' can't be null";
        }
        if ($this->container['next_brake_disc_change'] === null) {
            $invalidProperties[] = "'next_brake_disc_change' can't be null";
        }
        if ($this->container['has_wishbone_defect'] === null) {
            $invalidProperties[] = "'has_wishbone_defect' can't be null";
        }
        if ($this->container['has_stabilizer_defect'] === null) {
            $invalidProperties[] = "'has_stabilizer_defect' can't be null";
        }
        if ($this->container['has_oszilation_damper_defect'] === null) {
            $invalidProperties[] = "'has_oszilation_damper_defect' can't be null";
        }
        if ($this->container['has_engine_malfunction'] === null) {
            $invalidProperties[] = "'has_engine_malfunction' can't be null";
        }
        if ($this->container['has_transmission_damage'] === null) {
            $invalidProperties[] = "'has_transmission_damage' can't be null";
        }
        if ($this->container['has_saddle_plate_damage'] === null) {
            $invalidProperties[] = "'has_saddle_plate_damage' can't be null";
        }
        if ($this->container['has_apu_damage'] === null) {
            $invalidProperties[] = "'has_apu_damage' can't be null";
        }
        if ($this->container['has_alternator_damage'] === null) {
            $invalidProperties[] = "'has_alternator_damage' can't be null";
        }
        if ($this->container['has_stone_chip'] === null) {
            $invalidProperties[] = "'has_stone_chip' can't be null";
        }
        if ($this->container['current_task_id'] === null) {
            $invalidProperties[] = "'current_task_id' can't be null";
        }
        if ($this->container['needed_maintenance_jobs'] === null) {
            $invalidProperties[] = "'needed_maintenance_jobs' can't be null";
        }
        if ($this->container['image_url'] === null) {
            $invalidProperties[] = "'image_url' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets type
     *
     * @return \OpenAPI\Client\Model\FPHSpedVAPIObjectsSpeditionsTruckType
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \OpenAPI\Client\Model\FPHSpedVAPIObjectsSpeditionsTruckType $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            array_push($this->openAPINullablesSetToNull, 'type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets branch
     *
     * @return \OpenAPI\Client\Model\FPHSpedVAPIObjectsSpeditionsOwnedBranch
     */
    public function getBranch()
    {
        return $this->container['branch'];
    }

    /**
     * Sets branch
     *
     * @param \OpenAPI\Client\Model\FPHSpedVAPIObjectsSpeditionsOwnedBranch $branch branch
     *
     * @return self
     */
    public function setBranch($branch)
    {
        if (is_null($branch)) {
            array_push($this->openAPINullablesSetToNull, 'branch');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('branch', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['branch'] = $branch;

        return $this;
    }

    /**
     * Gets license_plate
     *
     * @return string
     */
    public function getLicensePlate()
    {
        return $this->container['license_plate'];
    }

    /**
     * Sets license_plate
     *
     * @param string $license_plate license_plate
     *
     * @return self
     */
    public function setLicensePlate($license_plate)
    {
        if (is_null($license_plate)) {
            array_push($this->openAPINullablesSetToNull, 'license_plate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('license_plate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['license_plate'] = $license_plate;

        return $this;
    }

    /**
     * Gets user
     *
     * @return \OpenAPI\Client\Model\FPHSpedVAPIObjectsUsersUser
     */
    public function getUser()
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     *
     * @param \OpenAPI\Client\Model\FPHSpedVAPIObjectsUsersUser $user user
     *
     * @return self
     */
    public function setUser($user)
    {
        if (is_null($user)) {
            array_push($this->openAPINullablesSetToNull, 'user');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('user', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['user'] = $user;

        return $this;
    }

    /**
     * Gets driven_km
     *
     * @return int
     */
    public function getDrivenKm()
    {
        return $this->container['driven_km'];
    }

    /**
     * Sets driven_km
     *
     * @param int $driven_km driven_km
     *
     * @return self
     */
    public function setDrivenKm($driven_km)
    {
        if (is_null($driven_km)) {
            throw new \InvalidArgumentException('non-nullable driven_km cannot be null');
        }
        $this->container['driven_km'] = $driven_km;

        return $this;
    }

    /**
     * Gets last_city
     *
     * @return \OpenAPI\Client\Model\FPHSpedVAPIObjectsMapsCity
     */
    public function getLastCity()
    {
        return $this->container['last_city'];
    }

    /**
     * Sets last_city
     *
     * @param \OpenAPI\Client\Model\FPHSpedVAPIObjectsMapsCity $last_city last_city
     *
     * @return self
     */
    public function setLastCity($last_city)
    {
        if (is_null($last_city)) {
            array_push($this->openAPINullablesSetToNull, 'last_city');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('last_city', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['last_city'] = $last_city;

        return $this;
    }

    /**
     * Gets last_transfer
     *
     * @return \DateTime
     */
    public function getLastTransfer()
    {
        return $this->container['last_transfer'];
    }

    /**
     * Sets last_transfer
     *
     * @param \DateTime $last_transfer last_transfer
     *
     * @return self
     */
    public function setLastTransfer($last_transfer)
    {
        if (is_null($last_transfer)) {
            throw new \InvalidArgumentException('non-nullable last_transfer cannot be null');
        }
        $this->container['last_transfer'] = $last_transfer;

        return $this;
    }

    /**
     * Gets free_usage_allowed
     *
     * @return bool
     */
    public function getFreeUsageAllowed()
    {
        return $this->container['free_usage_allowed'];
    }

    /**
     * Sets free_usage_allowed
     *
     * @param bool $free_usage_allowed free_usage_allowed
     *
     * @return self
     */
    public function setFreeUsageAllowed($free_usage_allowed)
    {
        if (is_null($free_usage_allowed)) {
            throw new \InvalidArgumentException('non-nullable free_usage_allowed cannot be null');
        }
        $this->container['free_usage_allowed'] = $free_usage_allowed;

        return $this;
    }

    /**
     * Gets is_parked
     *
     * @return bool
     */
    public function getIsParked()
    {
        return $this->container['is_parked'];
    }

    /**
     * Sets is_parked
     *
     * @param bool $is_parked is_parked
     *
     * @return self
     */
    public function setIsParked($is_parked)
    {
        if (is_null($is_parked)) {
            throw new \InvalidArgumentException('non-nullable is_parked cannot be null');
        }
        $this->container['is_parked'] = $is_parked;

        return $this;
    }

    /**
     * Gets truck_available
     *
     * @return \DateTime
     */
    public function getTruckAvailable()
    {
        return $this->container['truck_available'];
    }

    /**
     * Sets truck_available
     *
     * @param \DateTime $truck_available truck_available
     *
     * @return self
     */
    public function setTruckAvailable($truck_available)
    {
        if (is_null($truck_available)) {
            throw new \InvalidArgumentException('non-nullable truck_available cannot be null');
        }
        $this->container['truck_available'] = $truck_available;

        return $this;
    }

    /**
     * Gets next_main_inspection
     *
     * @return \DateTime
     */
    public function getNextMainInspection()
    {
        return $this->container['next_main_inspection'];
    }

    /**
     * Sets next_main_inspection
     *
     * @param \DateTime $next_main_inspection next_main_inspection
     *
     * @return self
     */
    public function setNextMainInspection($next_main_inspection)
    {
        if (is_null($next_main_inspection)) {
            throw new \InvalidArgumentException('non-nullable next_main_inspection cannot be null');
        }
        $this->container['next_main_inspection'] = $next_main_inspection;

        return $this;
    }

    /**
     * Gets next_safety_check
     *
     * @return \DateTime
     */
    public function getNextSafetyCheck()
    {
        return $this->container['next_safety_check'];
    }

    /**
     * Sets next_safety_check
     *
     * @param \DateTime $next_safety_check next_safety_check
     *
     * @return self
     */
    public function setNextSafetyCheck($next_safety_check)
    {
        if (is_null($next_safety_check)) {
            throw new \InvalidArgumentException('non-nullable next_safety_check cannot be null');
        }
        $this->container['next_safety_check'] = $next_safety_check;

        return $this;
    }

    /**
     * Gets next_engine_maintenance
     *
     * @return int
     */
    public function getNextEngineMaintenance()
    {
        return $this->container['next_engine_maintenance'];
    }

    /**
     * Sets next_engine_maintenance
     *
     * @param int $next_engine_maintenance next_engine_maintenance
     *
     * @return self
     */
    public function setNextEngineMaintenance($next_engine_maintenance)
    {
        if (is_null($next_engine_maintenance)) {
            throw new \InvalidArgumentException('non-nullable next_engine_maintenance cannot be null');
        }
        $this->container['next_engine_maintenance'] = $next_engine_maintenance;

        return $this;
    }

    /**
     * Gets next_tire_change
     *
     * @return int
     */
    public function getNextTireChange()
    {
        return $this->container['next_tire_change'];
    }

    /**
     * Sets next_tire_change
     *
     * @param int $next_tire_change next_tire_change
     *
     * @return self
     */
    public function setNextTireChange($next_tire_change)
    {
        if (is_null($next_tire_change)) {
            throw new \InvalidArgumentException('non-nullable next_tire_change cannot be null');
        }
        $this->container['next_tire_change'] = $next_tire_change;

        return $this;
    }

    /**
     * Gets next_brake_pads_change
     *
     * @return int
     */
    public function getNextBrakePadsChange()
    {
        return $this->container['next_brake_pads_change'];
    }

    /**
     * Sets next_brake_pads_change
     *
     * @param int $next_brake_pads_change next_brake_pads_change
     *
     * @return self
     */
    public function setNextBrakePadsChange($next_brake_pads_change)
    {
        if (is_null($next_brake_pads_change)) {
            throw new \InvalidArgumentException('non-nullable next_brake_pads_change cannot be null');
        }
        $this->container['next_brake_pads_change'] = $next_brake_pads_change;

        return $this;
    }

    /**
     * Gets next_brake_disc_change
     *
     * @return int
     */
    public function getNextBrakeDiscChange()
    {
        return $this->container['next_brake_disc_change'];
    }

    /**
     * Sets next_brake_disc_change
     *
     * @param int $next_brake_disc_change next_brake_disc_change
     *
     * @return self
     */
    public function setNextBrakeDiscChange($next_brake_disc_change)
    {
        if (is_null($next_brake_disc_change)) {
            throw new \InvalidArgumentException('non-nullable next_brake_disc_change cannot be null');
        }
        $this->container['next_brake_disc_change'] = $next_brake_disc_change;

        return $this;
    }

    /**
     * Gets has_wishbone_defect
     *
     * @return bool
     */
    public function getHasWishboneDefect()
    {
        return $this->container['has_wishbone_defect'];
    }

    /**
     * Sets has_wishbone_defect
     *
     * @param bool $has_wishbone_defect has_wishbone_defect
     *
     * @return self
     */
    public function setHasWishboneDefect($has_wishbone_defect)
    {
        if (is_null($has_wishbone_defect)) {
            throw new \InvalidArgumentException('non-nullable has_wishbone_defect cannot be null');
        }
        $this->container['has_wishbone_defect'] = $has_wishbone_defect;

        return $this;
    }

    /**
     * Gets has_stabilizer_defect
     *
     * @return bool
     */
    public function getHasStabilizerDefect()
    {
        return $this->container['has_stabilizer_defect'];
    }

    /**
     * Sets has_stabilizer_defect
     *
     * @param bool $has_stabilizer_defect has_stabilizer_defect
     *
     * @return self
     */
    public function setHasStabilizerDefect($has_stabilizer_defect)
    {
        if (is_null($has_stabilizer_defect)) {
            throw new \InvalidArgumentException('non-nullable has_stabilizer_defect cannot be null');
        }
        $this->container['has_stabilizer_defect'] = $has_stabilizer_defect;

        return $this;
    }

    /**
     * Gets has_oszilation_damper_defect
     *
     * @return bool
     */
    public function getHasOszilationDamperDefect()
    {
        return $this->container['has_oszilation_damper_defect'];
    }

    /**
     * Sets has_oszilation_damper_defect
     *
     * @param bool $has_oszilation_damper_defect has_oszilation_damper_defect
     *
     * @return self
     */
    public function setHasOszilationDamperDefect($has_oszilation_damper_defect)
    {
        if (is_null($has_oszilation_damper_defect)) {
            throw new \InvalidArgumentException('non-nullable has_oszilation_damper_defect cannot be null');
        }
        $this->container['has_oszilation_damper_defect'] = $has_oszilation_damper_defect;

        return $this;
    }

    /**
     * Gets has_engine_malfunction
     *
     * @return bool
     */
    public function getHasEngineMalfunction()
    {
        return $this->container['has_engine_malfunction'];
    }

    /**
     * Sets has_engine_malfunction
     *
     * @param bool $has_engine_malfunction has_engine_malfunction
     *
     * @return self
     */
    public function setHasEngineMalfunction($has_engine_malfunction)
    {
        if (is_null($has_engine_malfunction)) {
            throw new \InvalidArgumentException('non-nullable has_engine_malfunction cannot be null');
        }
        $this->container['has_engine_malfunction'] = $has_engine_malfunction;

        return $this;
    }

    /**
     * Gets has_transmission_damage
     *
     * @return bool
     */
    public function getHasTransmissionDamage()
    {
        return $this->container['has_transmission_damage'];
    }

    /**
     * Sets has_transmission_damage
     *
     * @param bool $has_transmission_damage has_transmission_damage
     *
     * @return self
     */
    public function setHasTransmissionDamage($has_transmission_damage)
    {
        if (is_null($has_transmission_damage)) {
            throw new \InvalidArgumentException('non-nullable has_transmission_damage cannot be null');
        }
        $this->container['has_transmission_damage'] = $has_transmission_damage;

        return $this;
    }

    /**
     * Gets has_saddle_plate_damage
     *
     * @return bool
     */
    public function getHasSaddlePlateDamage()
    {
        return $this->container['has_saddle_plate_damage'];
    }

    /**
     * Sets has_saddle_plate_damage
     *
     * @param bool $has_saddle_plate_damage has_saddle_plate_damage
     *
     * @return self
     */
    public function setHasSaddlePlateDamage($has_saddle_plate_damage)
    {
        if (is_null($has_saddle_plate_damage)) {
            throw new \InvalidArgumentException('non-nullable has_saddle_plate_damage cannot be null');
        }
        $this->container['has_saddle_plate_damage'] = $has_saddle_plate_damage;

        return $this;
    }

    /**
     * Gets has_apu_damage
     *
     * @return bool
     */
    public function getHasApuDamage()
    {
        return $this->container['has_apu_damage'];
    }

    /**
     * Sets has_apu_damage
     *
     * @param bool $has_apu_damage has_apu_damage
     *
     * @return self
     */
    public function setHasApuDamage($has_apu_damage)
    {
        if (is_null($has_apu_damage)) {
            throw new \InvalidArgumentException('non-nullable has_apu_damage cannot be null');
        }
        $this->container['has_apu_damage'] = $has_apu_damage;

        return $this;
    }

    /**
     * Gets has_alternator_damage
     *
     * @return bool
     */
    public function getHasAlternatorDamage()
    {
        return $this->container['has_alternator_damage'];
    }

    /**
     * Sets has_alternator_damage
     *
     * @param bool $has_alternator_damage has_alternator_damage
     *
     * @return self
     */
    public function setHasAlternatorDamage($has_alternator_damage)
    {
        if (is_null($has_alternator_damage)) {
            throw new \InvalidArgumentException('non-nullable has_alternator_damage cannot be null');
        }
        $this->container['has_alternator_damage'] = $has_alternator_damage;

        return $this;
    }

    /**
     * Gets has_stone_chip
     *
     * @return bool
     */
    public function getHasStoneChip()
    {
        return $this->container['has_stone_chip'];
    }

    /**
     * Sets has_stone_chip
     *
     * @param bool $has_stone_chip has_stone_chip
     *
     * @return self
     */
    public function setHasStoneChip($has_stone_chip)
    {
        if (is_null($has_stone_chip)) {
            throw new \InvalidArgumentException('non-nullable has_stone_chip cannot be null');
        }
        $this->container['has_stone_chip'] = $has_stone_chip;

        return $this;
    }

    /**
     * Gets current_task_id
     *
     * @return int
     */
    public function getCurrentTaskId()
    {
        return $this->container['current_task_id'];
    }

    /**
     * Sets current_task_id
     *
     * @param int $current_task_id current_task_id
     *
     * @return self
     */
    public function setCurrentTaskId($current_task_id)
    {
        if (is_null($current_task_id)) {
            throw new \InvalidArgumentException('non-nullable current_task_id cannot be null');
        }
        $this->container['current_task_id'] = $current_task_id;

        return $this;
    }

    /**
     * Gets needed_maintenance_jobs
     *
     * @return \OpenAPI\Client\Model\FPHSpedVAPIObjectsSpeditionsNeededTruckMaintenance[]
     */
    public function getNeededMaintenanceJobs()
    {
        return $this->container['needed_maintenance_jobs'];
    }

    /**
     * Sets needed_maintenance_jobs
     *
     * @param \OpenAPI\Client\Model\FPHSpedVAPIObjectsSpeditionsNeededTruckMaintenance[] $needed_maintenance_jobs needed_maintenance_jobs
     *
     * @return self
     */
    public function setNeededMaintenanceJobs($needed_maintenance_jobs)
    {
        if (is_null($needed_maintenance_jobs)) {
            array_push($this->openAPINullablesSetToNull, 'needed_maintenance_jobs');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('needed_maintenance_jobs', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['needed_maintenance_jobs'] = $needed_maintenance_jobs;

        return $this;
    }

    /**
     * Gets image_url
     *
     * @return string
     */
    public function getImageUrl()
    {
        return $this->container['image_url'];
    }

    /**
     * Sets image_url
     *
     * @param string $image_url image_url
     *
     * @return self
     */
    public function setImageUrl($image_url)
    {
        if (is_null($image_url)) {
            array_push($this->openAPINullablesSetToNull, 'image_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('image_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['image_url'] = $image_url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



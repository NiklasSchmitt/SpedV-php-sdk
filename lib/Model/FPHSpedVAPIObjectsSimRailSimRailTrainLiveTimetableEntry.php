<?php
/**
 * FPHSpedVAPIObjectsSimRailSimRailTrainLiveTimetableEntry
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SpedV API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * FPHSpedVAPIObjectsSimRailSimRailTrainLiveTimetableEntry Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class FPHSpedVAPIObjectsSimRailSimRailTrainLiveTimetableEntry implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'FPH.SpedV.API.Objects.SimRail.SimRailTrainLiveTimetableEntry';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'station' => '\OpenAPI\Client\Model\FPHSpedVAPIObjectsSimRailSimRailStation',
        'scheduled_arrival' => 'string',
        'scheduled_departure' => 'string',
        'platform' => 'string',
        'track' => 'int',
        'stop_type' => 'string',
        'line' => 'int',
        'km' => 'float',
        'max_speed' => 'int',
        'real_arrival' => 'string',
        'real_departure' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'station' => null,
        'scheduled_arrival' => 'time-span',
        'scheduled_departure' => 'time-span',
        'platform' => null,
        'track' => 'int32',
        'stop_type' => null,
        'line' => 'int32',
        'km' => 'double',
        'max_speed' => 'int32',
        'real_arrival' => 'time-span',
        'real_departure' => 'time-span'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'station' => true,
        'scheduled_arrival' => false,
        'scheduled_departure' => false,
        'platform' => true,
        'track' => true,
        'stop_type' => true,
        'line' => false,
        'km' => false,
        'max_speed' => false,
        'real_arrival' => true,
        'real_departure' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'station' => 'station',
        'scheduled_arrival' => 'scheduledArrival',
        'scheduled_departure' => 'scheduledDeparture',
        'platform' => 'platform',
        'track' => 'track',
        'stop_type' => 'stopType',
        'line' => 'line',
        'km' => 'km',
        'max_speed' => 'maxSpeed',
        'real_arrival' => 'realArrival',
        'real_departure' => 'realDeparture'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'station' => 'setStation',
        'scheduled_arrival' => 'setScheduledArrival',
        'scheduled_departure' => 'setScheduledDeparture',
        'platform' => 'setPlatform',
        'track' => 'setTrack',
        'stop_type' => 'setStopType',
        'line' => 'setLine',
        'km' => 'setKm',
        'max_speed' => 'setMaxSpeed',
        'real_arrival' => 'setRealArrival',
        'real_departure' => 'setRealDeparture'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'station' => 'getStation',
        'scheduled_arrival' => 'getScheduledArrival',
        'scheduled_departure' => 'getScheduledDeparture',
        'platform' => 'getPlatform',
        'track' => 'getTrack',
        'stop_type' => 'getStopType',
        'line' => 'getLine',
        'km' => 'getKm',
        'max_speed' => 'getMaxSpeed',
        'real_arrival' => 'getRealArrival',
        'real_departure' => 'getRealDeparture'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('station', $data ?? [], null);
        $this->setIfExists('scheduled_arrival', $data ?? [], null);
        $this->setIfExists('scheduled_departure', $data ?? [], null);
        $this->setIfExists('platform', $data ?? [], null);
        $this->setIfExists('track', $data ?? [], null);
        $this->setIfExists('stop_type', $data ?? [], null);
        $this->setIfExists('line', $data ?? [], null);
        $this->setIfExists('km', $data ?? [], null);
        $this->setIfExists('max_speed', $data ?? [], null);
        $this->setIfExists('real_arrival', $data ?? [], null);
        $this->setIfExists('real_departure', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['station'] === null) {
            $invalidProperties[] = "'station' can't be null";
        }
        if ($this->container['scheduled_arrival'] === null) {
            $invalidProperties[] = "'scheduled_arrival' can't be null";
        }
        if ($this->container['scheduled_departure'] === null) {
            $invalidProperties[] = "'scheduled_departure' can't be null";
        }
        if ($this->container['platform'] === null) {
            $invalidProperties[] = "'platform' can't be null";
        }
        if ($this->container['track'] === null) {
            $invalidProperties[] = "'track' can't be null";
        }
        if ($this->container['stop_type'] === null) {
            $invalidProperties[] = "'stop_type' can't be null";
        }
        if ($this->container['line'] === null) {
            $invalidProperties[] = "'line' can't be null";
        }
        if ($this->container['km'] === null) {
            $invalidProperties[] = "'km' can't be null";
        }
        if ($this->container['max_speed'] === null) {
            $invalidProperties[] = "'max_speed' can't be null";
        }
        if ($this->container['real_arrival'] === null) {
            $invalidProperties[] = "'real_arrival' can't be null";
        }
        if ($this->container['real_departure'] === null) {
            $invalidProperties[] = "'real_departure' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets station
     *
     * @return \OpenAPI\Client\Model\FPHSpedVAPIObjectsSimRailSimRailStation
     */
    public function getStation()
    {
        return $this->container['station'];
    }

    /**
     * Sets station
     *
     * @param \OpenAPI\Client\Model\FPHSpedVAPIObjectsSimRailSimRailStation $station station
     *
     * @return self
     */
    public function setStation($station)
    {
        if (is_null($station)) {
            array_push($this->openAPINullablesSetToNull, 'station');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('station', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['station'] = $station;

        return $this;
    }

    /**
     * Gets scheduled_arrival
     *
     * @return string
     */
    public function getScheduledArrival()
    {
        return $this->container['scheduled_arrival'];
    }

    /**
     * Sets scheduled_arrival
     *
     * @param string $scheduled_arrival scheduled_arrival
     *
     * @return self
     */
    public function setScheduledArrival($scheduled_arrival)
    {
        if (is_null($scheduled_arrival)) {
            throw new \InvalidArgumentException('non-nullable scheduled_arrival cannot be null');
        }
        $this->container['scheduled_arrival'] = $scheduled_arrival;

        return $this;
    }

    /**
     * Gets scheduled_departure
     *
     * @return string
     */
    public function getScheduledDeparture()
    {
        return $this->container['scheduled_departure'];
    }

    /**
     * Sets scheduled_departure
     *
     * @param string $scheduled_departure scheduled_departure
     *
     * @return self
     */
    public function setScheduledDeparture($scheduled_departure)
    {
        if (is_null($scheduled_departure)) {
            throw new \InvalidArgumentException('non-nullable scheduled_departure cannot be null');
        }
        $this->container['scheduled_departure'] = $scheduled_departure;

        return $this;
    }

    /**
     * Gets platform
     *
     * @return string
     */
    public function getPlatform()
    {
        return $this->container['platform'];
    }

    /**
     * Sets platform
     *
     * @param string $platform platform
     *
     * @return self
     */
    public function setPlatform($platform)
    {
        if (is_null($platform)) {
            array_push($this->openAPINullablesSetToNull, 'platform');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('platform', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['platform'] = $platform;

        return $this;
    }

    /**
     * Gets track
     *
     * @return int
     */
    public function getTrack()
    {
        return $this->container['track'];
    }

    /**
     * Sets track
     *
     * @param int $track track
     *
     * @return self
     */
    public function setTrack($track)
    {
        if (is_null($track)) {
            array_push($this->openAPINullablesSetToNull, 'track');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('track', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['track'] = $track;

        return $this;
    }

    /**
     * Gets stop_type
     *
     * @return string
     */
    public function getStopType()
    {
        return $this->container['stop_type'];
    }

    /**
     * Sets stop_type
     *
     * @param string $stop_type stop_type
     *
     * @return self
     */
    public function setStopType($stop_type)
    {
        if (is_null($stop_type)) {
            array_push($this->openAPINullablesSetToNull, 'stop_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('stop_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['stop_type'] = $stop_type;

        return $this;
    }

    /**
     * Gets line
     *
     * @return int
     */
    public function getLine()
    {
        return $this->container['line'];
    }

    /**
     * Sets line
     *
     * @param int $line line
     *
     * @return self
     */
    public function setLine($line)
    {
        if (is_null($line)) {
            throw new \InvalidArgumentException('non-nullable line cannot be null');
        }
        $this->container['line'] = $line;

        return $this;
    }

    /**
     * Gets km
     *
     * @return float
     */
    public function getKm()
    {
        return $this->container['km'];
    }

    /**
     * Sets km
     *
     * @param float $km km
     *
     * @return self
     */
    public function setKm($km)
    {
        if (is_null($km)) {
            throw new \InvalidArgumentException('non-nullable km cannot be null');
        }
        $this->container['km'] = $km;

        return $this;
    }

    /**
     * Gets max_speed
     *
     * @return int
     */
    public function getMaxSpeed()
    {
        return $this->container['max_speed'];
    }

    /**
     * Sets max_speed
     *
     * @param int $max_speed max_speed
     *
     * @return self
     */
    public function setMaxSpeed($max_speed)
    {
        if (is_null($max_speed)) {
            throw new \InvalidArgumentException('non-nullable max_speed cannot be null');
        }
        $this->container['max_speed'] = $max_speed;

        return $this;
    }

    /**
     * Gets real_arrival
     *
     * @return string
     */
    public function getRealArrival()
    {
        return $this->container['real_arrival'];
    }

    /**
     * Sets real_arrival
     *
     * @param string $real_arrival real_arrival
     *
     * @return self
     */
    public function setRealArrival($real_arrival)
    {
        if (is_null($real_arrival)) {
            array_push($this->openAPINullablesSetToNull, 'real_arrival');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('real_arrival', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['real_arrival'] = $real_arrival;

        return $this;
    }

    /**
     * Gets real_departure
     *
     * @return string
     */
    public function getRealDeparture()
    {
        return $this->container['real_departure'];
    }

    /**
     * Sets real_departure
     *
     * @param string $real_departure real_departure
     *
     * @return self
     */
    public function setRealDeparture($real_departure)
    {
        if (is_null($real_departure)) {
            array_push($this->openAPINullablesSetToNull, 'real_departure');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('real_departure', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['real_departure'] = $real_departure;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



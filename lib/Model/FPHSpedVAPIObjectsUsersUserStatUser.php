<?php
/**
 * FPHSpedVAPIObjectsUsersUserStatUser
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SpedV API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * FPHSpedVAPIObjectsUsersUserStatUser Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class FPHSpedVAPIObjectsUsersUserStatUser implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'FPH.SpedV.API.Objects.Users.UserStatUser';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'user_object' => '\OpenAPI\Client\Model\FPHSpedVAPIObjectsUsersUser',
        'user' => 'string',
        'last_task_time' => '\DateTime',
        'driven_km' => 'float',
        'income' => 'float',
        'damage' => 'float',
        'tasks' => 'float',
        'fuel' => 'float',
        'fuel_per100_km' => 'float',
        'damage_percent' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'user_object' => null,
        'user' => null,
        'last_task_time' => 'date-time',
        'driven_km' => 'double',
        'income' => 'double',
        'damage' => 'double',
        'tasks' => 'double',
        'fuel' => 'double',
        'fuel_per100_km' => 'double',
        'damage_percent' => 'double'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'user_object' => true,
        'user' => true,
        'last_task_time' => false,
        'driven_km' => false,
        'income' => false,
        'damage' => false,
        'tasks' => false,
        'fuel' => false,
        'fuel_per100_km' => false,
        'damage_percent' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'user_object' => 'userObject',
        'user' => 'user',
        'last_task_time' => 'lastTaskTime',
        'driven_km' => 'drivenKM',
        'income' => 'income',
        'damage' => 'damage',
        'tasks' => 'tasks',
        'fuel' => 'fuel',
        'fuel_per100_km' => 'fuelPer100KM',
        'damage_percent' => 'damagePercent'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'user_object' => 'setUserObject',
        'user' => 'setUser',
        'last_task_time' => 'setLastTaskTime',
        'driven_km' => 'setDrivenKm',
        'income' => 'setIncome',
        'damage' => 'setDamage',
        'tasks' => 'setTasks',
        'fuel' => 'setFuel',
        'fuel_per100_km' => 'setFuelPer100Km',
        'damage_percent' => 'setDamagePercent'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'user_object' => 'getUserObject',
        'user' => 'getUser',
        'last_task_time' => 'getLastTaskTime',
        'driven_km' => 'getDrivenKm',
        'income' => 'getIncome',
        'damage' => 'getDamage',
        'tasks' => 'getTasks',
        'fuel' => 'getFuel',
        'fuel_per100_km' => 'getFuelPer100Km',
        'damage_percent' => 'getDamagePercent'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('user_object', $data ?? [], null);
        $this->setIfExists('user', $data ?? [], null);
        $this->setIfExists('last_task_time', $data ?? [], null);
        $this->setIfExists('driven_km', $data ?? [], null);
        $this->setIfExists('income', $data ?? [], null);
        $this->setIfExists('damage', $data ?? [], null);
        $this->setIfExists('tasks', $data ?? [], null);
        $this->setIfExists('fuel', $data ?? [], null);
        $this->setIfExists('fuel_per100_km', $data ?? [], null);
        $this->setIfExists('damage_percent', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['user_object'] === null) {
            $invalidProperties[] = "'user_object' can't be null";
        }
        if ($this->container['user'] === null) {
            $invalidProperties[] = "'user' can't be null";
        }
        if ($this->container['last_task_time'] === null) {
            $invalidProperties[] = "'last_task_time' can't be null";
        }
        if ($this->container['driven_km'] === null) {
            $invalidProperties[] = "'driven_km' can't be null";
        }
        if ($this->container['income'] === null) {
            $invalidProperties[] = "'income' can't be null";
        }
        if ($this->container['damage'] === null) {
            $invalidProperties[] = "'damage' can't be null";
        }
        if ($this->container['tasks'] === null) {
            $invalidProperties[] = "'tasks' can't be null";
        }
        if ($this->container['fuel'] === null) {
            $invalidProperties[] = "'fuel' can't be null";
        }
        if ($this->container['fuel_per100_km'] === null) {
            $invalidProperties[] = "'fuel_per100_km' can't be null";
        }
        if ($this->container['damage_percent'] === null) {
            $invalidProperties[] = "'damage_percent' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets user_object
     *
     * @return \OpenAPI\Client\Model\FPHSpedVAPIObjectsUsersUser
     */
    public function getUserObject()
    {
        return $this->container['user_object'];
    }

    /**
     * Sets user_object
     *
     * @param \OpenAPI\Client\Model\FPHSpedVAPIObjectsUsersUser $user_object user_object
     *
     * @return self
     */
    public function setUserObject($user_object)
    {
        if (is_null($user_object)) {
            array_push($this->openAPINullablesSetToNull, 'user_object');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('user_object', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['user_object'] = $user_object;

        return $this;
    }

    /**
     * Gets user
     *
     * @return string
     */
    public function getUser()
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     *
     * @param string $user user
     *
     * @return self
     */
    public function setUser($user)
    {
        if (is_null($user)) {
            array_push($this->openAPINullablesSetToNull, 'user');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('user', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['user'] = $user;

        return $this;
    }

    /**
     * Gets last_task_time
     *
     * @return \DateTime
     */
    public function getLastTaskTime()
    {
        return $this->container['last_task_time'];
    }

    /**
     * Sets last_task_time
     *
     * @param \DateTime $last_task_time last_task_time
     *
     * @return self
     */
    public function setLastTaskTime($last_task_time)
    {
        if (is_null($last_task_time)) {
            throw new \InvalidArgumentException('non-nullable last_task_time cannot be null');
        }
        $this->container['last_task_time'] = $last_task_time;

        return $this;
    }

    /**
     * Gets driven_km
     *
     * @return float
     */
    public function getDrivenKm()
    {
        return $this->container['driven_km'];
    }

    /**
     * Sets driven_km
     *
     * @param float $driven_km driven_km
     *
     * @return self
     */
    public function setDrivenKm($driven_km)
    {
        if (is_null($driven_km)) {
            throw new \InvalidArgumentException('non-nullable driven_km cannot be null');
        }
        $this->container['driven_km'] = $driven_km;

        return $this;
    }

    /**
     * Gets income
     *
     * @return float
     */
    public function getIncome()
    {
        return $this->container['income'];
    }

    /**
     * Sets income
     *
     * @param float $income income
     *
     * @return self
     */
    public function setIncome($income)
    {
        if (is_null($income)) {
            throw new \InvalidArgumentException('non-nullable income cannot be null');
        }
        $this->container['income'] = $income;

        return $this;
    }

    /**
     * Gets damage
     *
     * @return float
     */
    public function getDamage()
    {
        return $this->container['damage'];
    }

    /**
     * Sets damage
     *
     * @param float $damage damage
     *
     * @return self
     */
    public function setDamage($damage)
    {
        if (is_null($damage)) {
            throw new \InvalidArgumentException('non-nullable damage cannot be null');
        }
        $this->container['damage'] = $damage;

        return $this;
    }

    /**
     * Gets tasks
     *
     * @return float
     */
    public function getTasks()
    {
        return $this->container['tasks'];
    }

    /**
     * Sets tasks
     *
     * @param float $tasks tasks
     *
     * @return self
     */
    public function setTasks($tasks)
    {
        if (is_null($tasks)) {
            throw new \InvalidArgumentException('non-nullable tasks cannot be null');
        }
        $this->container['tasks'] = $tasks;

        return $this;
    }

    /**
     * Gets fuel
     *
     * @return float
     */
    public function getFuel()
    {
        return $this->container['fuel'];
    }

    /**
     * Sets fuel
     *
     * @param float $fuel fuel
     *
     * @return self
     */
    public function setFuel($fuel)
    {
        if (is_null($fuel)) {
            throw new \InvalidArgumentException('non-nullable fuel cannot be null');
        }
        $this->container['fuel'] = $fuel;

        return $this;
    }

    /**
     * Gets fuel_per100_km
     *
     * @return float
     */
    public function getFuelPer100Km()
    {
        return $this->container['fuel_per100_km'];
    }

    /**
     * Sets fuel_per100_km
     *
     * @param float $fuel_per100_km fuel_per100_km
     *
     * @return self
     */
    public function setFuelPer100Km($fuel_per100_km)
    {
        if (is_null($fuel_per100_km)) {
            throw new \InvalidArgumentException('non-nullable fuel_per100_km cannot be null');
        }
        $this->container['fuel_per100_km'] = $fuel_per100_km;

        return $this;
    }

    /**
     * Gets damage_percent
     *
     * @return float
     */
    public function getDamagePercent()
    {
        return $this->container['damage_percent'];
    }

    /**
     * Sets damage_percent
     *
     * @param float $damage_percent damage_percent
     *
     * @return self
     */
    public function setDamagePercent($damage_percent)
    {
        if (is_null($damage_percent)) {
            throw new \InvalidArgumentException('non-nullable damage_percent cannot be null');
        }
        $this->container['damage_percent'] = $damage_percent;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



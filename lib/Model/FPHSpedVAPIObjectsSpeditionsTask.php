<?php
/**
 * FPHSpedVAPIObjectsSpeditionsTask
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SpedV API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * FPHSpedVAPIObjectsSpeditionsTask Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class FPHSpedVAPIObjectsSpeditionsTask implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'FPH.SpedV.API.Objects.Speditions.Task';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'spedition' => '\OpenAPI\Client\Model\FPHSpedVAPIObjectsSpeditionsSpedition',
        'id' => 'int',
        'visible_id' => 'string',
        'is_deductable' => 'bool',
        'user' => '\OpenAPI\Client\Model\FPHSpedVAPIObjectsUsersUser',
        'maps' => '\OpenAPI\Client\Model\FPHSpedVAPIObjectsMapsMap[]',
        'vis_maps' => 'string',
        'start_city' => '\OpenAPI\Client\Model\FPHSpedVAPIObjectsMapsCity',
        'dest_city' => '\OpenAPI\Client\Model\FPHSpedVAPIObjectsMapsCity',
        'start_company' => '\OpenAPI\Client\Model\FPHSpedVAPIObjectsMapsCompany',
        'dest_company' => '\OpenAPI\Client\Model\FPHSpedVAPIObjectsMapsCompany',
        'freight' => '\OpenAPI\Client\Model\FPHSpedVAPIObjectsMapsFreight',
        'freightweight' => 'int',
        'vis_freight_weight' => 'string',
        'dmg_report' => 'string',
        'value' => 'float',
        'damage' => 'float',
        'damage_percent' => 'float',
        'vis_damage_percent' => 'string',
        'taxes' => 'float',
        'maintenance' => 'float',
        'toll' => 'float',
        'income' => 'float',
        'state' => '\OpenAPI\Client\Model\FPHSpedVAPIEnumsETSTaskState',
        'starttime' => '\DateTime',
        'endtime' => '\DateTime',
        'needed_time' => 'string',
        'ferry' => 'int',
        'ferry_km' => 'int',
        'refuel' => 'int',
        'boni' => 'float',
        'currency' => 'string',
        'currency_symbol' => 'string',
        'truck' => '\OpenAPI\Client\Model\FPHSpedVAPIObjectsSpeditionsTruck',
        'truck_type' => '\OpenAPI\Client\Model\FPHSpedVAPIObjectsSpeditionsTruckType',
        'rented_truck' => 'bool',
        'startkm' => 'int',
        'endkm' => 'int',
        'dist_km' => 'float',
        'dist_mi' => 'float',
        'vis_distance' => 'string',
        'eurokm' => 'float',
        'dollarmi' => 'float',
        'vis_euro_km' => 'string',
        'fuel_used_li' => 'int',
        'fuel_used_gal' => 'float',
        'fuel_refuled_li' => 'int',
        'fuel_refuled_gal' => 'float',
        'fuel_avg100_km' => 'float',
        'fuel_avg_mi_gal' => 'float',
        'vis_fuel_efficiency' => 'string',
        'truck_damage' => 'float',
        'max_velocity_kmh' => 'int',
        'max_velocity_mph' => 'int',
        'avg_velocity_kmh' => 'int',
        'avg_velocity_mph' => 'int',
        'dd_cleaned' => 'bool',
        'cargo_market' => '\OpenAPI\Client\Model\FPHSpedVAPIEnumsCargoMarketType',
        'screenshot_state' => '\OpenAPI\Client\Model\FPHSpedVAPIEnumsScreenshotState',
        'screenshot_checked_by' => '\OpenAPI\Client\Model\FPHSpedVAPIObjectsUsersUser',
        'screenshot_check_date' => '\DateTime',
        'kontor_part' => '\OpenAPI\Client\Model\FPHSpedVAPIObjectsKontorJobPart',
        'user_set_real_eco' => 'bool',
        'is_real_scale' => 'bool',
        'task_positions' => '\OpenAPI\Client\Model\FPHSpedVAPIObjectsSpeditionsTaskPosition[]',
        'current_convoy_info' => '\OpenAPI\Client\Model\FPHSpedVAPIObjectsLiveConvoyInfo',
        'meets_spedition_velocity_requirements' => 'bool',
        'is_ok' => 'bool',
        'is_questionable' => 'bool',
        'is_negative' => 'bool',
        'fail' => 'float',
        'screenshot_url' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'spedition' => null,
        'id' => 'int32',
        'visible_id' => null,
        'is_deductable' => null,
        'user' => null,
        'maps' => null,
        'vis_maps' => null,
        'start_city' => null,
        'dest_city' => null,
        'start_company' => null,
        'dest_company' => null,
        'freight' => null,
        'freightweight' => 'int32',
        'vis_freight_weight' => null,
        'dmg_report' => null,
        'value' => 'double',
        'damage' => 'double',
        'damage_percent' => 'double',
        'vis_damage_percent' => null,
        'taxes' => 'double',
        'maintenance' => 'double',
        'toll' => 'double',
        'income' => 'double',
        'state' => null,
        'starttime' => 'date-time',
        'endtime' => 'date-time',
        'needed_time' => 'time-span',
        'ferry' => 'int32',
        'ferry_km' => 'int32',
        'refuel' => 'int32',
        'boni' => 'double',
        'currency' => null,
        'currency_symbol' => null,
        'truck' => null,
        'truck_type' => null,
        'rented_truck' => null,
        'startkm' => 'int32',
        'endkm' => 'int32',
        'dist_km' => 'double',
        'dist_mi' => 'double',
        'vis_distance' => null,
        'eurokm' => 'double',
        'dollarmi' => 'double',
        'vis_euro_km' => null,
        'fuel_used_li' => 'int32',
        'fuel_used_gal' => 'double',
        'fuel_refuled_li' => 'int32',
        'fuel_refuled_gal' => 'double',
        'fuel_avg100_km' => 'double',
        'fuel_avg_mi_gal' => 'double',
        'vis_fuel_efficiency' => null,
        'truck_damage' => 'double',
        'max_velocity_kmh' => 'int32',
        'max_velocity_mph' => 'int32',
        'avg_velocity_kmh' => 'int32',
        'avg_velocity_mph' => 'int32',
        'dd_cleaned' => null,
        'cargo_market' => null,
        'screenshot_state' => null,
        'screenshot_checked_by' => null,
        'screenshot_check_date' => 'date-time',
        'kontor_part' => null,
        'user_set_real_eco' => null,
        'is_real_scale' => null,
        'task_positions' => null,
        'current_convoy_info' => null,
        'meets_spedition_velocity_requirements' => null,
        'is_ok' => null,
        'is_questionable' => null,
        'is_negative' => null,
        'fail' => 'double',
        'screenshot_url' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'spedition' => true,
        'id' => false,
        'visible_id' => true,
        'is_deductable' => false,
        'user' => true,
        'maps' => true,
        'vis_maps' => true,
        'start_city' => true,
        'dest_city' => true,
        'start_company' => true,
        'dest_company' => true,
        'freight' => true,
        'freightweight' => false,
        'vis_freight_weight' => true,
        'dmg_report' => true,
        'value' => false,
        'damage' => false,
        'damage_percent' => false,
        'vis_damage_percent' => true,
        'taxes' => false,
        'maintenance' => false,
        'toll' => false,
        'income' => false,
        'state' => false,
        'starttime' => false,
        'endtime' => false,
        'needed_time' => false,
        'ferry' => false,
        'ferry_km' => false,
        'refuel' => false,
        'boni' => false,
        'currency' => true,
        'currency_symbol' => true,
        'truck' => true,
        'truck_type' => true,
        'rented_truck' => false,
        'startkm' => false,
        'endkm' => false,
        'dist_km' => false,
        'dist_mi' => false,
        'vis_distance' => true,
        'eurokm' => false,
        'dollarmi' => false,
        'vis_euro_km' => true,
        'fuel_used_li' => false,
        'fuel_used_gal' => false,
        'fuel_refuled_li' => false,
        'fuel_refuled_gal' => false,
        'fuel_avg100_km' => false,
        'fuel_avg_mi_gal' => false,
        'vis_fuel_efficiency' => true,
        'truck_damage' => false,
        'max_velocity_kmh' => false,
        'max_velocity_mph' => false,
        'avg_velocity_kmh' => false,
        'avg_velocity_mph' => false,
        'dd_cleaned' => false,
        'cargo_market' => false,
        'screenshot_state' => false,
        'screenshot_checked_by' => true,
        'screenshot_check_date' => false,
        'kontor_part' => true,
        'user_set_real_eco' => false,
        'is_real_scale' => false,
        'task_positions' => true,
        'current_convoy_info' => true,
        'meets_spedition_velocity_requirements' => false,
        'is_ok' => false,
        'is_questionable' => false,
        'is_negative' => false,
        'fail' => false,
        'screenshot_url' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'spedition' => 'spedition',
        'id' => 'id',
        'visible_id' => 'visibleID',
        'is_deductable' => 'isDeductable',
        'user' => 'user',
        'maps' => 'maps',
        'vis_maps' => 'visMaps',
        'start_city' => 'startCity',
        'dest_city' => 'destCity',
        'start_company' => 'startCompany',
        'dest_company' => 'destCompany',
        'freight' => 'freight',
        'freightweight' => 'freightweight',
        'vis_freight_weight' => 'visFreightWeight',
        'dmg_report' => 'dmgReport',
        'value' => 'value',
        'damage' => 'damage',
        'damage_percent' => 'damagePercent',
        'vis_damage_percent' => 'visDamagePercent',
        'taxes' => 'taxes',
        'maintenance' => 'maintenance',
        'toll' => 'toll',
        'income' => 'income',
        'state' => 'state',
        'starttime' => 'starttime',
        'endtime' => 'endtime',
        'needed_time' => 'neededTime',
        'ferry' => 'ferry',
        'ferry_km' => 'ferryKM',
        'refuel' => 'refuel',
        'boni' => 'boni',
        'currency' => 'currency',
        'currency_symbol' => 'currencySymbol',
        'truck' => 'truck',
        'truck_type' => 'truckType',
        'rented_truck' => 'rentedTruck',
        'startkm' => 'startkm',
        'endkm' => 'endkm',
        'dist_km' => 'distKM',
        'dist_mi' => 'distMI',
        'vis_distance' => 'visDistance',
        'eurokm' => 'eurokm',
        'dollarmi' => 'dollarmi',
        'vis_euro_km' => 'visEuroKM',
        'fuel_used_li' => 'fuelUsedLi',
        'fuel_used_gal' => 'fuelUsedGal',
        'fuel_refuled_li' => 'fuelRefuledLi',
        'fuel_refuled_gal' => 'fuelRefuledGal',
        'fuel_avg100_km' => 'fuelAvg100KM',
        'fuel_avg_mi_gal' => 'fuelAvgMiGal',
        'vis_fuel_efficiency' => 'visFuelEfficiency',
        'truck_damage' => 'truckDamage',
        'max_velocity_kmh' => 'maxVelocityKMH',
        'max_velocity_mph' => 'maxVelocityMPH',
        'avg_velocity_kmh' => 'avgVelocityKMH',
        'avg_velocity_mph' => 'avgVelocityMPH',
        'dd_cleaned' => 'ddCleaned',
        'cargo_market' => 'cargoMarket',
        'screenshot_state' => 'screenshotState',
        'screenshot_checked_by' => 'screenshotCheckedBy',
        'screenshot_check_date' => 'screenshotCheckDate',
        'kontor_part' => 'kontorPart',
        'user_set_real_eco' => 'userSetRealEco',
        'is_real_scale' => 'isRealScale',
        'task_positions' => 'taskPositions',
        'current_convoy_info' => 'currentConvoyInfo',
        'meets_spedition_velocity_requirements' => 'meetsSpeditionVelocityRequirements',
        'is_ok' => 'isOK',
        'is_questionable' => 'isQuestionable',
        'is_negative' => 'isNegative',
        'fail' => 'fail',
        'screenshot_url' => 'screenshotURL'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'spedition' => 'setSpedition',
        'id' => 'setId',
        'visible_id' => 'setVisibleId',
        'is_deductable' => 'setIsDeductable',
        'user' => 'setUser',
        'maps' => 'setMaps',
        'vis_maps' => 'setVisMaps',
        'start_city' => 'setStartCity',
        'dest_city' => 'setDestCity',
        'start_company' => 'setStartCompany',
        'dest_company' => 'setDestCompany',
        'freight' => 'setFreight',
        'freightweight' => 'setFreightweight',
        'vis_freight_weight' => 'setVisFreightWeight',
        'dmg_report' => 'setDmgReport',
        'value' => 'setValue',
        'damage' => 'setDamage',
        'damage_percent' => 'setDamagePercent',
        'vis_damage_percent' => 'setVisDamagePercent',
        'taxes' => 'setTaxes',
        'maintenance' => 'setMaintenance',
        'toll' => 'setToll',
        'income' => 'setIncome',
        'state' => 'setState',
        'starttime' => 'setStarttime',
        'endtime' => 'setEndtime',
        'needed_time' => 'setNeededTime',
        'ferry' => 'setFerry',
        'ferry_km' => 'setFerryKm',
        'refuel' => 'setRefuel',
        'boni' => 'setBoni',
        'currency' => 'setCurrency',
        'currency_symbol' => 'setCurrencySymbol',
        'truck' => 'setTruck',
        'truck_type' => 'setTruckType',
        'rented_truck' => 'setRentedTruck',
        'startkm' => 'setStartkm',
        'endkm' => 'setEndkm',
        'dist_km' => 'setDistKm',
        'dist_mi' => 'setDistMi',
        'vis_distance' => 'setVisDistance',
        'eurokm' => 'setEurokm',
        'dollarmi' => 'setDollarmi',
        'vis_euro_km' => 'setVisEuroKm',
        'fuel_used_li' => 'setFuelUsedLi',
        'fuel_used_gal' => 'setFuelUsedGal',
        'fuel_refuled_li' => 'setFuelRefuledLi',
        'fuel_refuled_gal' => 'setFuelRefuledGal',
        'fuel_avg100_km' => 'setFuelAvg100Km',
        'fuel_avg_mi_gal' => 'setFuelAvgMiGal',
        'vis_fuel_efficiency' => 'setVisFuelEfficiency',
        'truck_damage' => 'setTruckDamage',
        'max_velocity_kmh' => 'setMaxVelocityKmh',
        'max_velocity_mph' => 'setMaxVelocityMph',
        'avg_velocity_kmh' => 'setAvgVelocityKmh',
        'avg_velocity_mph' => 'setAvgVelocityMph',
        'dd_cleaned' => 'setDdCleaned',
        'cargo_market' => 'setCargoMarket',
        'screenshot_state' => 'setScreenshotState',
        'screenshot_checked_by' => 'setScreenshotCheckedBy',
        'screenshot_check_date' => 'setScreenshotCheckDate',
        'kontor_part' => 'setKontorPart',
        'user_set_real_eco' => 'setUserSetRealEco',
        'is_real_scale' => 'setIsRealScale',
        'task_positions' => 'setTaskPositions',
        'current_convoy_info' => 'setCurrentConvoyInfo',
        'meets_spedition_velocity_requirements' => 'setMeetsSpeditionVelocityRequirements',
        'is_ok' => 'setIsOk',
        'is_questionable' => 'setIsQuestionable',
        'is_negative' => 'setIsNegative',
        'fail' => 'setFail',
        'screenshot_url' => 'setScreenshotUrl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'spedition' => 'getSpedition',
        'id' => 'getId',
        'visible_id' => 'getVisibleId',
        'is_deductable' => 'getIsDeductable',
        'user' => 'getUser',
        'maps' => 'getMaps',
        'vis_maps' => 'getVisMaps',
        'start_city' => 'getStartCity',
        'dest_city' => 'getDestCity',
        'start_company' => 'getStartCompany',
        'dest_company' => 'getDestCompany',
        'freight' => 'getFreight',
        'freightweight' => 'getFreightweight',
        'vis_freight_weight' => 'getVisFreightWeight',
        'dmg_report' => 'getDmgReport',
        'value' => 'getValue',
        'damage' => 'getDamage',
        'damage_percent' => 'getDamagePercent',
        'vis_damage_percent' => 'getVisDamagePercent',
        'taxes' => 'getTaxes',
        'maintenance' => 'getMaintenance',
        'toll' => 'getToll',
        'income' => 'getIncome',
        'state' => 'getState',
        'starttime' => 'getStarttime',
        'endtime' => 'getEndtime',
        'needed_time' => 'getNeededTime',
        'ferry' => 'getFerry',
        'ferry_km' => 'getFerryKm',
        'refuel' => 'getRefuel',
        'boni' => 'getBoni',
        'currency' => 'getCurrency',
        'currency_symbol' => 'getCurrencySymbol',
        'truck' => 'getTruck',
        'truck_type' => 'getTruckType',
        'rented_truck' => 'getRentedTruck',
        'startkm' => 'getStartkm',
        'endkm' => 'getEndkm',
        'dist_km' => 'getDistKm',
        'dist_mi' => 'getDistMi',
        'vis_distance' => 'getVisDistance',
        'eurokm' => 'getEurokm',
        'dollarmi' => 'getDollarmi',
        'vis_euro_km' => 'getVisEuroKm',
        'fuel_used_li' => 'getFuelUsedLi',
        'fuel_used_gal' => 'getFuelUsedGal',
        'fuel_refuled_li' => 'getFuelRefuledLi',
        'fuel_refuled_gal' => 'getFuelRefuledGal',
        'fuel_avg100_km' => 'getFuelAvg100Km',
        'fuel_avg_mi_gal' => 'getFuelAvgMiGal',
        'vis_fuel_efficiency' => 'getVisFuelEfficiency',
        'truck_damage' => 'getTruckDamage',
        'max_velocity_kmh' => 'getMaxVelocityKmh',
        'max_velocity_mph' => 'getMaxVelocityMph',
        'avg_velocity_kmh' => 'getAvgVelocityKmh',
        'avg_velocity_mph' => 'getAvgVelocityMph',
        'dd_cleaned' => 'getDdCleaned',
        'cargo_market' => 'getCargoMarket',
        'screenshot_state' => 'getScreenshotState',
        'screenshot_checked_by' => 'getScreenshotCheckedBy',
        'screenshot_check_date' => 'getScreenshotCheckDate',
        'kontor_part' => 'getKontorPart',
        'user_set_real_eco' => 'getUserSetRealEco',
        'is_real_scale' => 'getIsRealScale',
        'task_positions' => 'getTaskPositions',
        'current_convoy_info' => 'getCurrentConvoyInfo',
        'meets_spedition_velocity_requirements' => 'getMeetsSpeditionVelocityRequirements',
        'is_ok' => 'getIsOk',
        'is_questionable' => 'getIsQuestionable',
        'is_negative' => 'getIsNegative',
        'fail' => 'getFail',
        'screenshot_url' => 'getScreenshotUrl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('spedition', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('visible_id', $data ?? [], null);
        $this->setIfExists('is_deductable', $data ?? [], null);
        $this->setIfExists('user', $data ?? [], null);
        $this->setIfExists('maps', $data ?? [], null);
        $this->setIfExists('vis_maps', $data ?? [], null);
        $this->setIfExists('start_city', $data ?? [], null);
        $this->setIfExists('dest_city', $data ?? [], null);
        $this->setIfExists('start_company', $data ?? [], null);
        $this->setIfExists('dest_company', $data ?? [], null);
        $this->setIfExists('freight', $data ?? [], null);
        $this->setIfExists('freightweight', $data ?? [], null);
        $this->setIfExists('vis_freight_weight', $data ?? [], null);
        $this->setIfExists('dmg_report', $data ?? [], null);
        $this->setIfExists('value', $data ?? [], null);
        $this->setIfExists('damage', $data ?? [], null);
        $this->setIfExists('damage_percent', $data ?? [], null);
        $this->setIfExists('vis_damage_percent', $data ?? [], null);
        $this->setIfExists('taxes', $data ?? [], null);
        $this->setIfExists('maintenance', $data ?? [], null);
        $this->setIfExists('toll', $data ?? [], null);
        $this->setIfExists('income', $data ?? [], null);
        $this->setIfExists('state', $data ?? [], null);
        $this->setIfExists('starttime', $data ?? [], null);
        $this->setIfExists('endtime', $data ?? [], null);
        $this->setIfExists('needed_time', $data ?? [], null);
        $this->setIfExists('ferry', $data ?? [], null);
        $this->setIfExists('ferry_km', $data ?? [], null);
        $this->setIfExists('refuel', $data ?? [], null);
        $this->setIfExists('boni', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], null);
        $this->setIfExists('currency_symbol', $data ?? [], null);
        $this->setIfExists('truck', $data ?? [], null);
        $this->setIfExists('truck_type', $data ?? [], null);
        $this->setIfExists('rented_truck', $data ?? [], null);
        $this->setIfExists('startkm', $data ?? [], null);
        $this->setIfExists('endkm', $data ?? [], null);
        $this->setIfExists('dist_km', $data ?? [], null);
        $this->setIfExists('dist_mi', $data ?? [], null);
        $this->setIfExists('vis_distance', $data ?? [], null);
        $this->setIfExists('eurokm', $data ?? [], null);
        $this->setIfExists('dollarmi', $data ?? [], null);
        $this->setIfExists('vis_euro_km', $data ?? [], null);
        $this->setIfExists('fuel_used_li', $data ?? [], null);
        $this->setIfExists('fuel_used_gal', $data ?? [], null);
        $this->setIfExists('fuel_refuled_li', $data ?? [], null);
        $this->setIfExists('fuel_refuled_gal', $data ?? [], null);
        $this->setIfExists('fuel_avg100_km', $data ?? [], null);
        $this->setIfExists('fuel_avg_mi_gal', $data ?? [], null);
        $this->setIfExists('vis_fuel_efficiency', $data ?? [], null);
        $this->setIfExists('truck_damage', $data ?? [], null);
        $this->setIfExists('max_velocity_kmh', $data ?? [], null);
        $this->setIfExists('max_velocity_mph', $data ?? [], null);
        $this->setIfExists('avg_velocity_kmh', $data ?? [], null);
        $this->setIfExists('avg_velocity_mph', $data ?? [], null);
        $this->setIfExists('dd_cleaned', $data ?? [], null);
        $this->setIfExists('cargo_market', $data ?? [], null);
        $this->setIfExists('screenshot_state', $data ?? [], null);
        $this->setIfExists('screenshot_checked_by', $data ?? [], null);
        $this->setIfExists('screenshot_check_date', $data ?? [], null);
        $this->setIfExists('kontor_part', $data ?? [], null);
        $this->setIfExists('user_set_real_eco', $data ?? [], null);
        $this->setIfExists('is_real_scale', $data ?? [], null);
        $this->setIfExists('task_positions', $data ?? [], null);
        $this->setIfExists('current_convoy_info', $data ?? [], null);
        $this->setIfExists('meets_spedition_velocity_requirements', $data ?? [], null);
        $this->setIfExists('is_ok', $data ?? [], null);
        $this->setIfExists('is_questionable', $data ?? [], null);
        $this->setIfExists('is_negative', $data ?? [], null);
        $this->setIfExists('fail', $data ?? [], null);
        $this->setIfExists('screenshot_url', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['spedition'] === null) {
            $invalidProperties[] = "'spedition' can't be null";
        }
        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['visible_id'] === null) {
            $invalidProperties[] = "'visible_id' can't be null";
        }
        if ($this->container['is_deductable'] === null) {
            $invalidProperties[] = "'is_deductable' can't be null";
        }
        if ($this->container['user'] === null) {
            $invalidProperties[] = "'user' can't be null";
        }
        if ($this->container['maps'] === null) {
            $invalidProperties[] = "'maps' can't be null";
        }
        if ($this->container['vis_maps'] === null) {
            $invalidProperties[] = "'vis_maps' can't be null";
        }
        if ($this->container['start_city'] === null) {
            $invalidProperties[] = "'start_city' can't be null";
        }
        if ($this->container['dest_city'] === null) {
            $invalidProperties[] = "'dest_city' can't be null";
        }
        if ($this->container['start_company'] === null) {
            $invalidProperties[] = "'start_company' can't be null";
        }
        if ($this->container['dest_company'] === null) {
            $invalidProperties[] = "'dest_company' can't be null";
        }
        if ($this->container['freight'] === null) {
            $invalidProperties[] = "'freight' can't be null";
        }
        if ($this->container['freightweight'] === null) {
            $invalidProperties[] = "'freightweight' can't be null";
        }
        if ($this->container['vis_freight_weight'] === null) {
            $invalidProperties[] = "'vis_freight_weight' can't be null";
        }
        if ($this->container['dmg_report'] === null) {
            $invalidProperties[] = "'dmg_report' can't be null";
        }
        if ($this->container['value'] === null) {
            $invalidProperties[] = "'value' can't be null";
        }
        if ($this->container['damage'] === null) {
            $invalidProperties[] = "'damage' can't be null";
        }
        if ($this->container['damage_percent'] === null) {
            $invalidProperties[] = "'damage_percent' can't be null";
        }
        if ($this->container['vis_damage_percent'] === null) {
            $invalidProperties[] = "'vis_damage_percent' can't be null";
        }
        if ($this->container['taxes'] === null) {
            $invalidProperties[] = "'taxes' can't be null";
        }
        if ($this->container['maintenance'] === null) {
            $invalidProperties[] = "'maintenance' can't be null";
        }
        if ($this->container['toll'] === null) {
            $invalidProperties[] = "'toll' can't be null";
        }
        if ($this->container['income'] === null) {
            $invalidProperties[] = "'income' can't be null";
        }
        if ($this->container['state'] === null) {
            $invalidProperties[] = "'state' can't be null";
        }
        if ($this->container['starttime'] === null) {
            $invalidProperties[] = "'starttime' can't be null";
        }
        if ($this->container['endtime'] === null) {
            $invalidProperties[] = "'endtime' can't be null";
        }
        if ($this->container['needed_time'] === null) {
            $invalidProperties[] = "'needed_time' can't be null";
        }
        if ($this->container['ferry'] === null) {
            $invalidProperties[] = "'ferry' can't be null";
        }
        if ($this->container['ferry_km'] === null) {
            $invalidProperties[] = "'ferry_km' can't be null";
        }
        if ($this->container['refuel'] === null) {
            $invalidProperties[] = "'refuel' can't be null";
        }
        if ($this->container['boni'] === null) {
            $invalidProperties[] = "'boni' can't be null";
        }
        if ($this->container['currency'] === null) {
            $invalidProperties[] = "'currency' can't be null";
        }
        if ($this->container['currency_symbol'] === null) {
            $invalidProperties[] = "'currency_symbol' can't be null";
        }
        if ($this->container['truck'] === null) {
            $invalidProperties[] = "'truck' can't be null";
        }
        if ($this->container['truck_type'] === null) {
            $invalidProperties[] = "'truck_type' can't be null";
        }
        if ($this->container['rented_truck'] === null) {
            $invalidProperties[] = "'rented_truck' can't be null";
        }
        if ($this->container['startkm'] === null) {
            $invalidProperties[] = "'startkm' can't be null";
        }
        if ($this->container['endkm'] === null) {
            $invalidProperties[] = "'endkm' can't be null";
        }
        if ($this->container['dist_km'] === null) {
            $invalidProperties[] = "'dist_km' can't be null";
        }
        if ($this->container['dist_mi'] === null) {
            $invalidProperties[] = "'dist_mi' can't be null";
        }
        if ($this->container['vis_distance'] === null) {
            $invalidProperties[] = "'vis_distance' can't be null";
        }
        if ($this->container['eurokm'] === null) {
            $invalidProperties[] = "'eurokm' can't be null";
        }
        if ($this->container['dollarmi'] === null) {
            $invalidProperties[] = "'dollarmi' can't be null";
        }
        if ($this->container['vis_euro_km'] === null) {
            $invalidProperties[] = "'vis_euro_km' can't be null";
        }
        if ($this->container['fuel_used_li'] === null) {
            $invalidProperties[] = "'fuel_used_li' can't be null";
        }
        if ($this->container['fuel_used_gal'] === null) {
            $invalidProperties[] = "'fuel_used_gal' can't be null";
        }
        if ($this->container['fuel_refuled_li'] === null) {
            $invalidProperties[] = "'fuel_refuled_li' can't be null";
        }
        if ($this->container['fuel_refuled_gal'] === null) {
            $invalidProperties[] = "'fuel_refuled_gal' can't be null";
        }
        if ($this->container['fuel_avg100_km'] === null) {
            $invalidProperties[] = "'fuel_avg100_km' can't be null";
        }
        if ($this->container['fuel_avg_mi_gal'] === null) {
            $invalidProperties[] = "'fuel_avg_mi_gal' can't be null";
        }
        if ($this->container['vis_fuel_efficiency'] === null) {
            $invalidProperties[] = "'vis_fuel_efficiency' can't be null";
        }
        if ($this->container['truck_damage'] === null) {
            $invalidProperties[] = "'truck_damage' can't be null";
        }
        if ($this->container['max_velocity_kmh'] === null) {
            $invalidProperties[] = "'max_velocity_kmh' can't be null";
        }
        if ($this->container['max_velocity_mph'] === null) {
            $invalidProperties[] = "'max_velocity_mph' can't be null";
        }
        if ($this->container['avg_velocity_kmh'] === null) {
            $invalidProperties[] = "'avg_velocity_kmh' can't be null";
        }
        if ($this->container['avg_velocity_mph'] === null) {
            $invalidProperties[] = "'avg_velocity_mph' can't be null";
        }
        if ($this->container['dd_cleaned'] === null) {
            $invalidProperties[] = "'dd_cleaned' can't be null";
        }
        if ($this->container['cargo_market'] === null) {
            $invalidProperties[] = "'cargo_market' can't be null";
        }
        if ($this->container['screenshot_state'] === null) {
            $invalidProperties[] = "'screenshot_state' can't be null";
        }
        if ($this->container['screenshot_checked_by'] === null) {
            $invalidProperties[] = "'screenshot_checked_by' can't be null";
        }
        if ($this->container['screenshot_check_date'] === null) {
            $invalidProperties[] = "'screenshot_check_date' can't be null";
        }
        if ($this->container['kontor_part'] === null) {
            $invalidProperties[] = "'kontor_part' can't be null";
        }
        if ($this->container['user_set_real_eco'] === null) {
            $invalidProperties[] = "'user_set_real_eco' can't be null";
        }
        if ($this->container['is_real_scale'] === null) {
            $invalidProperties[] = "'is_real_scale' can't be null";
        }
        if ($this->container['task_positions'] === null) {
            $invalidProperties[] = "'task_positions' can't be null";
        }
        if ($this->container['current_convoy_info'] === null) {
            $invalidProperties[] = "'current_convoy_info' can't be null";
        }
        if ($this->container['meets_spedition_velocity_requirements'] === null) {
            $invalidProperties[] = "'meets_spedition_velocity_requirements' can't be null";
        }
        if ($this->container['is_ok'] === null) {
            $invalidProperties[] = "'is_ok' can't be null";
        }
        if ($this->container['is_questionable'] === null) {
            $invalidProperties[] = "'is_questionable' can't be null";
        }
        if ($this->container['is_negative'] === null) {
            $invalidProperties[] = "'is_negative' can't be null";
        }
        if ($this->container['fail'] === null) {
            $invalidProperties[] = "'fail' can't be null";
        }
        if ($this->container['screenshot_url'] === null) {
            $invalidProperties[] = "'screenshot_url' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets spedition
     *
     * @return \OpenAPI\Client\Model\FPHSpedVAPIObjectsSpeditionsSpedition
     */
    public function getSpedition()
    {
        return $this->container['spedition'];
    }

    /**
     * Sets spedition
     *
     * @param \OpenAPI\Client\Model\FPHSpedVAPIObjectsSpeditionsSpedition $spedition spedition
     *
     * @return self
     */
    public function setSpedition($spedition)
    {
        if (is_null($spedition)) {
            array_push($this->openAPINullablesSetToNull, 'spedition');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('spedition', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['spedition'] = $spedition;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets visible_id
     *
     * @return string
     */
    public function getVisibleId()
    {
        return $this->container['visible_id'];
    }

    /**
     * Sets visible_id
     *
     * @param string $visible_id visible_id
     *
     * @return self
     */
    public function setVisibleId($visible_id)
    {
        if (is_null($visible_id)) {
            array_push($this->openAPINullablesSetToNull, 'visible_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('visible_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['visible_id'] = $visible_id;

        return $this;
    }

    /**
     * Gets is_deductable
     *
     * @return bool
     */
    public function getIsDeductable()
    {
        return $this->container['is_deductable'];
    }

    /**
     * Sets is_deductable
     *
     * @param bool $is_deductable is_deductable
     *
     * @return self
     */
    public function setIsDeductable($is_deductable)
    {
        if (is_null($is_deductable)) {
            throw new \InvalidArgumentException('non-nullable is_deductable cannot be null');
        }
        $this->container['is_deductable'] = $is_deductable;

        return $this;
    }

    /**
     * Gets user
     *
     * @return \OpenAPI\Client\Model\FPHSpedVAPIObjectsUsersUser
     */
    public function getUser()
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     *
     * @param \OpenAPI\Client\Model\FPHSpedVAPIObjectsUsersUser $user user
     *
     * @return self
     */
    public function setUser($user)
    {
        if (is_null($user)) {
            array_push($this->openAPINullablesSetToNull, 'user');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('user', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['user'] = $user;

        return $this;
    }

    /**
     * Gets maps
     *
     * @return \OpenAPI\Client\Model\FPHSpedVAPIObjectsMapsMap[]
     */
    public function getMaps()
    {
        return $this->container['maps'];
    }

    /**
     * Sets maps
     *
     * @param \OpenAPI\Client\Model\FPHSpedVAPIObjectsMapsMap[] $maps maps
     *
     * @return self
     */
    public function setMaps($maps)
    {
        if (is_null($maps)) {
            array_push($this->openAPINullablesSetToNull, 'maps');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('maps', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['maps'] = $maps;

        return $this;
    }

    /**
     * Gets vis_maps
     *
     * @return string
     */
    public function getVisMaps()
    {
        return $this->container['vis_maps'];
    }

    /**
     * Sets vis_maps
     *
     * @param string $vis_maps vis_maps
     *
     * @return self
     */
    public function setVisMaps($vis_maps)
    {
        if (is_null($vis_maps)) {
            array_push($this->openAPINullablesSetToNull, 'vis_maps');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('vis_maps', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['vis_maps'] = $vis_maps;

        return $this;
    }

    /**
     * Gets start_city
     *
     * @return \OpenAPI\Client\Model\FPHSpedVAPIObjectsMapsCity
     */
    public function getStartCity()
    {
        return $this->container['start_city'];
    }

    /**
     * Sets start_city
     *
     * @param \OpenAPI\Client\Model\FPHSpedVAPIObjectsMapsCity $start_city start_city
     *
     * @return self
     */
    public function setStartCity($start_city)
    {
        if (is_null($start_city)) {
            array_push($this->openAPINullablesSetToNull, 'start_city');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('start_city', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['start_city'] = $start_city;

        return $this;
    }

    /**
     * Gets dest_city
     *
     * @return \OpenAPI\Client\Model\FPHSpedVAPIObjectsMapsCity
     */
    public function getDestCity()
    {
        return $this->container['dest_city'];
    }

    /**
     * Sets dest_city
     *
     * @param \OpenAPI\Client\Model\FPHSpedVAPIObjectsMapsCity $dest_city dest_city
     *
     * @return self
     */
    public function setDestCity($dest_city)
    {
        if (is_null($dest_city)) {
            array_push($this->openAPINullablesSetToNull, 'dest_city');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('dest_city', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['dest_city'] = $dest_city;

        return $this;
    }

    /**
     * Gets start_company
     *
     * @return \OpenAPI\Client\Model\FPHSpedVAPIObjectsMapsCompany
     */
    public function getStartCompany()
    {
        return $this->container['start_company'];
    }

    /**
     * Sets start_company
     *
     * @param \OpenAPI\Client\Model\FPHSpedVAPIObjectsMapsCompany $start_company start_company
     *
     * @return self
     */
    public function setStartCompany($start_company)
    {
        if (is_null($start_company)) {
            array_push($this->openAPINullablesSetToNull, 'start_company');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('start_company', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['start_company'] = $start_company;

        return $this;
    }

    /**
     * Gets dest_company
     *
     * @return \OpenAPI\Client\Model\FPHSpedVAPIObjectsMapsCompany
     */
    public function getDestCompany()
    {
        return $this->container['dest_company'];
    }

    /**
     * Sets dest_company
     *
     * @param \OpenAPI\Client\Model\FPHSpedVAPIObjectsMapsCompany $dest_company dest_company
     *
     * @return self
     */
    public function setDestCompany($dest_company)
    {
        if (is_null($dest_company)) {
            array_push($this->openAPINullablesSetToNull, 'dest_company');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('dest_company', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['dest_company'] = $dest_company;

        return $this;
    }

    /**
     * Gets freight
     *
     * @return \OpenAPI\Client\Model\FPHSpedVAPIObjectsMapsFreight
     */
    public function getFreight()
    {
        return $this->container['freight'];
    }

    /**
     * Sets freight
     *
     * @param \OpenAPI\Client\Model\FPHSpedVAPIObjectsMapsFreight $freight freight
     *
     * @return self
     */
    public function setFreight($freight)
    {
        if (is_null($freight)) {
            array_push($this->openAPINullablesSetToNull, 'freight');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('freight', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['freight'] = $freight;

        return $this;
    }

    /**
     * Gets freightweight
     *
     * @return int
     */
    public function getFreightweight()
    {
        return $this->container['freightweight'];
    }

    /**
     * Sets freightweight
     *
     * @param int $freightweight freightweight
     *
     * @return self
     */
    public function setFreightweight($freightweight)
    {
        if (is_null($freightweight)) {
            throw new \InvalidArgumentException('non-nullable freightweight cannot be null');
        }
        $this->container['freightweight'] = $freightweight;

        return $this;
    }

    /**
     * Gets vis_freight_weight
     *
     * @return string
     */
    public function getVisFreightWeight()
    {
        return $this->container['vis_freight_weight'];
    }

    /**
     * Sets vis_freight_weight
     *
     * @param string $vis_freight_weight vis_freight_weight
     *
     * @return self
     */
    public function setVisFreightWeight($vis_freight_weight)
    {
        if (is_null($vis_freight_weight)) {
            array_push($this->openAPINullablesSetToNull, 'vis_freight_weight');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('vis_freight_weight', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['vis_freight_weight'] = $vis_freight_weight;

        return $this;
    }

    /**
     * Gets dmg_report
     *
     * @return string
     */
    public function getDmgReport()
    {
        return $this->container['dmg_report'];
    }

    /**
     * Sets dmg_report
     *
     * @param string $dmg_report dmg_report
     *
     * @return self
     */
    public function setDmgReport($dmg_report)
    {
        if (is_null($dmg_report)) {
            array_push($this->openAPINullablesSetToNull, 'dmg_report');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('dmg_report', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['dmg_report'] = $dmg_report;

        return $this;
    }

    /**
     * Gets value
     *
     * @return float
     */
    public function getValue()
    {
        return $this->container['value'];
    }

    /**
     * Sets value
     *
     * @param float $value value
     *
     * @return self
     */
    public function setValue($value)
    {
        if (is_null($value)) {
            throw new \InvalidArgumentException('non-nullable value cannot be null');
        }
        $this->container['value'] = $value;

        return $this;
    }

    /**
     * Gets damage
     *
     * @return float
     */
    public function getDamage()
    {
        return $this->container['damage'];
    }

    /**
     * Sets damage
     *
     * @param float $damage damage
     *
     * @return self
     */
    public function setDamage($damage)
    {
        if (is_null($damage)) {
            throw new \InvalidArgumentException('non-nullable damage cannot be null');
        }
        $this->container['damage'] = $damage;

        return $this;
    }

    /**
     * Gets damage_percent
     *
     * @return float
     */
    public function getDamagePercent()
    {
        return $this->container['damage_percent'];
    }

    /**
     * Sets damage_percent
     *
     * @param float $damage_percent damage_percent
     *
     * @return self
     */
    public function setDamagePercent($damage_percent)
    {
        if (is_null($damage_percent)) {
            throw new \InvalidArgumentException('non-nullable damage_percent cannot be null');
        }
        $this->container['damage_percent'] = $damage_percent;

        return $this;
    }

    /**
     * Gets vis_damage_percent
     *
     * @return string
     */
    public function getVisDamagePercent()
    {
        return $this->container['vis_damage_percent'];
    }

    /**
     * Sets vis_damage_percent
     *
     * @param string $vis_damage_percent vis_damage_percent
     *
     * @return self
     */
    public function setVisDamagePercent($vis_damage_percent)
    {
        if (is_null($vis_damage_percent)) {
            array_push($this->openAPINullablesSetToNull, 'vis_damage_percent');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('vis_damage_percent', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['vis_damage_percent'] = $vis_damage_percent;

        return $this;
    }

    /**
     * Gets taxes
     *
     * @return float
     */
    public function getTaxes()
    {
        return $this->container['taxes'];
    }

    /**
     * Sets taxes
     *
     * @param float $taxes taxes
     *
     * @return self
     */
    public function setTaxes($taxes)
    {
        if (is_null($taxes)) {
            throw new \InvalidArgumentException('non-nullable taxes cannot be null');
        }
        $this->container['taxes'] = $taxes;

        return $this;
    }

    /**
     * Gets maintenance
     *
     * @return float
     */
    public function getMaintenance()
    {
        return $this->container['maintenance'];
    }

    /**
     * Sets maintenance
     *
     * @param float $maintenance maintenance
     *
     * @return self
     */
    public function setMaintenance($maintenance)
    {
        if (is_null($maintenance)) {
            throw new \InvalidArgumentException('non-nullable maintenance cannot be null');
        }
        $this->container['maintenance'] = $maintenance;

        return $this;
    }

    /**
     * Gets toll
     *
     * @return float
     */
    public function getToll()
    {
        return $this->container['toll'];
    }

    /**
     * Sets toll
     *
     * @param float $toll toll
     *
     * @return self
     */
    public function setToll($toll)
    {
        if (is_null($toll)) {
            throw new \InvalidArgumentException('non-nullable toll cannot be null');
        }
        $this->container['toll'] = $toll;

        return $this;
    }

    /**
     * Gets income
     *
     * @return float
     */
    public function getIncome()
    {
        return $this->container['income'];
    }

    /**
     * Sets income
     *
     * @param float $income income
     *
     * @return self
     */
    public function setIncome($income)
    {
        if (is_null($income)) {
            throw new \InvalidArgumentException('non-nullable income cannot be null');
        }
        $this->container['income'] = $income;

        return $this;
    }

    /**
     * Gets state
     *
     * @return \OpenAPI\Client\Model\FPHSpedVAPIEnumsETSTaskState
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param \OpenAPI\Client\Model\FPHSpedVAPIEnumsETSTaskState $state 0 = InDrive  1 = Done  2 = Settled  3 = Fail  4 = AdminCheck  5 = Paused  6 = Cancelled  7 = Invalid  -1 = NotAvaliable
     *
     * @return self
     */
    public function setState($state)
    {
        if (is_null($state)) {
            throw new \InvalidArgumentException('non-nullable state cannot be null');
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets starttime
     *
     * @return \DateTime
     */
    public function getStarttime()
    {
        return $this->container['starttime'];
    }

    /**
     * Sets starttime
     *
     * @param \DateTime $starttime starttime
     *
     * @return self
     */
    public function setStarttime($starttime)
    {
        if (is_null($starttime)) {
            throw new \InvalidArgumentException('non-nullable starttime cannot be null');
        }
        $this->container['starttime'] = $starttime;

        return $this;
    }

    /**
     * Gets endtime
     *
     * @return \DateTime
     */
    public function getEndtime()
    {
        return $this->container['endtime'];
    }

    /**
     * Sets endtime
     *
     * @param \DateTime $endtime endtime
     *
     * @return self
     */
    public function setEndtime($endtime)
    {
        if (is_null($endtime)) {
            throw new \InvalidArgumentException('non-nullable endtime cannot be null');
        }
        $this->container['endtime'] = $endtime;

        return $this;
    }

    /**
     * Gets needed_time
     *
     * @return string
     */
    public function getNeededTime()
    {
        return $this->container['needed_time'];
    }

    /**
     * Sets needed_time
     *
     * @param string $needed_time needed_time
     *
     * @return self
     */
    public function setNeededTime($needed_time)
    {
        if (is_null($needed_time)) {
            throw new \InvalidArgumentException('non-nullable needed_time cannot be null');
        }
        $this->container['needed_time'] = $needed_time;

        return $this;
    }

    /**
     * Gets ferry
     *
     * @return int
     */
    public function getFerry()
    {
        return $this->container['ferry'];
    }

    /**
     * Sets ferry
     *
     * @param int $ferry ferry
     *
     * @return self
     */
    public function setFerry($ferry)
    {
        if (is_null($ferry)) {
            throw new \InvalidArgumentException('non-nullable ferry cannot be null');
        }
        $this->container['ferry'] = $ferry;

        return $this;
    }

    /**
     * Gets ferry_km
     *
     * @return int
     */
    public function getFerryKm()
    {
        return $this->container['ferry_km'];
    }

    /**
     * Sets ferry_km
     *
     * @param int $ferry_km ferry_km
     *
     * @return self
     */
    public function setFerryKm($ferry_km)
    {
        if (is_null($ferry_km)) {
            throw new \InvalidArgumentException('non-nullable ferry_km cannot be null');
        }
        $this->container['ferry_km'] = $ferry_km;

        return $this;
    }

    /**
     * Gets refuel
     *
     * @return int
     */
    public function getRefuel()
    {
        return $this->container['refuel'];
    }

    /**
     * Sets refuel
     *
     * @param int $refuel refuel
     *
     * @return self
     */
    public function setRefuel($refuel)
    {
        if (is_null($refuel)) {
            throw new \InvalidArgumentException('non-nullable refuel cannot be null');
        }
        $this->container['refuel'] = $refuel;

        return $this;
    }

    /**
     * Gets boni
     *
     * @return float
     */
    public function getBoni()
    {
        return $this->container['boni'];
    }

    /**
     * Sets boni
     *
     * @param float $boni boni
     *
     * @return self
     */
    public function setBoni($boni)
    {
        if (is_null($boni)) {
            throw new \InvalidArgumentException('non-nullable boni cannot be null');
        }
        $this->container['boni'] = $boni;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency currency
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        if (is_null($currency)) {
            array_push($this->openAPINullablesSetToNull, 'currency');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('currency', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets currency_symbol
     *
     * @return string
     */
    public function getCurrencySymbol()
    {
        return $this->container['currency_symbol'];
    }

    /**
     * Sets currency_symbol
     *
     * @param string $currency_symbol currency_symbol
     *
     * @return self
     */
    public function setCurrencySymbol($currency_symbol)
    {
        if (is_null($currency_symbol)) {
            array_push($this->openAPINullablesSetToNull, 'currency_symbol');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('currency_symbol', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['currency_symbol'] = $currency_symbol;

        return $this;
    }

    /**
     * Gets truck
     *
     * @return \OpenAPI\Client\Model\FPHSpedVAPIObjectsSpeditionsTruck
     */
    public function getTruck()
    {
        return $this->container['truck'];
    }

    /**
     * Sets truck
     *
     * @param \OpenAPI\Client\Model\FPHSpedVAPIObjectsSpeditionsTruck $truck truck
     *
     * @return self
     */
    public function setTruck($truck)
    {
        if (is_null($truck)) {
            array_push($this->openAPINullablesSetToNull, 'truck');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('truck', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['truck'] = $truck;

        return $this;
    }

    /**
     * Gets truck_type
     *
     * @return \OpenAPI\Client\Model\FPHSpedVAPIObjectsSpeditionsTruckType
     */
    public function getTruckType()
    {
        return $this->container['truck_type'];
    }

    /**
     * Sets truck_type
     *
     * @param \OpenAPI\Client\Model\FPHSpedVAPIObjectsSpeditionsTruckType $truck_type truck_type
     *
     * @return self
     */
    public function setTruckType($truck_type)
    {
        if (is_null($truck_type)) {
            array_push($this->openAPINullablesSetToNull, 'truck_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('truck_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['truck_type'] = $truck_type;

        return $this;
    }

    /**
     * Gets rented_truck
     *
     * @return bool
     */
    public function getRentedTruck()
    {
        return $this->container['rented_truck'];
    }

    /**
     * Sets rented_truck
     *
     * @param bool $rented_truck rented_truck
     *
     * @return self
     */
    public function setRentedTruck($rented_truck)
    {
        if (is_null($rented_truck)) {
            throw new \InvalidArgumentException('non-nullable rented_truck cannot be null');
        }
        $this->container['rented_truck'] = $rented_truck;

        return $this;
    }

    /**
     * Gets startkm
     *
     * @return int
     */
    public function getStartkm()
    {
        return $this->container['startkm'];
    }

    /**
     * Sets startkm
     *
     * @param int $startkm startkm
     *
     * @return self
     */
    public function setStartkm($startkm)
    {
        if (is_null($startkm)) {
            throw new \InvalidArgumentException('non-nullable startkm cannot be null');
        }
        $this->container['startkm'] = $startkm;

        return $this;
    }

    /**
     * Gets endkm
     *
     * @return int
     */
    public function getEndkm()
    {
        return $this->container['endkm'];
    }

    /**
     * Sets endkm
     *
     * @param int $endkm endkm
     *
     * @return self
     */
    public function setEndkm($endkm)
    {
        if (is_null($endkm)) {
            throw new \InvalidArgumentException('non-nullable endkm cannot be null');
        }
        $this->container['endkm'] = $endkm;

        return $this;
    }

    /**
     * Gets dist_km
     *
     * @return float
     */
    public function getDistKm()
    {
        return $this->container['dist_km'];
    }

    /**
     * Sets dist_km
     *
     * @param float $dist_km dist_km
     *
     * @return self
     */
    public function setDistKm($dist_km)
    {
        if (is_null($dist_km)) {
            throw new \InvalidArgumentException('non-nullable dist_km cannot be null');
        }
        $this->container['dist_km'] = $dist_km;

        return $this;
    }

    /**
     * Gets dist_mi
     *
     * @return float
     */
    public function getDistMi()
    {
        return $this->container['dist_mi'];
    }

    /**
     * Sets dist_mi
     *
     * @param float $dist_mi dist_mi
     *
     * @return self
     */
    public function setDistMi($dist_mi)
    {
        if (is_null($dist_mi)) {
            throw new \InvalidArgumentException('non-nullable dist_mi cannot be null');
        }
        $this->container['dist_mi'] = $dist_mi;

        return $this;
    }

    /**
     * Gets vis_distance
     *
     * @return string
     */
    public function getVisDistance()
    {
        return $this->container['vis_distance'];
    }

    /**
     * Sets vis_distance
     *
     * @param string $vis_distance vis_distance
     *
     * @return self
     */
    public function setVisDistance($vis_distance)
    {
        if (is_null($vis_distance)) {
            array_push($this->openAPINullablesSetToNull, 'vis_distance');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('vis_distance', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['vis_distance'] = $vis_distance;

        return $this;
    }

    /**
     * Gets eurokm
     *
     * @return float
     */
    public function getEurokm()
    {
        return $this->container['eurokm'];
    }

    /**
     * Sets eurokm
     *
     * @param float $eurokm eurokm
     *
     * @return self
     */
    public function setEurokm($eurokm)
    {
        if (is_null($eurokm)) {
            throw new \InvalidArgumentException('non-nullable eurokm cannot be null');
        }
        $this->container['eurokm'] = $eurokm;

        return $this;
    }

    /**
     * Gets dollarmi
     *
     * @return float
     */
    public function getDollarmi()
    {
        return $this->container['dollarmi'];
    }

    /**
     * Sets dollarmi
     *
     * @param float $dollarmi dollarmi
     *
     * @return self
     */
    public function setDollarmi($dollarmi)
    {
        if (is_null($dollarmi)) {
            throw new \InvalidArgumentException('non-nullable dollarmi cannot be null');
        }
        $this->container['dollarmi'] = $dollarmi;

        return $this;
    }

    /**
     * Gets vis_euro_km
     *
     * @return string
     */
    public function getVisEuroKm()
    {
        return $this->container['vis_euro_km'];
    }

    /**
     * Sets vis_euro_km
     *
     * @param string $vis_euro_km vis_euro_km
     *
     * @return self
     */
    public function setVisEuroKm($vis_euro_km)
    {
        if (is_null($vis_euro_km)) {
            array_push($this->openAPINullablesSetToNull, 'vis_euro_km');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('vis_euro_km', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['vis_euro_km'] = $vis_euro_km;

        return $this;
    }

    /**
     * Gets fuel_used_li
     *
     * @return int
     */
    public function getFuelUsedLi()
    {
        return $this->container['fuel_used_li'];
    }

    /**
     * Sets fuel_used_li
     *
     * @param int $fuel_used_li fuel_used_li
     *
     * @return self
     */
    public function setFuelUsedLi($fuel_used_li)
    {
        if (is_null($fuel_used_li)) {
            throw new \InvalidArgumentException('non-nullable fuel_used_li cannot be null');
        }
        $this->container['fuel_used_li'] = $fuel_used_li;

        return $this;
    }

    /**
     * Gets fuel_used_gal
     *
     * @return float
     */
    public function getFuelUsedGal()
    {
        return $this->container['fuel_used_gal'];
    }

    /**
     * Sets fuel_used_gal
     *
     * @param float $fuel_used_gal fuel_used_gal
     *
     * @return self
     */
    public function setFuelUsedGal($fuel_used_gal)
    {
        if (is_null($fuel_used_gal)) {
            throw new \InvalidArgumentException('non-nullable fuel_used_gal cannot be null');
        }
        $this->container['fuel_used_gal'] = $fuel_used_gal;

        return $this;
    }

    /**
     * Gets fuel_refuled_li
     *
     * @return int
     */
    public function getFuelRefuledLi()
    {
        return $this->container['fuel_refuled_li'];
    }

    /**
     * Sets fuel_refuled_li
     *
     * @param int $fuel_refuled_li fuel_refuled_li
     *
     * @return self
     */
    public function setFuelRefuledLi($fuel_refuled_li)
    {
        if (is_null($fuel_refuled_li)) {
            throw new \InvalidArgumentException('non-nullable fuel_refuled_li cannot be null');
        }
        $this->container['fuel_refuled_li'] = $fuel_refuled_li;

        return $this;
    }

    /**
     * Gets fuel_refuled_gal
     *
     * @return float
     */
    public function getFuelRefuledGal()
    {
        return $this->container['fuel_refuled_gal'];
    }

    /**
     * Sets fuel_refuled_gal
     *
     * @param float $fuel_refuled_gal fuel_refuled_gal
     *
     * @return self
     */
    public function setFuelRefuledGal($fuel_refuled_gal)
    {
        if (is_null($fuel_refuled_gal)) {
            throw new \InvalidArgumentException('non-nullable fuel_refuled_gal cannot be null');
        }
        $this->container['fuel_refuled_gal'] = $fuel_refuled_gal;

        return $this;
    }

    /**
     * Gets fuel_avg100_km
     *
     * @return float
     */
    public function getFuelAvg100Km()
    {
        return $this->container['fuel_avg100_km'];
    }

    /**
     * Sets fuel_avg100_km
     *
     * @param float $fuel_avg100_km fuel_avg100_km
     *
     * @return self
     */
    public function setFuelAvg100Km($fuel_avg100_km)
    {
        if (is_null($fuel_avg100_km)) {
            throw new \InvalidArgumentException('non-nullable fuel_avg100_km cannot be null');
        }
        $this->container['fuel_avg100_km'] = $fuel_avg100_km;

        return $this;
    }

    /**
     * Gets fuel_avg_mi_gal
     *
     * @return float
     */
    public function getFuelAvgMiGal()
    {
        return $this->container['fuel_avg_mi_gal'];
    }

    /**
     * Sets fuel_avg_mi_gal
     *
     * @param float $fuel_avg_mi_gal fuel_avg_mi_gal
     *
     * @return self
     */
    public function setFuelAvgMiGal($fuel_avg_mi_gal)
    {
        if (is_null($fuel_avg_mi_gal)) {
            throw new \InvalidArgumentException('non-nullable fuel_avg_mi_gal cannot be null');
        }
        $this->container['fuel_avg_mi_gal'] = $fuel_avg_mi_gal;

        return $this;
    }

    /**
     * Gets vis_fuel_efficiency
     *
     * @return string
     */
    public function getVisFuelEfficiency()
    {
        return $this->container['vis_fuel_efficiency'];
    }

    /**
     * Sets vis_fuel_efficiency
     *
     * @param string $vis_fuel_efficiency vis_fuel_efficiency
     *
     * @return self
     */
    public function setVisFuelEfficiency($vis_fuel_efficiency)
    {
        if (is_null($vis_fuel_efficiency)) {
            array_push($this->openAPINullablesSetToNull, 'vis_fuel_efficiency');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('vis_fuel_efficiency', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['vis_fuel_efficiency'] = $vis_fuel_efficiency;

        return $this;
    }

    /**
     * Gets truck_damage
     *
     * @return float
     */
    public function getTruckDamage()
    {
        return $this->container['truck_damage'];
    }

    /**
     * Sets truck_damage
     *
     * @param float $truck_damage truck_damage
     *
     * @return self
     */
    public function setTruckDamage($truck_damage)
    {
        if (is_null($truck_damage)) {
            throw new \InvalidArgumentException('non-nullable truck_damage cannot be null');
        }
        $this->container['truck_damage'] = $truck_damage;

        return $this;
    }

    /**
     * Gets max_velocity_kmh
     *
     * @return int
     */
    public function getMaxVelocityKmh()
    {
        return $this->container['max_velocity_kmh'];
    }

    /**
     * Sets max_velocity_kmh
     *
     * @param int $max_velocity_kmh max_velocity_kmh
     *
     * @return self
     */
    public function setMaxVelocityKmh($max_velocity_kmh)
    {
        if (is_null($max_velocity_kmh)) {
            throw new \InvalidArgumentException('non-nullable max_velocity_kmh cannot be null');
        }
        $this->container['max_velocity_kmh'] = $max_velocity_kmh;

        return $this;
    }

    /**
     * Gets max_velocity_mph
     *
     * @return int
     */
    public function getMaxVelocityMph()
    {
        return $this->container['max_velocity_mph'];
    }

    /**
     * Sets max_velocity_mph
     *
     * @param int $max_velocity_mph max_velocity_mph
     *
     * @return self
     */
    public function setMaxVelocityMph($max_velocity_mph)
    {
        if (is_null($max_velocity_mph)) {
            throw new \InvalidArgumentException('non-nullable max_velocity_mph cannot be null');
        }
        $this->container['max_velocity_mph'] = $max_velocity_mph;

        return $this;
    }

    /**
     * Gets avg_velocity_kmh
     *
     * @return int
     */
    public function getAvgVelocityKmh()
    {
        return $this->container['avg_velocity_kmh'];
    }

    /**
     * Sets avg_velocity_kmh
     *
     * @param int $avg_velocity_kmh avg_velocity_kmh
     *
     * @return self
     */
    public function setAvgVelocityKmh($avg_velocity_kmh)
    {
        if (is_null($avg_velocity_kmh)) {
            throw new \InvalidArgumentException('non-nullable avg_velocity_kmh cannot be null');
        }
        $this->container['avg_velocity_kmh'] = $avg_velocity_kmh;

        return $this;
    }

    /**
     * Gets avg_velocity_mph
     *
     * @return int
     */
    public function getAvgVelocityMph()
    {
        return $this->container['avg_velocity_mph'];
    }

    /**
     * Sets avg_velocity_mph
     *
     * @param int $avg_velocity_mph avg_velocity_mph
     *
     * @return self
     */
    public function setAvgVelocityMph($avg_velocity_mph)
    {
        if (is_null($avg_velocity_mph)) {
            throw new \InvalidArgumentException('non-nullable avg_velocity_mph cannot be null');
        }
        $this->container['avg_velocity_mph'] = $avg_velocity_mph;

        return $this;
    }

    /**
     * Gets dd_cleaned
     *
     * @return bool
     */
    public function getDdCleaned()
    {
        return $this->container['dd_cleaned'];
    }

    /**
     * Sets dd_cleaned
     *
     * @param bool $dd_cleaned dd_cleaned
     *
     * @return self
     */
    public function setDdCleaned($dd_cleaned)
    {
        if (is_null($dd_cleaned)) {
            throw new \InvalidArgumentException('non-nullable dd_cleaned cannot be null');
        }
        $this->container['dd_cleaned'] = $dd_cleaned;

        return $this;
    }

    /**
     * Gets cargo_market
     *
     * @return \OpenAPI\Client\Model\FPHSpedVAPIEnumsCargoMarketType
     */
    public function getCargoMarket()
    {
        return $this->container['cargo_market'];
    }

    /**
     * Sets cargo_market
     *
     * @param \OpenAPI\Client\Model\FPHSpedVAPIEnumsCargoMarketType $cargo_market 0 = CargoMarket  1 = QuickJob  2 = FreightMarket  3 = ExternalContract  4 = ExternalMarket  -1 = NotSet
     *
     * @return self
     */
    public function setCargoMarket($cargo_market)
    {
        if (is_null($cargo_market)) {
            throw new \InvalidArgumentException('non-nullable cargo_market cannot be null');
        }
        $this->container['cargo_market'] = $cargo_market;

        return $this;
    }

    /**
     * Gets screenshot_state
     *
     * @return \OpenAPI\Client\Model\FPHSpedVAPIEnumsScreenshotState
     */
    public function getScreenshotState()
    {
        return $this->container['screenshot_state'];
    }

    /**
     * Sets screenshot_state
     *
     * @param \OpenAPI\Client\Model\FPHSpedVAPIEnumsScreenshotState $screenshot_state 0 = None  1 = Uploaded  2 = Processed  3 = Rejected  4 = TaskSettled
     *
     * @return self
     */
    public function setScreenshotState($screenshot_state)
    {
        if (is_null($screenshot_state)) {
            throw new \InvalidArgumentException('non-nullable screenshot_state cannot be null');
        }
        $this->container['screenshot_state'] = $screenshot_state;

        return $this;
    }

    /**
     * Gets screenshot_checked_by
     *
     * @return \OpenAPI\Client\Model\FPHSpedVAPIObjectsUsersUser
     */
    public function getScreenshotCheckedBy()
    {
        return $this->container['screenshot_checked_by'];
    }

    /**
     * Sets screenshot_checked_by
     *
     * @param \OpenAPI\Client\Model\FPHSpedVAPIObjectsUsersUser $screenshot_checked_by screenshot_checked_by
     *
     * @return self
     */
    public function setScreenshotCheckedBy($screenshot_checked_by)
    {
        if (is_null($screenshot_checked_by)) {
            array_push($this->openAPINullablesSetToNull, 'screenshot_checked_by');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('screenshot_checked_by', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['screenshot_checked_by'] = $screenshot_checked_by;

        return $this;
    }

    /**
     * Gets screenshot_check_date
     *
     * @return \DateTime
     */
    public function getScreenshotCheckDate()
    {
        return $this->container['screenshot_check_date'];
    }

    /**
     * Sets screenshot_check_date
     *
     * @param \DateTime $screenshot_check_date screenshot_check_date
     *
     * @return self
     */
    public function setScreenshotCheckDate($screenshot_check_date)
    {
        if (is_null($screenshot_check_date)) {
            throw new \InvalidArgumentException('non-nullable screenshot_check_date cannot be null');
        }
        $this->container['screenshot_check_date'] = $screenshot_check_date;

        return $this;
    }

    /**
     * Gets kontor_part
     *
     * @return \OpenAPI\Client\Model\FPHSpedVAPIObjectsKontorJobPart
     */
    public function getKontorPart()
    {
        return $this->container['kontor_part'];
    }

    /**
     * Sets kontor_part
     *
     * @param \OpenAPI\Client\Model\FPHSpedVAPIObjectsKontorJobPart $kontor_part kontor_part
     *
     * @return self
     */
    public function setKontorPart($kontor_part)
    {
        if (is_null($kontor_part)) {
            array_push($this->openAPINullablesSetToNull, 'kontor_part');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('kontor_part', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['kontor_part'] = $kontor_part;

        return $this;
    }

    /**
     * Gets user_set_real_eco
     *
     * @return bool
     */
    public function getUserSetRealEco()
    {
        return $this->container['user_set_real_eco'];
    }

    /**
     * Sets user_set_real_eco
     *
     * @param bool $user_set_real_eco user_set_real_eco
     *
     * @return self
     */
    public function setUserSetRealEco($user_set_real_eco)
    {
        if (is_null($user_set_real_eco)) {
            throw new \InvalidArgumentException('non-nullable user_set_real_eco cannot be null');
        }
        $this->container['user_set_real_eco'] = $user_set_real_eco;

        return $this;
    }

    /**
     * Gets is_real_scale
     *
     * @return bool
     */
    public function getIsRealScale()
    {
        return $this->container['is_real_scale'];
    }

    /**
     * Sets is_real_scale
     *
     * @param bool $is_real_scale is_real_scale
     *
     * @return self
     */
    public function setIsRealScale($is_real_scale)
    {
        if (is_null($is_real_scale)) {
            throw new \InvalidArgumentException('non-nullable is_real_scale cannot be null');
        }
        $this->container['is_real_scale'] = $is_real_scale;

        return $this;
    }

    /**
     * Gets task_positions
     *
     * @return \OpenAPI\Client\Model\FPHSpedVAPIObjectsSpeditionsTaskPosition[]
     */
    public function getTaskPositions()
    {
        return $this->container['task_positions'];
    }

    /**
     * Sets task_positions
     *
     * @param \OpenAPI\Client\Model\FPHSpedVAPIObjectsSpeditionsTaskPosition[] $task_positions task_positions
     *
     * @return self
     */
    public function setTaskPositions($task_positions)
    {
        if (is_null($task_positions)) {
            array_push($this->openAPINullablesSetToNull, 'task_positions');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('task_positions', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['task_positions'] = $task_positions;

        return $this;
    }

    /**
     * Gets current_convoy_info
     *
     * @return \OpenAPI\Client\Model\FPHSpedVAPIObjectsLiveConvoyInfo
     */
    public function getCurrentConvoyInfo()
    {
        return $this->container['current_convoy_info'];
    }

    /**
     * Sets current_convoy_info
     *
     * @param \OpenAPI\Client\Model\FPHSpedVAPIObjectsLiveConvoyInfo $current_convoy_info current_convoy_info
     *
     * @return self
     */
    public function setCurrentConvoyInfo($current_convoy_info)
    {
        if (is_null($current_convoy_info)) {
            array_push($this->openAPINullablesSetToNull, 'current_convoy_info');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('current_convoy_info', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['current_convoy_info'] = $current_convoy_info;

        return $this;
    }

    /**
     * Gets meets_spedition_velocity_requirements
     *
     * @return bool
     */
    public function getMeetsSpeditionVelocityRequirements()
    {
        return $this->container['meets_spedition_velocity_requirements'];
    }

    /**
     * Sets meets_spedition_velocity_requirements
     *
     * @param bool $meets_spedition_velocity_requirements meets_spedition_velocity_requirements
     *
     * @return self
     */
    public function setMeetsSpeditionVelocityRequirements($meets_spedition_velocity_requirements)
    {
        if (is_null($meets_spedition_velocity_requirements)) {
            throw new \InvalidArgumentException('non-nullable meets_spedition_velocity_requirements cannot be null');
        }
        $this->container['meets_spedition_velocity_requirements'] = $meets_spedition_velocity_requirements;

        return $this;
    }

    /**
     * Gets is_ok
     *
     * @return bool
     */
    public function getIsOk()
    {
        return $this->container['is_ok'];
    }

    /**
     * Sets is_ok
     *
     * @param bool $is_ok is_ok
     *
     * @return self
     */
    public function setIsOk($is_ok)
    {
        if (is_null($is_ok)) {
            throw new \InvalidArgumentException('non-nullable is_ok cannot be null');
        }
        $this->container['is_ok'] = $is_ok;

        return $this;
    }

    /**
     * Gets is_questionable
     *
     * @return bool
     */
    public function getIsQuestionable()
    {
        return $this->container['is_questionable'];
    }

    /**
     * Sets is_questionable
     *
     * @param bool $is_questionable is_questionable
     *
     * @return self
     */
    public function setIsQuestionable($is_questionable)
    {
        if (is_null($is_questionable)) {
            throw new \InvalidArgumentException('non-nullable is_questionable cannot be null');
        }
        $this->container['is_questionable'] = $is_questionable;

        return $this;
    }

    /**
     * Gets is_negative
     *
     * @return bool
     */
    public function getIsNegative()
    {
        return $this->container['is_negative'];
    }

    /**
     * Sets is_negative
     *
     * @param bool $is_negative is_negative
     *
     * @return self
     */
    public function setIsNegative($is_negative)
    {
        if (is_null($is_negative)) {
            throw new \InvalidArgumentException('non-nullable is_negative cannot be null');
        }
        $this->container['is_negative'] = $is_negative;

        return $this;
    }

    /**
     * Gets fail
     *
     * @return float
     */
    public function getFail()
    {
        return $this->container['fail'];
    }

    /**
     * Sets fail
     *
     * @param float $fail fail
     *
     * @return self
     */
    public function setFail($fail)
    {
        if (is_null($fail)) {
            throw new \InvalidArgumentException('non-nullable fail cannot be null');
        }
        $this->container['fail'] = $fail;

        return $this;
    }

    /**
     * Gets screenshot_url
     *
     * @return string
     */
    public function getScreenshotUrl()
    {
        return $this->container['screenshot_url'];
    }

    /**
     * Sets screenshot_url
     *
     * @param string $screenshot_url screenshot_url
     *
     * @return self
     */
    public function setScreenshotUrl($screenshot_url)
    {
        if (is_null($screenshot_url)) {
            array_push($this->openAPINullablesSetToNull, 'screenshot_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('screenshot_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['screenshot_url'] = $screenshot_url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



<?php
/**
 * BingMapsRESTToolkitAddress
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SpedV API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * BingMapsRESTToolkitAddress Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class BingMapsRESTToolkitAddress implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'BingMapsRESTToolkit.Address';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'address_line' => 'string',
        'admin_district' => 'string',
        'admin_district2' => 'string',
        'country_region' => 'string',
        'locality' => 'string',
        'postal_code' => 'string',
        'country_region_iso2' => 'string',
        'formatted_address' => 'string',
        'neighborhood' => 'string',
        'landmark' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'address_line' => null,
        'admin_district' => null,
        'admin_district2' => null,
        'country_region' => null,
        'locality' => null,
        'postal_code' => null,
        'country_region_iso2' => null,
        'formatted_address' => null,
        'neighborhood' => null,
        'landmark' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'address_line' => true,
        'admin_district' => true,
        'admin_district2' => true,
        'country_region' => true,
        'locality' => true,
        'postal_code' => true,
        'country_region_iso2' => true,
        'formatted_address' => true,
        'neighborhood' => true,
        'landmark' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'address_line' => 'addressLine',
        'admin_district' => 'adminDistrict',
        'admin_district2' => 'adminDistrict2',
        'country_region' => 'countryRegion',
        'locality' => 'locality',
        'postal_code' => 'postalCode',
        'country_region_iso2' => 'countryRegionIso2',
        'formatted_address' => 'formattedAddress',
        'neighborhood' => 'neighborhood',
        'landmark' => 'landmark'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'address_line' => 'setAddressLine',
        'admin_district' => 'setAdminDistrict',
        'admin_district2' => 'setAdminDistrict2',
        'country_region' => 'setCountryRegion',
        'locality' => 'setLocality',
        'postal_code' => 'setPostalCode',
        'country_region_iso2' => 'setCountryRegionIso2',
        'formatted_address' => 'setFormattedAddress',
        'neighborhood' => 'setNeighborhood',
        'landmark' => 'setLandmark'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'address_line' => 'getAddressLine',
        'admin_district' => 'getAdminDistrict',
        'admin_district2' => 'getAdminDistrict2',
        'country_region' => 'getCountryRegion',
        'locality' => 'getLocality',
        'postal_code' => 'getPostalCode',
        'country_region_iso2' => 'getCountryRegionIso2',
        'formatted_address' => 'getFormattedAddress',
        'neighborhood' => 'getNeighborhood',
        'landmark' => 'getLandmark'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('address_line', $data ?? [], null);
        $this->setIfExists('admin_district', $data ?? [], null);
        $this->setIfExists('admin_district2', $data ?? [], null);
        $this->setIfExists('country_region', $data ?? [], null);
        $this->setIfExists('locality', $data ?? [], null);
        $this->setIfExists('postal_code', $data ?? [], null);
        $this->setIfExists('country_region_iso2', $data ?? [], null);
        $this->setIfExists('formatted_address', $data ?? [], null);
        $this->setIfExists('neighborhood', $data ?? [], null);
        $this->setIfExists('landmark', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['address_line'] === null) {
            $invalidProperties[] = "'address_line' can't be null";
        }
        if ($this->container['admin_district'] === null) {
            $invalidProperties[] = "'admin_district' can't be null";
        }
        if ($this->container['admin_district2'] === null) {
            $invalidProperties[] = "'admin_district2' can't be null";
        }
        if ($this->container['country_region'] === null) {
            $invalidProperties[] = "'country_region' can't be null";
        }
        if ($this->container['locality'] === null) {
            $invalidProperties[] = "'locality' can't be null";
        }
        if ($this->container['postal_code'] === null) {
            $invalidProperties[] = "'postal_code' can't be null";
        }
        if ($this->container['country_region_iso2'] === null) {
            $invalidProperties[] = "'country_region_iso2' can't be null";
        }
        if ($this->container['formatted_address'] === null) {
            $invalidProperties[] = "'formatted_address' can't be null";
        }
        if ($this->container['neighborhood'] === null) {
            $invalidProperties[] = "'neighborhood' can't be null";
        }
        if ($this->container['landmark'] === null) {
            $invalidProperties[] = "'landmark' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets address_line
     *
     * @return string
     */
    public function getAddressLine()
    {
        return $this->container['address_line'];
    }

    /**
     * Sets address_line
     *
     * @param string $address_line address_line
     *
     * @return self
     */
    public function setAddressLine($address_line)
    {
        if (is_null($address_line)) {
            array_push($this->openAPINullablesSetToNull, 'address_line');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('address_line', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['address_line'] = $address_line;

        return $this;
    }

    /**
     * Gets admin_district
     *
     * @return string
     */
    public function getAdminDistrict()
    {
        return $this->container['admin_district'];
    }

    /**
     * Sets admin_district
     *
     * @param string $admin_district admin_district
     *
     * @return self
     */
    public function setAdminDistrict($admin_district)
    {
        if (is_null($admin_district)) {
            array_push($this->openAPINullablesSetToNull, 'admin_district');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('admin_district', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['admin_district'] = $admin_district;

        return $this;
    }

    /**
     * Gets admin_district2
     *
     * @return string
     */
    public function getAdminDistrict2()
    {
        return $this->container['admin_district2'];
    }

    /**
     * Sets admin_district2
     *
     * @param string $admin_district2 admin_district2
     *
     * @return self
     */
    public function setAdminDistrict2($admin_district2)
    {
        if (is_null($admin_district2)) {
            array_push($this->openAPINullablesSetToNull, 'admin_district2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('admin_district2', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['admin_district2'] = $admin_district2;

        return $this;
    }

    /**
     * Gets country_region
     *
     * @return string
     */
    public function getCountryRegion()
    {
        return $this->container['country_region'];
    }

    /**
     * Sets country_region
     *
     * @param string $country_region country_region
     *
     * @return self
     */
    public function setCountryRegion($country_region)
    {
        if (is_null($country_region)) {
            array_push($this->openAPINullablesSetToNull, 'country_region');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('country_region', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['country_region'] = $country_region;

        return $this;
    }

    /**
     * Gets locality
     *
     * @return string
     */
    public function getLocality()
    {
        return $this->container['locality'];
    }

    /**
     * Sets locality
     *
     * @param string $locality locality
     *
     * @return self
     */
    public function setLocality($locality)
    {
        if (is_null($locality)) {
            array_push($this->openAPINullablesSetToNull, 'locality');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('locality', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['locality'] = $locality;

        return $this;
    }

    /**
     * Gets postal_code
     *
     * @return string
     */
    public function getPostalCode()
    {
        return $this->container['postal_code'];
    }

    /**
     * Sets postal_code
     *
     * @param string $postal_code postal_code
     *
     * @return self
     */
    public function setPostalCode($postal_code)
    {
        if (is_null($postal_code)) {
            array_push($this->openAPINullablesSetToNull, 'postal_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('postal_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['postal_code'] = $postal_code;

        return $this;
    }

    /**
     * Gets country_region_iso2
     *
     * @return string
     */
    public function getCountryRegionIso2()
    {
        return $this->container['country_region_iso2'];
    }

    /**
     * Sets country_region_iso2
     *
     * @param string $country_region_iso2 country_region_iso2
     *
     * @return self
     */
    public function setCountryRegionIso2($country_region_iso2)
    {
        if (is_null($country_region_iso2)) {
            array_push($this->openAPINullablesSetToNull, 'country_region_iso2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('country_region_iso2', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['country_region_iso2'] = $country_region_iso2;

        return $this;
    }

    /**
     * Gets formatted_address
     *
     * @return string
     */
    public function getFormattedAddress()
    {
        return $this->container['formatted_address'];
    }

    /**
     * Sets formatted_address
     *
     * @param string $formatted_address formatted_address
     *
     * @return self
     */
    public function setFormattedAddress($formatted_address)
    {
        if (is_null($formatted_address)) {
            array_push($this->openAPINullablesSetToNull, 'formatted_address');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('formatted_address', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['formatted_address'] = $formatted_address;

        return $this;
    }

    /**
     * Gets neighborhood
     *
     * @return string
     */
    public function getNeighborhood()
    {
        return $this->container['neighborhood'];
    }

    /**
     * Sets neighborhood
     *
     * @param string $neighborhood neighborhood
     *
     * @return self
     */
    public function setNeighborhood($neighborhood)
    {
        if (is_null($neighborhood)) {
            array_push($this->openAPINullablesSetToNull, 'neighborhood');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('neighborhood', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['neighborhood'] = $neighborhood;

        return $this;
    }

    /**
     * Gets landmark
     *
     * @return string
     */
    public function getLandmark()
    {
        return $this->container['landmark'];
    }

    /**
     * Sets landmark
     *
     * @param string $landmark landmark
     *
     * @return self
     */
    public function setLandmark($landmark)
    {
        if (is_null($landmark)) {
            array_push($this->openAPINullablesSetToNull, 'landmark');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('landmark', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['landmark'] = $landmark;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



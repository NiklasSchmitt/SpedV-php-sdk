<?php
/**
 * FPHSpedVAPIObjectsUsersUserLiteInfo
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SpedV API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * FPHSpedVAPIObjectsUsersUserLiteInfo Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class FPHSpedVAPIObjectsUsersUserLiteInfo implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'FPH.SpedV.API.Objects.Users.UserLiteInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'user_name' => 'string',
        'rank' => '\OpenAPI\Client\Model\FPHSpedVAPIObjectsSpeditionsLiteRank',
        'last_task_time' => '\DateTime',
        'main_bank_account' => '\OpenAPI\Client\Model\FPHSpedVAPIObjectsMoneyLiteBankAccount',
        'profile_pic_url' => 'string',
        'spedition' => '\OpenAPI\Client\Model\FPHSpedVAPIObjectsSpeditionsSpedition',
        'in_sped' => 'bool',
        'format_name' => 'string',
        'spedition_join_date' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int32',
        'user_name' => null,
        'rank' => null,
        'last_task_time' => 'date-time',
        'main_bank_account' => null,
        'profile_pic_url' => null,
        'spedition' => null,
        'in_sped' => null,
        'format_name' => null,
        'spedition_join_date' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'user_name' => true,
        'rank' => true,
        'last_task_time' => false,
        'main_bank_account' => true,
        'profile_pic_url' => true,
        'spedition' => true,
        'in_sped' => false,
        'format_name' => true,
        'spedition_join_date' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'user_name' => 'userName',
        'rank' => 'rank',
        'last_task_time' => 'lastTaskTime',
        'main_bank_account' => 'mainBankAccount',
        'profile_pic_url' => 'profilePicURL',
        'spedition' => 'spedition',
        'in_sped' => 'inSped',
        'format_name' => 'formatName',
        'spedition_join_date' => 'speditionJoinDate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'user_name' => 'setUserName',
        'rank' => 'setRank',
        'last_task_time' => 'setLastTaskTime',
        'main_bank_account' => 'setMainBankAccount',
        'profile_pic_url' => 'setProfilePicUrl',
        'spedition' => 'setSpedition',
        'in_sped' => 'setInSped',
        'format_name' => 'setFormatName',
        'spedition_join_date' => 'setSpeditionJoinDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'user_name' => 'getUserName',
        'rank' => 'getRank',
        'last_task_time' => 'getLastTaskTime',
        'main_bank_account' => 'getMainBankAccount',
        'profile_pic_url' => 'getProfilePicUrl',
        'spedition' => 'getSpedition',
        'in_sped' => 'getInSped',
        'format_name' => 'getFormatName',
        'spedition_join_date' => 'getSpeditionJoinDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('user_name', $data ?? [], null);
        $this->setIfExists('rank', $data ?? [], null);
        $this->setIfExists('last_task_time', $data ?? [], null);
        $this->setIfExists('main_bank_account', $data ?? [], null);
        $this->setIfExists('profile_pic_url', $data ?? [], null);
        $this->setIfExists('spedition', $data ?? [], null);
        $this->setIfExists('in_sped', $data ?? [], null);
        $this->setIfExists('format_name', $data ?? [], null);
        $this->setIfExists('spedition_join_date', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['user_name'] === null) {
            $invalidProperties[] = "'user_name' can't be null";
        }
        if ($this->container['rank'] === null) {
            $invalidProperties[] = "'rank' can't be null";
        }
        if ($this->container['last_task_time'] === null) {
            $invalidProperties[] = "'last_task_time' can't be null";
        }
        if ($this->container['main_bank_account'] === null) {
            $invalidProperties[] = "'main_bank_account' can't be null";
        }
        if ($this->container['profile_pic_url'] === null) {
            $invalidProperties[] = "'profile_pic_url' can't be null";
        }
        if ($this->container['spedition'] === null) {
            $invalidProperties[] = "'spedition' can't be null";
        }
        if ($this->container['in_sped'] === null) {
            $invalidProperties[] = "'in_sped' can't be null";
        }
        if ($this->container['format_name'] === null) {
            $invalidProperties[] = "'format_name' can't be null";
        }
        if ($this->container['spedition_join_date'] === null) {
            $invalidProperties[] = "'spedition_join_date' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets user_name
     *
     * @return string
     */
    public function getUserName()
    {
        return $this->container['user_name'];
    }

    /**
     * Sets user_name
     *
     * @param string $user_name user_name
     *
     * @return self
     */
    public function setUserName($user_name)
    {
        if (is_null($user_name)) {
            array_push($this->openAPINullablesSetToNull, 'user_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('user_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['user_name'] = $user_name;

        return $this;
    }

    /**
     * Gets rank
     *
     * @return \OpenAPI\Client\Model\FPHSpedVAPIObjectsSpeditionsLiteRank
     */
    public function getRank()
    {
        return $this->container['rank'];
    }

    /**
     * Sets rank
     *
     * @param \OpenAPI\Client\Model\FPHSpedVAPIObjectsSpeditionsLiteRank $rank rank
     *
     * @return self
     */
    public function setRank($rank)
    {
        if (is_null($rank)) {
            array_push($this->openAPINullablesSetToNull, 'rank');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('rank', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['rank'] = $rank;

        return $this;
    }

    /**
     * Gets last_task_time
     *
     * @return \DateTime
     */
    public function getLastTaskTime()
    {
        return $this->container['last_task_time'];
    }

    /**
     * Sets last_task_time
     *
     * @param \DateTime $last_task_time last_task_time
     *
     * @return self
     */
    public function setLastTaskTime($last_task_time)
    {
        if (is_null($last_task_time)) {
            throw new \InvalidArgumentException('non-nullable last_task_time cannot be null');
        }
        $this->container['last_task_time'] = $last_task_time;

        return $this;
    }

    /**
     * Gets main_bank_account
     *
     * @return \OpenAPI\Client\Model\FPHSpedVAPIObjectsMoneyLiteBankAccount
     */
    public function getMainBankAccount()
    {
        return $this->container['main_bank_account'];
    }

    /**
     * Sets main_bank_account
     *
     * @param \OpenAPI\Client\Model\FPHSpedVAPIObjectsMoneyLiteBankAccount $main_bank_account main_bank_account
     *
     * @return self
     */
    public function setMainBankAccount($main_bank_account)
    {
        if (is_null($main_bank_account)) {
            array_push($this->openAPINullablesSetToNull, 'main_bank_account');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('main_bank_account', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['main_bank_account'] = $main_bank_account;

        return $this;
    }

    /**
     * Gets profile_pic_url
     *
     * @return string
     */
    public function getProfilePicUrl()
    {
        return $this->container['profile_pic_url'];
    }

    /**
     * Sets profile_pic_url
     *
     * @param string $profile_pic_url profile_pic_url
     *
     * @return self
     */
    public function setProfilePicUrl($profile_pic_url)
    {
        if (is_null($profile_pic_url)) {
            array_push($this->openAPINullablesSetToNull, 'profile_pic_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('profile_pic_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['profile_pic_url'] = $profile_pic_url;

        return $this;
    }

    /**
     * Gets spedition
     *
     * @return \OpenAPI\Client\Model\FPHSpedVAPIObjectsSpeditionsSpedition
     */
    public function getSpedition()
    {
        return $this->container['spedition'];
    }

    /**
     * Sets spedition
     *
     * @param \OpenAPI\Client\Model\FPHSpedVAPIObjectsSpeditionsSpedition $spedition spedition
     *
     * @return self
     */
    public function setSpedition($spedition)
    {
        if (is_null($spedition)) {
            array_push($this->openAPINullablesSetToNull, 'spedition');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('spedition', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['spedition'] = $spedition;

        return $this;
    }

    /**
     * Gets in_sped
     *
     * @return bool
     */
    public function getInSped()
    {
        return $this->container['in_sped'];
    }

    /**
     * Sets in_sped
     *
     * @param bool $in_sped in_sped
     *
     * @return self
     */
    public function setInSped($in_sped)
    {
        if (is_null($in_sped)) {
            throw new \InvalidArgumentException('non-nullable in_sped cannot be null');
        }
        $this->container['in_sped'] = $in_sped;

        return $this;
    }

    /**
     * Gets format_name
     *
     * @return string
     */
    public function getFormatName()
    {
        return $this->container['format_name'];
    }

    /**
     * Sets format_name
     *
     * @param string $format_name format_name
     *
     * @return self
     */
    public function setFormatName($format_name)
    {
        if (is_null($format_name)) {
            array_push($this->openAPINullablesSetToNull, 'format_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('format_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['format_name'] = $format_name;

        return $this;
    }

    /**
     * Gets spedition_join_date
     *
     * @return \DateTime
     */
    public function getSpeditionJoinDate()
    {
        return $this->container['spedition_join_date'];
    }

    /**
     * Sets spedition_join_date
     *
     * @param \DateTime $spedition_join_date spedition_join_date
     *
     * @return self
     */
    public function setSpeditionJoinDate($spedition_join_date)
    {
        if (is_null($spedition_join_date)) {
            array_push($this->openAPINullablesSetToNull, 'spedition_join_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('spedition_join_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['spedition_join_date'] = $spedition_join_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



<?php
/**
 * FPHSpedVAPIObjectsOMSIDestination
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SpedV API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * FPHSpedVAPIObjectsOMSIDestination Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class FPHSpedVAPIObjectsOMSIDestination implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'FPH.SpedV.API.Objects.OMSI.Destination';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'oms_i_id' => 'int',
        'name' => 'string',
        'is_all_exit' => 'bool',
        'big_top' => 'string',
        'big_bottom' => 'string',
        'small' => 'string',
        'ibi_s1' => 'string',
        'ibi_s2' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int32',
        'oms_i_id' => 'int32',
        'name' => null,
        'is_all_exit' => null,
        'big_top' => null,
        'big_bottom' => null,
        'small' => null,
        'ibi_s1' => null,
        'ibi_s2' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'oms_i_id' => true,
        'name' => true,
        'is_all_exit' => false,
        'big_top' => true,
        'big_bottom' => true,
        'small' => true,
        'ibi_s1' => true,
        'ibi_s2' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'oms_i_id' => 'omsI_ID',
        'name' => 'name',
        'is_all_exit' => 'isAllExit',
        'big_top' => 'big_Top',
        'big_bottom' => 'big_Bottom',
        'small' => 'small',
        'ibi_s1' => 'ibiS1',
        'ibi_s2' => 'ibiS2'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'oms_i_id' => 'setOmsIId',
        'name' => 'setName',
        'is_all_exit' => 'setIsAllExit',
        'big_top' => 'setBigTop',
        'big_bottom' => 'setBigBottom',
        'small' => 'setSmall',
        'ibi_s1' => 'setIbiS1',
        'ibi_s2' => 'setIbiS2'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'oms_i_id' => 'getOmsIId',
        'name' => 'getName',
        'is_all_exit' => 'getIsAllExit',
        'big_top' => 'getBigTop',
        'big_bottom' => 'getBigBottom',
        'small' => 'getSmall',
        'ibi_s1' => 'getIbiS1',
        'ibi_s2' => 'getIbiS2'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('oms_i_id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('is_all_exit', $data ?? [], null);
        $this->setIfExists('big_top', $data ?? [], null);
        $this->setIfExists('big_bottom', $data ?? [], null);
        $this->setIfExists('small', $data ?? [], null);
        $this->setIfExists('ibi_s1', $data ?? [], null);
        $this->setIfExists('ibi_s2', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['oms_i_id'] === null) {
            $invalidProperties[] = "'oms_i_id' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['is_all_exit'] === null) {
            $invalidProperties[] = "'is_all_exit' can't be null";
        }
        if ($this->container['big_top'] === null) {
            $invalidProperties[] = "'big_top' can't be null";
        }
        if ($this->container['big_bottom'] === null) {
            $invalidProperties[] = "'big_bottom' can't be null";
        }
        if ($this->container['small'] === null) {
            $invalidProperties[] = "'small' can't be null";
        }
        if ($this->container['ibi_s1'] === null) {
            $invalidProperties[] = "'ibi_s1' can't be null";
        }
        if ($this->container['ibi_s2'] === null) {
            $invalidProperties[] = "'ibi_s2' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets oms_i_id
     *
     * @return int
     */
    public function getOmsIId()
    {
        return $this->container['oms_i_id'];
    }

    /**
     * Sets oms_i_id
     *
     * @param int $oms_i_id oms_i_id
     *
     * @return self
     */
    public function setOmsIId($oms_i_id)
    {
        if (is_null($oms_i_id)) {
            array_push($this->openAPINullablesSetToNull, 'oms_i_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('oms_i_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['oms_i_id'] = $oms_i_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            array_push($this->openAPINullablesSetToNull, 'name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets is_all_exit
     *
     * @return bool
     */
    public function getIsAllExit()
    {
        return $this->container['is_all_exit'];
    }

    /**
     * Sets is_all_exit
     *
     * @param bool $is_all_exit is_all_exit
     *
     * @return self
     */
    public function setIsAllExit($is_all_exit)
    {
        if (is_null($is_all_exit)) {
            throw new \InvalidArgumentException('non-nullable is_all_exit cannot be null');
        }
        $this->container['is_all_exit'] = $is_all_exit;

        return $this;
    }

    /**
     * Gets big_top
     *
     * @return string
     */
    public function getBigTop()
    {
        return $this->container['big_top'];
    }

    /**
     * Sets big_top
     *
     * @param string $big_top big_top
     *
     * @return self
     */
    public function setBigTop($big_top)
    {
        if (is_null($big_top)) {
            array_push($this->openAPINullablesSetToNull, 'big_top');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('big_top', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['big_top'] = $big_top;

        return $this;
    }

    /**
     * Gets big_bottom
     *
     * @return string
     */
    public function getBigBottom()
    {
        return $this->container['big_bottom'];
    }

    /**
     * Sets big_bottom
     *
     * @param string $big_bottom big_bottom
     *
     * @return self
     */
    public function setBigBottom($big_bottom)
    {
        if (is_null($big_bottom)) {
            array_push($this->openAPINullablesSetToNull, 'big_bottom');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('big_bottom', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['big_bottom'] = $big_bottom;

        return $this;
    }

    /**
     * Gets small
     *
     * @return string
     */
    public function getSmall()
    {
        return $this->container['small'];
    }

    /**
     * Sets small
     *
     * @param string $small small
     *
     * @return self
     */
    public function setSmall($small)
    {
        if (is_null($small)) {
            array_push($this->openAPINullablesSetToNull, 'small');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('small', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['small'] = $small;

        return $this;
    }

    /**
     * Gets ibi_s1
     *
     * @return string
     */
    public function getIbiS1()
    {
        return $this->container['ibi_s1'];
    }

    /**
     * Sets ibi_s1
     *
     * @param string $ibi_s1 ibi_s1
     *
     * @return self
     */
    public function setIbiS1($ibi_s1)
    {
        if (is_null($ibi_s1)) {
            array_push($this->openAPINullablesSetToNull, 'ibi_s1');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ibi_s1', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ibi_s1'] = $ibi_s1;

        return $this;
    }

    /**
     * Gets ibi_s2
     *
     * @return string
     */
    public function getIbiS2()
    {
        return $this->container['ibi_s2'];
    }

    /**
     * Sets ibi_s2
     *
     * @param string $ibi_s2 ibi_s2
     *
     * @return self
     */
    public function setIbiS2($ibi_s2)
    {
        if (is_null($ibi_s2)) {
            array_push($this->openAPINullablesSetToNull, 'ibi_s2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ibi_s2', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ibi_s2'] = $ibi_s2;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



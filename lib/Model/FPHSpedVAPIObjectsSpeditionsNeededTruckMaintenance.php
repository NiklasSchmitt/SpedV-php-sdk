<?php
/**
 * FPHSpedVAPIObjectsSpeditionsNeededTruckMaintenance
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SpedV API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * FPHSpedVAPIObjectsSpeditionsNeededTruckMaintenance Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class FPHSpedVAPIObjectsSpeditionsNeededTruckMaintenance implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'FPH.SpedV.API.Objects.Speditions.NeededTruckMaintenance';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'kind' => '\OpenAPI\Client\Model\FPHSpedVAPIEnumsMaintenanceKind',
        'external_time' => 'string',
        'internal_time' => 'string',
        'external_cost' => 'int',
        'internal_cost' => 'int',
        'needed_immediately' => 'bool',
        'needed_till_km' => 'int',
        'needed_till_date' => '\DateTime',
        'repeat_time_span' => 'string',
        'repeat_km' => 'int',
        'current_km' => 'int',
        'game' => '\OpenAPI\Client\Model\FPHSpedVAPIEnumsGameEnum',
        'km_since_last' => 'int',
        'time_since_last' => 'string',
        'visible_remaining' => 'string',
        'repeat_span' => 'float',
        'span_since_last' => 'float',
        'is_needed' => 'bool',
        'is_overdue' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'kind' => null,
        'external_time' => 'time-span',
        'internal_time' => 'time-span',
        'external_cost' => 'int32',
        'internal_cost' => 'int32',
        'needed_immediately' => null,
        'needed_till_km' => 'int32',
        'needed_till_date' => 'date-time',
        'repeat_time_span' => 'time-span',
        'repeat_km' => 'int32',
        'current_km' => 'int32',
        'game' => null,
        'km_since_last' => 'int32',
        'time_since_last' => 'time-span',
        'visible_remaining' => null,
        'repeat_span' => 'double',
        'span_since_last' => 'double',
        'is_needed' => null,
        'is_overdue' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'kind' => false,
        'external_time' => false,
        'internal_time' => false,
        'external_cost' => false,
        'internal_cost' => false,
        'needed_immediately' => false,
        'needed_till_km' => true,
        'needed_till_date' => true,
        'repeat_time_span' => true,
        'repeat_km' => true,
        'current_km' => false,
        'game' => false,
        'km_since_last' => true,
        'time_since_last' => true,
        'visible_remaining' => true,
        'repeat_span' => false,
        'span_since_last' => false,
        'is_needed' => false,
        'is_overdue' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'kind' => 'kind',
        'external_time' => 'externalTime',
        'internal_time' => 'internalTime',
        'external_cost' => 'externalCost',
        'internal_cost' => 'internalCost',
        'needed_immediately' => 'neededImmediately',
        'needed_till_km' => 'neededTillKM',
        'needed_till_date' => 'neededTillDate',
        'repeat_time_span' => 'repeatTimeSpan',
        'repeat_km' => 'repeatKM',
        'current_km' => 'currentKM',
        'game' => 'game',
        'km_since_last' => 'kmSinceLast',
        'time_since_last' => 'timeSinceLast',
        'visible_remaining' => 'visibleRemaining',
        'repeat_span' => 'repeatSpan',
        'span_since_last' => 'spanSinceLast',
        'is_needed' => 'isNeeded',
        'is_overdue' => 'isOverdue'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'kind' => 'setKind',
        'external_time' => 'setExternalTime',
        'internal_time' => 'setInternalTime',
        'external_cost' => 'setExternalCost',
        'internal_cost' => 'setInternalCost',
        'needed_immediately' => 'setNeededImmediately',
        'needed_till_km' => 'setNeededTillKm',
        'needed_till_date' => 'setNeededTillDate',
        'repeat_time_span' => 'setRepeatTimeSpan',
        'repeat_km' => 'setRepeatKm',
        'current_km' => 'setCurrentKm',
        'game' => 'setGame',
        'km_since_last' => 'setKmSinceLast',
        'time_since_last' => 'setTimeSinceLast',
        'visible_remaining' => 'setVisibleRemaining',
        'repeat_span' => 'setRepeatSpan',
        'span_since_last' => 'setSpanSinceLast',
        'is_needed' => 'setIsNeeded',
        'is_overdue' => 'setIsOverdue'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'kind' => 'getKind',
        'external_time' => 'getExternalTime',
        'internal_time' => 'getInternalTime',
        'external_cost' => 'getExternalCost',
        'internal_cost' => 'getInternalCost',
        'needed_immediately' => 'getNeededImmediately',
        'needed_till_km' => 'getNeededTillKm',
        'needed_till_date' => 'getNeededTillDate',
        'repeat_time_span' => 'getRepeatTimeSpan',
        'repeat_km' => 'getRepeatKm',
        'current_km' => 'getCurrentKm',
        'game' => 'getGame',
        'km_since_last' => 'getKmSinceLast',
        'time_since_last' => 'getTimeSinceLast',
        'visible_remaining' => 'getVisibleRemaining',
        'repeat_span' => 'getRepeatSpan',
        'span_since_last' => 'getSpanSinceLast',
        'is_needed' => 'getIsNeeded',
        'is_overdue' => 'getIsOverdue'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('kind', $data ?? [], null);
        $this->setIfExists('external_time', $data ?? [], null);
        $this->setIfExists('internal_time', $data ?? [], null);
        $this->setIfExists('external_cost', $data ?? [], null);
        $this->setIfExists('internal_cost', $data ?? [], null);
        $this->setIfExists('needed_immediately', $data ?? [], null);
        $this->setIfExists('needed_till_km', $data ?? [], null);
        $this->setIfExists('needed_till_date', $data ?? [], null);
        $this->setIfExists('repeat_time_span', $data ?? [], null);
        $this->setIfExists('repeat_km', $data ?? [], null);
        $this->setIfExists('current_km', $data ?? [], null);
        $this->setIfExists('game', $data ?? [], null);
        $this->setIfExists('km_since_last', $data ?? [], null);
        $this->setIfExists('time_since_last', $data ?? [], null);
        $this->setIfExists('visible_remaining', $data ?? [], null);
        $this->setIfExists('repeat_span', $data ?? [], null);
        $this->setIfExists('span_since_last', $data ?? [], null);
        $this->setIfExists('is_needed', $data ?? [], null);
        $this->setIfExists('is_overdue', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['kind'] === null) {
            $invalidProperties[] = "'kind' can't be null";
        }
        if ($this->container['external_time'] === null) {
            $invalidProperties[] = "'external_time' can't be null";
        }
        if ($this->container['internal_time'] === null) {
            $invalidProperties[] = "'internal_time' can't be null";
        }
        if ($this->container['external_cost'] === null) {
            $invalidProperties[] = "'external_cost' can't be null";
        }
        if ($this->container['internal_cost'] === null) {
            $invalidProperties[] = "'internal_cost' can't be null";
        }
        if ($this->container['needed_immediately'] === null) {
            $invalidProperties[] = "'needed_immediately' can't be null";
        }
        if ($this->container['needed_till_km'] === null) {
            $invalidProperties[] = "'needed_till_km' can't be null";
        }
        if ($this->container['needed_till_date'] === null) {
            $invalidProperties[] = "'needed_till_date' can't be null";
        }
        if ($this->container['repeat_time_span'] === null) {
            $invalidProperties[] = "'repeat_time_span' can't be null";
        }
        if ($this->container['repeat_km'] === null) {
            $invalidProperties[] = "'repeat_km' can't be null";
        }
        if ($this->container['current_km'] === null) {
            $invalidProperties[] = "'current_km' can't be null";
        }
        if ($this->container['game'] === null) {
            $invalidProperties[] = "'game' can't be null";
        }
        if ($this->container['km_since_last'] === null) {
            $invalidProperties[] = "'km_since_last' can't be null";
        }
        if ($this->container['time_since_last'] === null) {
            $invalidProperties[] = "'time_since_last' can't be null";
        }
        if ($this->container['visible_remaining'] === null) {
            $invalidProperties[] = "'visible_remaining' can't be null";
        }
        if ($this->container['repeat_span'] === null) {
            $invalidProperties[] = "'repeat_span' can't be null";
        }
        if ($this->container['span_since_last'] === null) {
            $invalidProperties[] = "'span_since_last' can't be null";
        }
        if ($this->container['is_needed'] === null) {
            $invalidProperties[] = "'is_needed' can't be null";
        }
        if ($this->container['is_overdue'] === null) {
            $invalidProperties[] = "'is_overdue' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets kind
     *
     * @return \OpenAPI\Client\Model\FPHSpedVAPIEnumsMaintenanceKind
     */
    public function getKind()
    {
        return $this->container['kind'];
    }

    /**
     * Sets kind
     *
     * @param \OpenAPI\Client\Model\FPHSpedVAPIEnumsMaintenanceKind $kind 0 = Engine  1 = OszilationDamper  2 = Stabilizer  3 = StoneChip  4 = Transmission  5 = Wishbone  6 = BrakePads  7 = BrakeDiscs  8 = EngineMaintenance  9 = TireChange  10 = MainCheck  11 = SafetyCheck  12 = SaddlePlate  13 = AirPressureUnit  14 = Alternator  15 = BrakeVentil  -1 = NotSet
     *
     * @return self
     */
    public function setKind($kind)
    {
        if (is_null($kind)) {
            throw new \InvalidArgumentException('non-nullable kind cannot be null');
        }
        $this->container['kind'] = $kind;

        return $this;
    }

    /**
     * Gets external_time
     *
     * @return string
     */
    public function getExternalTime()
    {
        return $this->container['external_time'];
    }

    /**
     * Sets external_time
     *
     * @param string $external_time external_time
     *
     * @return self
     */
    public function setExternalTime($external_time)
    {
        if (is_null($external_time)) {
            throw new \InvalidArgumentException('non-nullable external_time cannot be null');
        }
        $this->container['external_time'] = $external_time;

        return $this;
    }

    /**
     * Gets internal_time
     *
     * @return string
     */
    public function getInternalTime()
    {
        return $this->container['internal_time'];
    }

    /**
     * Sets internal_time
     *
     * @param string $internal_time internal_time
     *
     * @return self
     */
    public function setInternalTime($internal_time)
    {
        if (is_null($internal_time)) {
            throw new \InvalidArgumentException('non-nullable internal_time cannot be null');
        }
        $this->container['internal_time'] = $internal_time;

        return $this;
    }

    /**
     * Gets external_cost
     *
     * @return int
     */
    public function getExternalCost()
    {
        return $this->container['external_cost'];
    }

    /**
     * Sets external_cost
     *
     * @param int $external_cost external_cost
     *
     * @return self
     */
    public function setExternalCost($external_cost)
    {
        if (is_null($external_cost)) {
            throw new \InvalidArgumentException('non-nullable external_cost cannot be null');
        }
        $this->container['external_cost'] = $external_cost;

        return $this;
    }

    /**
     * Gets internal_cost
     *
     * @return int
     */
    public function getInternalCost()
    {
        return $this->container['internal_cost'];
    }

    /**
     * Sets internal_cost
     *
     * @param int $internal_cost internal_cost
     *
     * @return self
     */
    public function setInternalCost($internal_cost)
    {
        if (is_null($internal_cost)) {
            throw new \InvalidArgumentException('non-nullable internal_cost cannot be null');
        }
        $this->container['internal_cost'] = $internal_cost;

        return $this;
    }

    /**
     * Gets needed_immediately
     *
     * @return bool
     */
    public function getNeededImmediately()
    {
        return $this->container['needed_immediately'];
    }

    /**
     * Sets needed_immediately
     *
     * @param bool $needed_immediately needed_immediately
     *
     * @return self
     */
    public function setNeededImmediately($needed_immediately)
    {
        if (is_null($needed_immediately)) {
            throw new \InvalidArgumentException('non-nullable needed_immediately cannot be null');
        }
        $this->container['needed_immediately'] = $needed_immediately;

        return $this;
    }

    /**
     * Gets needed_till_km
     *
     * @return int
     */
    public function getNeededTillKm()
    {
        return $this->container['needed_till_km'];
    }

    /**
     * Sets needed_till_km
     *
     * @param int $needed_till_km needed_till_km
     *
     * @return self
     */
    public function setNeededTillKm($needed_till_km)
    {
        if (is_null($needed_till_km)) {
            array_push($this->openAPINullablesSetToNull, 'needed_till_km');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('needed_till_km', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['needed_till_km'] = $needed_till_km;

        return $this;
    }

    /**
     * Gets needed_till_date
     *
     * @return \DateTime
     */
    public function getNeededTillDate()
    {
        return $this->container['needed_till_date'];
    }

    /**
     * Sets needed_till_date
     *
     * @param \DateTime $needed_till_date needed_till_date
     *
     * @return self
     */
    public function setNeededTillDate($needed_till_date)
    {
        if (is_null($needed_till_date)) {
            array_push($this->openAPINullablesSetToNull, 'needed_till_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('needed_till_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['needed_till_date'] = $needed_till_date;

        return $this;
    }

    /**
     * Gets repeat_time_span
     *
     * @return string
     */
    public function getRepeatTimeSpan()
    {
        return $this->container['repeat_time_span'];
    }

    /**
     * Sets repeat_time_span
     *
     * @param string $repeat_time_span repeat_time_span
     *
     * @return self
     */
    public function setRepeatTimeSpan($repeat_time_span)
    {
        if (is_null($repeat_time_span)) {
            array_push($this->openAPINullablesSetToNull, 'repeat_time_span');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('repeat_time_span', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['repeat_time_span'] = $repeat_time_span;

        return $this;
    }

    /**
     * Gets repeat_km
     *
     * @return int
     */
    public function getRepeatKm()
    {
        return $this->container['repeat_km'];
    }

    /**
     * Sets repeat_km
     *
     * @param int $repeat_km repeat_km
     *
     * @return self
     */
    public function setRepeatKm($repeat_km)
    {
        if (is_null($repeat_km)) {
            array_push($this->openAPINullablesSetToNull, 'repeat_km');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('repeat_km', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['repeat_km'] = $repeat_km;

        return $this;
    }

    /**
     * Gets current_km
     *
     * @return int
     */
    public function getCurrentKm()
    {
        return $this->container['current_km'];
    }

    /**
     * Sets current_km
     *
     * @param int $current_km current_km
     *
     * @return self
     */
    public function setCurrentKm($current_km)
    {
        if (is_null($current_km)) {
            throw new \InvalidArgumentException('non-nullable current_km cannot be null');
        }
        $this->container['current_km'] = $current_km;

        return $this;
    }

    /**
     * Gets game
     *
     * @return \OpenAPI\Client\Model\FPHSpedVAPIEnumsGameEnum
     */
    public function getGame()
    {
        return $this->container['game'];
    }

    /**
     * Sets game
     *
     * @param \OpenAPI\Client\Model\FPHSpedVAPIEnumsGameEnum $game 0 = ETS2  1 = ATS  -1 = NotSet
     *
     * @return self
     */
    public function setGame($game)
    {
        if (is_null($game)) {
            throw new \InvalidArgumentException('non-nullable game cannot be null');
        }
        $this->container['game'] = $game;

        return $this;
    }

    /**
     * Gets km_since_last
     *
     * @return int
     */
    public function getKmSinceLast()
    {
        return $this->container['km_since_last'];
    }

    /**
     * Sets km_since_last
     *
     * @param int $km_since_last km_since_last
     *
     * @return self
     */
    public function setKmSinceLast($km_since_last)
    {
        if (is_null($km_since_last)) {
            array_push($this->openAPINullablesSetToNull, 'km_since_last');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('km_since_last', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['km_since_last'] = $km_since_last;

        return $this;
    }

    /**
     * Gets time_since_last
     *
     * @return string
     */
    public function getTimeSinceLast()
    {
        return $this->container['time_since_last'];
    }

    /**
     * Sets time_since_last
     *
     * @param string $time_since_last time_since_last
     *
     * @return self
     */
    public function setTimeSinceLast($time_since_last)
    {
        if (is_null($time_since_last)) {
            array_push($this->openAPINullablesSetToNull, 'time_since_last');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('time_since_last', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['time_since_last'] = $time_since_last;

        return $this;
    }

    /**
     * Gets visible_remaining
     *
     * @return string
     */
    public function getVisibleRemaining()
    {
        return $this->container['visible_remaining'];
    }

    /**
     * Sets visible_remaining
     *
     * @param string $visible_remaining visible_remaining
     *
     * @return self
     */
    public function setVisibleRemaining($visible_remaining)
    {
        if (is_null($visible_remaining)) {
            array_push($this->openAPINullablesSetToNull, 'visible_remaining');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('visible_remaining', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['visible_remaining'] = $visible_remaining;

        return $this;
    }

    /**
     * Gets repeat_span
     *
     * @return float
     */
    public function getRepeatSpan()
    {
        return $this->container['repeat_span'];
    }

    /**
     * Sets repeat_span
     *
     * @param float $repeat_span repeat_span
     *
     * @return self
     */
    public function setRepeatSpan($repeat_span)
    {
        if (is_null($repeat_span)) {
            throw new \InvalidArgumentException('non-nullable repeat_span cannot be null');
        }
        $this->container['repeat_span'] = $repeat_span;

        return $this;
    }

    /**
     * Gets span_since_last
     *
     * @return float
     */
    public function getSpanSinceLast()
    {
        return $this->container['span_since_last'];
    }

    /**
     * Sets span_since_last
     *
     * @param float $span_since_last span_since_last
     *
     * @return self
     */
    public function setSpanSinceLast($span_since_last)
    {
        if (is_null($span_since_last)) {
            throw new \InvalidArgumentException('non-nullable span_since_last cannot be null');
        }
        $this->container['span_since_last'] = $span_since_last;

        return $this;
    }

    /**
     * Gets is_needed
     *
     * @return bool
     */
    public function getIsNeeded()
    {
        return $this->container['is_needed'];
    }

    /**
     * Sets is_needed
     *
     * @param bool $is_needed is_needed
     *
     * @return self
     */
    public function setIsNeeded($is_needed)
    {
        if (is_null($is_needed)) {
            throw new \InvalidArgumentException('non-nullable is_needed cannot be null');
        }
        $this->container['is_needed'] = $is_needed;

        return $this;
    }

    /**
     * Gets is_overdue
     *
     * @return bool
     */
    public function getIsOverdue()
    {
        return $this->container['is_overdue'];
    }

    /**
     * Sets is_overdue
     *
     * @param bool $is_overdue is_overdue
     *
     * @return self
     */
    public function setIsOverdue($is_overdue)
    {
        if (is_null($is_overdue)) {
            throw new \InvalidArgumentException('non-nullable is_overdue cannot be null');
        }
        $this->container['is_overdue'] = $is_overdue;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



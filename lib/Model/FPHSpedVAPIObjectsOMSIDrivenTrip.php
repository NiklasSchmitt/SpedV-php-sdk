<?php
/**
 * FPHSpedVAPIObjectsOMSIDrivenTrip
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SpedV API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * FPHSpedVAPIObjectsOMSIDrivenTrip Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class FPHSpedVAPIObjectsOMSIDrivenTrip implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'FPH.SpedV.API.Objects.OMSI.DrivenTrip';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'visible_id' => 'string',
        'start_date' => '\DateTime',
        'end_date' => '\DateTime',
        'needed_time' => 'string',
        'base_date' => '\DateTime',
        'tour_trip' => '\OpenAPI\Client\Model\FPHSpedVAPIObjectsOMSITourTrip',
        'map' => '\OpenAPI\Client\Model\FPHSpedVAPIObjectsOMSIMap',
        'start_km' => 'float',
        'end_km' => 'float',
        'vis_distance' => 'string',
        'value' => 'int',
        'realtime_boni' => 'float',
        'followup_boni' => 'float',
        'tax' => 'float',
        'result_value' => 'float',
        'currency' => 'string',
        'state' => '\OpenAPI\Client\Model\FPHSpedVAPIEnumsOMSITaskState',
        'user' => '\OpenAPI\Client\Model\FPHSpedVAPIObjectsUsersUser',
        'spedition' => '\OpenAPI\Client\Model\FPHSpedVAPIObjectsSpeditionsSpedition',
        'registered_bus_stops' => '\OpenAPI\Client\Model\FPHSpedVAPIObjectsOMSIDrivenTripBusStop[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int32',
        'visible_id' => null,
        'start_date' => 'date-time',
        'end_date' => 'date-time',
        'needed_time' => 'time-span',
        'base_date' => 'date-time',
        'tour_trip' => null,
        'map' => null,
        'start_km' => 'double',
        'end_km' => 'double',
        'vis_distance' => null,
        'value' => 'int32',
        'realtime_boni' => 'double',
        'followup_boni' => 'double',
        'tax' => 'double',
        'result_value' => 'double',
        'currency' => null,
        'state' => null,
        'user' => null,
        'spedition' => null,
        'registered_bus_stops' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'visible_id' => true,
        'start_date' => false,
        'end_date' => true,
        'needed_time' => true,
        'base_date' => false,
        'tour_trip' => true,
        'map' => true,
        'start_km' => false,
        'end_km' => true,
        'vis_distance' => true,
        'value' => true,
        'realtime_boni' => true,
        'followup_boni' => true,
        'tax' => true,
        'result_value' => true,
        'currency' => true,
        'state' => false,
        'user' => true,
        'spedition' => true,
        'registered_bus_stops' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'visible_id' => 'visibleID',
        'start_date' => 'startDate',
        'end_date' => 'endDate',
        'needed_time' => 'neededTime',
        'base_date' => 'baseDate',
        'tour_trip' => 'tourTrip',
        'map' => 'map',
        'start_km' => 'startKM',
        'end_km' => 'endKM',
        'vis_distance' => 'visDistance',
        'value' => 'value',
        'realtime_boni' => 'realtimeBoni',
        'followup_boni' => 'followupBoni',
        'tax' => 'tax',
        'result_value' => 'resultValue',
        'currency' => 'currency',
        'state' => 'state',
        'user' => 'user',
        'spedition' => 'spedition',
        'registered_bus_stops' => 'registeredBusStops'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'visible_id' => 'setVisibleId',
        'start_date' => 'setStartDate',
        'end_date' => 'setEndDate',
        'needed_time' => 'setNeededTime',
        'base_date' => 'setBaseDate',
        'tour_trip' => 'setTourTrip',
        'map' => 'setMap',
        'start_km' => 'setStartKm',
        'end_km' => 'setEndKm',
        'vis_distance' => 'setVisDistance',
        'value' => 'setValue',
        'realtime_boni' => 'setRealtimeBoni',
        'followup_boni' => 'setFollowupBoni',
        'tax' => 'setTax',
        'result_value' => 'setResultValue',
        'currency' => 'setCurrency',
        'state' => 'setState',
        'user' => 'setUser',
        'spedition' => 'setSpedition',
        'registered_bus_stops' => 'setRegisteredBusStops'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'visible_id' => 'getVisibleId',
        'start_date' => 'getStartDate',
        'end_date' => 'getEndDate',
        'needed_time' => 'getNeededTime',
        'base_date' => 'getBaseDate',
        'tour_trip' => 'getTourTrip',
        'map' => 'getMap',
        'start_km' => 'getStartKm',
        'end_km' => 'getEndKm',
        'vis_distance' => 'getVisDistance',
        'value' => 'getValue',
        'realtime_boni' => 'getRealtimeBoni',
        'followup_boni' => 'getFollowupBoni',
        'tax' => 'getTax',
        'result_value' => 'getResultValue',
        'currency' => 'getCurrency',
        'state' => 'getState',
        'user' => 'getUser',
        'spedition' => 'getSpedition',
        'registered_bus_stops' => 'getRegisteredBusStops'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('visible_id', $data ?? [], null);
        $this->setIfExists('start_date', $data ?? [], null);
        $this->setIfExists('end_date', $data ?? [], null);
        $this->setIfExists('needed_time', $data ?? [], null);
        $this->setIfExists('base_date', $data ?? [], null);
        $this->setIfExists('tour_trip', $data ?? [], null);
        $this->setIfExists('map', $data ?? [], null);
        $this->setIfExists('start_km', $data ?? [], null);
        $this->setIfExists('end_km', $data ?? [], null);
        $this->setIfExists('vis_distance', $data ?? [], null);
        $this->setIfExists('value', $data ?? [], null);
        $this->setIfExists('realtime_boni', $data ?? [], null);
        $this->setIfExists('followup_boni', $data ?? [], null);
        $this->setIfExists('tax', $data ?? [], null);
        $this->setIfExists('result_value', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], null);
        $this->setIfExists('state', $data ?? [], null);
        $this->setIfExists('user', $data ?? [], null);
        $this->setIfExists('spedition', $data ?? [], null);
        $this->setIfExists('registered_bus_stops', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['visible_id'] === null) {
            $invalidProperties[] = "'visible_id' can't be null";
        }
        if ($this->container['start_date'] === null) {
            $invalidProperties[] = "'start_date' can't be null";
        }
        if ($this->container['end_date'] === null) {
            $invalidProperties[] = "'end_date' can't be null";
        }
        if ($this->container['needed_time'] === null) {
            $invalidProperties[] = "'needed_time' can't be null";
        }
        if ($this->container['base_date'] === null) {
            $invalidProperties[] = "'base_date' can't be null";
        }
        if ($this->container['tour_trip'] === null) {
            $invalidProperties[] = "'tour_trip' can't be null";
        }
        if ($this->container['map'] === null) {
            $invalidProperties[] = "'map' can't be null";
        }
        if ($this->container['start_km'] === null) {
            $invalidProperties[] = "'start_km' can't be null";
        }
        if ($this->container['end_km'] === null) {
            $invalidProperties[] = "'end_km' can't be null";
        }
        if ($this->container['vis_distance'] === null) {
            $invalidProperties[] = "'vis_distance' can't be null";
        }
        if ($this->container['value'] === null) {
            $invalidProperties[] = "'value' can't be null";
        }
        if ($this->container['realtime_boni'] === null) {
            $invalidProperties[] = "'realtime_boni' can't be null";
        }
        if ($this->container['followup_boni'] === null) {
            $invalidProperties[] = "'followup_boni' can't be null";
        }
        if ($this->container['tax'] === null) {
            $invalidProperties[] = "'tax' can't be null";
        }
        if ($this->container['result_value'] === null) {
            $invalidProperties[] = "'result_value' can't be null";
        }
        if ($this->container['currency'] === null) {
            $invalidProperties[] = "'currency' can't be null";
        }
        if ($this->container['state'] === null) {
            $invalidProperties[] = "'state' can't be null";
        }
        if ($this->container['user'] === null) {
            $invalidProperties[] = "'user' can't be null";
        }
        if ($this->container['spedition'] === null) {
            $invalidProperties[] = "'spedition' can't be null";
        }
        if ($this->container['registered_bus_stops'] === null) {
            $invalidProperties[] = "'registered_bus_stops' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets visible_id
     *
     * @return string
     */
    public function getVisibleId()
    {
        return $this->container['visible_id'];
    }

    /**
     * Sets visible_id
     *
     * @param string $visible_id visible_id
     *
     * @return self
     */
    public function setVisibleId($visible_id)
    {
        if (is_null($visible_id)) {
            array_push($this->openAPINullablesSetToNull, 'visible_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('visible_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['visible_id'] = $visible_id;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return \DateTime
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param \DateTime $start_date start_date
     *
     * @return self
     */
    public function setStartDate($start_date)
    {
        if (is_null($start_date)) {
            throw new \InvalidArgumentException('non-nullable start_date cannot be null');
        }
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return \DateTime
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param \DateTime $end_date end_date
     *
     * @return self
     */
    public function setEndDate($end_date)
    {
        if (is_null($end_date)) {
            array_push($this->openAPINullablesSetToNull, 'end_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('end_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets needed_time
     *
     * @return string
     */
    public function getNeededTime()
    {
        return $this->container['needed_time'];
    }

    /**
     * Sets needed_time
     *
     * @param string $needed_time needed_time
     *
     * @return self
     */
    public function setNeededTime($needed_time)
    {
        if (is_null($needed_time)) {
            array_push($this->openAPINullablesSetToNull, 'needed_time');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('needed_time', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['needed_time'] = $needed_time;

        return $this;
    }

    /**
     * Gets base_date
     *
     * @return \DateTime
     */
    public function getBaseDate()
    {
        return $this->container['base_date'];
    }

    /**
     * Sets base_date
     *
     * @param \DateTime $base_date base_date
     *
     * @return self
     */
    public function setBaseDate($base_date)
    {
        if (is_null($base_date)) {
            throw new \InvalidArgumentException('non-nullable base_date cannot be null');
        }
        $this->container['base_date'] = $base_date;

        return $this;
    }

    /**
     * Gets tour_trip
     *
     * @return \OpenAPI\Client\Model\FPHSpedVAPIObjectsOMSITourTrip
     */
    public function getTourTrip()
    {
        return $this->container['tour_trip'];
    }

    /**
     * Sets tour_trip
     *
     * @param \OpenAPI\Client\Model\FPHSpedVAPIObjectsOMSITourTrip $tour_trip tour_trip
     *
     * @return self
     */
    public function setTourTrip($tour_trip)
    {
        if (is_null($tour_trip)) {
            array_push($this->openAPINullablesSetToNull, 'tour_trip');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tour_trip', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tour_trip'] = $tour_trip;

        return $this;
    }

    /**
     * Gets map
     *
     * @return \OpenAPI\Client\Model\FPHSpedVAPIObjectsOMSIMap
     */
    public function getMap()
    {
        return $this->container['map'];
    }

    /**
     * Sets map
     *
     * @param \OpenAPI\Client\Model\FPHSpedVAPIObjectsOMSIMap $map map
     *
     * @return self
     */
    public function setMap($map)
    {
        if (is_null($map)) {
            array_push($this->openAPINullablesSetToNull, 'map');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('map', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['map'] = $map;

        return $this;
    }

    /**
     * Gets start_km
     *
     * @return float
     */
    public function getStartKm()
    {
        return $this->container['start_km'];
    }

    /**
     * Sets start_km
     *
     * @param float $start_km start_km
     *
     * @return self
     */
    public function setStartKm($start_km)
    {
        if (is_null($start_km)) {
            throw new \InvalidArgumentException('non-nullable start_km cannot be null');
        }
        $this->container['start_km'] = $start_km;

        return $this;
    }

    /**
     * Gets end_km
     *
     * @return float
     */
    public function getEndKm()
    {
        return $this->container['end_km'];
    }

    /**
     * Sets end_km
     *
     * @param float $end_km end_km
     *
     * @return self
     */
    public function setEndKm($end_km)
    {
        if (is_null($end_km)) {
            array_push($this->openAPINullablesSetToNull, 'end_km');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('end_km', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['end_km'] = $end_km;

        return $this;
    }

    /**
     * Gets vis_distance
     *
     * @return string
     */
    public function getVisDistance()
    {
        return $this->container['vis_distance'];
    }

    /**
     * Sets vis_distance
     *
     * @param string $vis_distance vis_distance
     *
     * @return self
     */
    public function setVisDistance($vis_distance)
    {
        if (is_null($vis_distance)) {
            array_push($this->openAPINullablesSetToNull, 'vis_distance');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('vis_distance', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['vis_distance'] = $vis_distance;

        return $this;
    }

    /**
     * Gets value
     *
     * @return int
     */
    public function getValue()
    {
        return $this->container['value'];
    }

    /**
     * Sets value
     *
     * @param int $value value
     *
     * @return self
     */
    public function setValue($value)
    {
        if (is_null($value)) {
            array_push($this->openAPINullablesSetToNull, 'value');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('value', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['value'] = $value;

        return $this;
    }

    /**
     * Gets realtime_boni
     *
     * @return float
     */
    public function getRealtimeBoni()
    {
        return $this->container['realtime_boni'];
    }

    /**
     * Sets realtime_boni
     *
     * @param float $realtime_boni realtime_boni
     *
     * @return self
     */
    public function setRealtimeBoni($realtime_boni)
    {
        if (is_null($realtime_boni)) {
            array_push($this->openAPINullablesSetToNull, 'realtime_boni');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('realtime_boni', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['realtime_boni'] = $realtime_boni;

        return $this;
    }

    /**
     * Gets followup_boni
     *
     * @return float
     */
    public function getFollowupBoni()
    {
        return $this->container['followup_boni'];
    }

    /**
     * Sets followup_boni
     *
     * @param float $followup_boni followup_boni
     *
     * @return self
     */
    public function setFollowupBoni($followup_boni)
    {
        if (is_null($followup_boni)) {
            array_push($this->openAPINullablesSetToNull, 'followup_boni');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('followup_boni', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['followup_boni'] = $followup_boni;

        return $this;
    }

    /**
     * Gets tax
     *
     * @return float
     */
    public function getTax()
    {
        return $this->container['tax'];
    }

    /**
     * Sets tax
     *
     * @param float $tax tax
     *
     * @return self
     */
    public function setTax($tax)
    {
        if (is_null($tax)) {
            array_push($this->openAPINullablesSetToNull, 'tax');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tax', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tax'] = $tax;

        return $this;
    }

    /**
     * Gets result_value
     *
     * @return float
     */
    public function getResultValue()
    {
        return $this->container['result_value'];
    }

    /**
     * Sets result_value
     *
     * @param float $result_value result_value
     *
     * @return self
     */
    public function setResultValue($result_value)
    {
        if (is_null($result_value)) {
            array_push($this->openAPINullablesSetToNull, 'result_value');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('result_value', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['result_value'] = $result_value;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency currency
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        if (is_null($currency)) {
            array_push($this->openAPINullablesSetToNull, 'currency');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('currency', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets state
     *
     * @return \OpenAPI\Client\Model\FPHSpedVAPIEnumsOMSITaskState
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param \OpenAPI\Client\Model\FPHSpedVAPIEnumsOMSITaskState $state 0 = InDrive  1 = Finished  2 = Cancelled  -1 = NotAvaliable
     *
     * @return self
     */
    public function setState($state)
    {
        if (is_null($state)) {
            throw new \InvalidArgumentException('non-nullable state cannot be null');
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets user
     *
     * @return \OpenAPI\Client\Model\FPHSpedVAPIObjectsUsersUser
     */
    public function getUser()
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     *
     * @param \OpenAPI\Client\Model\FPHSpedVAPIObjectsUsersUser $user user
     *
     * @return self
     */
    public function setUser($user)
    {
        if (is_null($user)) {
            array_push($this->openAPINullablesSetToNull, 'user');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('user', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['user'] = $user;

        return $this;
    }

    /**
     * Gets spedition
     *
     * @return \OpenAPI\Client\Model\FPHSpedVAPIObjectsSpeditionsSpedition
     */
    public function getSpedition()
    {
        return $this->container['spedition'];
    }

    /**
     * Sets spedition
     *
     * @param \OpenAPI\Client\Model\FPHSpedVAPIObjectsSpeditionsSpedition $spedition spedition
     *
     * @return self
     */
    public function setSpedition($spedition)
    {
        if (is_null($spedition)) {
            array_push($this->openAPINullablesSetToNull, 'spedition');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('spedition', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['spedition'] = $spedition;

        return $this;
    }

    /**
     * Gets registered_bus_stops
     *
     * @return \OpenAPI\Client\Model\FPHSpedVAPIObjectsOMSIDrivenTripBusStop[]
     */
    public function getRegisteredBusStops()
    {
        return $this->container['registered_bus_stops'];
    }

    /**
     * Sets registered_bus_stops
     *
     * @param \OpenAPI\Client\Model\FPHSpedVAPIObjectsOMSIDrivenTripBusStop[] $registered_bus_stops registered_bus_stops
     *
     * @return self
     */
    public function setRegisteredBusStops($registered_bus_stops)
    {
        if (is_null($registered_bus_stops)) {
            array_push($this->openAPINullablesSetToNull, 'registered_bus_stops');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('registered_bus_stops', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['registered_bus_stops'] = $registered_bus_stops;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



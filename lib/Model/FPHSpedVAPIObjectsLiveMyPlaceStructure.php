<?php
/**
 * FPHSpedVAPIObjectsLiveMyPlaceStructure
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SpedV API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * FPHSpedVAPIObjectsLiveMyPlaceStructure Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class FPHSpedVAPIObjectsLiveMyPlaceStructure implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'FPH.SpedV.API.Objects.Live.MyPlaceStructure';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'sped_eur_place' => 'int',
        'sped_eur_diff_next' => 'float',
        'sped_eur_diff_last' => 'float',
        'sped_km_place' => 'int',
        'sped_km_diff_next' => 'float',
        'sped_km_diff_last' => 'float',
        'sped_weekly_eur_place' => 'int',
        'sped_weekly_eur_diff_next' => 'float',
        'sped_weekly_eur_diff_last' => 'float',
        'sped_weekly_kontor_eur_place' => 'int',
        'sped_weekly_kontor_eur_diff_next' => 'float',
        'sped_weekly_kontor_eur_diff_last' => 'float',
        'sped_weekly_external_eur_place' => 'int',
        'sped_weekly_external_eur_diff_next' => 'float',
        'sped_weekly_external_eur_diff_last' => 'float',
        'sped_weekly_km_place' => 'int',
        'sped_weekly_km_diff_next' => 'float',
        'sped_weekly_km_diff_last' => 'float',
        'sped_external_eur_place' => 'int',
        'sped_external_eur_diff_next' => 'float',
        'sped_external_eur_diff_last' => 'float',
        'user_eur_place' => 'int',
        'user_eur_diff_next' => 'float',
        'user_eur_diff_last' => 'float',
        'user_km_place' => 'int',
        'user_km_diff_next' => 'float',
        'user_km_diff_last' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'sped_eur_place' => 'int32',
        'sped_eur_diff_next' => 'double',
        'sped_eur_diff_last' => 'double',
        'sped_km_place' => 'int32',
        'sped_km_diff_next' => 'double',
        'sped_km_diff_last' => 'double',
        'sped_weekly_eur_place' => 'int32',
        'sped_weekly_eur_diff_next' => 'double',
        'sped_weekly_eur_diff_last' => 'double',
        'sped_weekly_kontor_eur_place' => 'int32',
        'sped_weekly_kontor_eur_diff_next' => 'double',
        'sped_weekly_kontor_eur_diff_last' => 'double',
        'sped_weekly_external_eur_place' => 'int32',
        'sped_weekly_external_eur_diff_next' => 'double',
        'sped_weekly_external_eur_diff_last' => 'double',
        'sped_weekly_km_place' => 'int32',
        'sped_weekly_km_diff_next' => 'double',
        'sped_weekly_km_diff_last' => 'double',
        'sped_external_eur_place' => 'int32',
        'sped_external_eur_diff_next' => 'double',
        'sped_external_eur_diff_last' => 'double',
        'user_eur_place' => 'int32',
        'user_eur_diff_next' => 'double',
        'user_eur_diff_last' => 'double',
        'user_km_place' => 'int32',
        'user_km_diff_next' => 'double',
        'user_km_diff_last' => 'double'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'sped_eur_place' => false,
        'sped_eur_diff_next' => false,
        'sped_eur_diff_last' => false,
        'sped_km_place' => false,
        'sped_km_diff_next' => false,
        'sped_km_diff_last' => false,
        'sped_weekly_eur_place' => false,
        'sped_weekly_eur_diff_next' => false,
        'sped_weekly_eur_diff_last' => false,
        'sped_weekly_kontor_eur_place' => false,
        'sped_weekly_kontor_eur_diff_next' => false,
        'sped_weekly_kontor_eur_diff_last' => false,
        'sped_weekly_external_eur_place' => false,
        'sped_weekly_external_eur_diff_next' => false,
        'sped_weekly_external_eur_diff_last' => false,
        'sped_weekly_km_place' => false,
        'sped_weekly_km_diff_next' => false,
        'sped_weekly_km_diff_last' => false,
        'sped_external_eur_place' => false,
        'sped_external_eur_diff_next' => false,
        'sped_external_eur_diff_last' => false,
        'user_eur_place' => false,
        'user_eur_diff_next' => false,
        'user_eur_diff_last' => false,
        'user_km_place' => false,
        'user_km_diff_next' => false,
        'user_km_diff_last' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'sped_eur_place' => 'spedEURPlace',
        'sped_eur_diff_next' => 'spedEURDiffNext',
        'sped_eur_diff_last' => 'spedEURDiffLast',
        'sped_km_place' => 'spedKMPlace',
        'sped_km_diff_next' => 'spedKMDiffNext',
        'sped_km_diff_last' => 'spedKMDiffLast',
        'sped_weekly_eur_place' => 'spedWeeklyEURPlace',
        'sped_weekly_eur_diff_next' => 'spedWeeklyEURDiffNext',
        'sped_weekly_eur_diff_last' => 'spedWeeklyEURDiffLast',
        'sped_weekly_kontor_eur_place' => 'spedWeeklyKontorEURPlace',
        'sped_weekly_kontor_eur_diff_next' => 'spedWeeklyKontorEURDiffNext',
        'sped_weekly_kontor_eur_diff_last' => 'spedWeeklyKontorEURDiffLast',
        'sped_weekly_external_eur_place' => 'spedWeeklyExternalEURPlace',
        'sped_weekly_external_eur_diff_next' => 'spedWeeklyExternalEURDiffNext',
        'sped_weekly_external_eur_diff_last' => 'spedWeeklyExternalEURDiffLast',
        'sped_weekly_km_place' => 'spedWeeklyKMPlace',
        'sped_weekly_km_diff_next' => 'spedWeeklyKMDiffNext',
        'sped_weekly_km_diff_last' => 'spedWeeklyKMDiffLast',
        'sped_external_eur_place' => 'spedExternalEURPlace',
        'sped_external_eur_diff_next' => 'spedExternalEURDiffNext',
        'sped_external_eur_diff_last' => 'spedExternalEURDiffLast',
        'user_eur_place' => 'userEURPlace',
        'user_eur_diff_next' => 'userEURDiffNext',
        'user_eur_diff_last' => 'userEURDiffLast',
        'user_km_place' => 'userKMPlace',
        'user_km_diff_next' => 'userKMDiffNext',
        'user_km_diff_last' => 'userKMDiffLast'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'sped_eur_place' => 'setSpedEurPlace',
        'sped_eur_diff_next' => 'setSpedEurDiffNext',
        'sped_eur_diff_last' => 'setSpedEurDiffLast',
        'sped_km_place' => 'setSpedKmPlace',
        'sped_km_diff_next' => 'setSpedKmDiffNext',
        'sped_km_diff_last' => 'setSpedKmDiffLast',
        'sped_weekly_eur_place' => 'setSpedWeeklyEurPlace',
        'sped_weekly_eur_diff_next' => 'setSpedWeeklyEurDiffNext',
        'sped_weekly_eur_diff_last' => 'setSpedWeeklyEurDiffLast',
        'sped_weekly_kontor_eur_place' => 'setSpedWeeklyKontorEurPlace',
        'sped_weekly_kontor_eur_diff_next' => 'setSpedWeeklyKontorEurDiffNext',
        'sped_weekly_kontor_eur_diff_last' => 'setSpedWeeklyKontorEurDiffLast',
        'sped_weekly_external_eur_place' => 'setSpedWeeklyExternalEurPlace',
        'sped_weekly_external_eur_diff_next' => 'setSpedWeeklyExternalEurDiffNext',
        'sped_weekly_external_eur_diff_last' => 'setSpedWeeklyExternalEurDiffLast',
        'sped_weekly_km_place' => 'setSpedWeeklyKmPlace',
        'sped_weekly_km_diff_next' => 'setSpedWeeklyKmDiffNext',
        'sped_weekly_km_diff_last' => 'setSpedWeeklyKmDiffLast',
        'sped_external_eur_place' => 'setSpedExternalEurPlace',
        'sped_external_eur_diff_next' => 'setSpedExternalEurDiffNext',
        'sped_external_eur_diff_last' => 'setSpedExternalEurDiffLast',
        'user_eur_place' => 'setUserEurPlace',
        'user_eur_diff_next' => 'setUserEurDiffNext',
        'user_eur_diff_last' => 'setUserEurDiffLast',
        'user_km_place' => 'setUserKmPlace',
        'user_km_diff_next' => 'setUserKmDiffNext',
        'user_km_diff_last' => 'setUserKmDiffLast'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'sped_eur_place' => 'getSpedEurPlace',
        'sped_eur_diff_next' => 'getSpedEurDiffNext',
        'sped_eur_diff_last' => 'getSpedEurDiffLast',
        'sped_km_place' => 'getSpedKmPlace',
        'sped_km_diff_next' => 'getSpedKmDiffNext',
        'sped_km_diff_last' => 'getSpedKmDiffLast',
        'sped_weekly_eur_place' => 'getSpedWeeklyEurPlace',
        'sped_weekly_eur_diff_next' => 'getSpedWeeklyEurDiffNext',
        'sped_weekly_eur_diff_last' => 'getSpedWeeklyEurDiffLast',
        'sped_weekly_kontor_eur_place' => 'getSpedWeeklyKontorEurPlace',
        'sped_weekly_kontor_eur_diff_next' => 'getSpedWeeklyKontorEurDiffNext',
        'sped_weekly_kontor_eur_diff_last' => 'getSpedWeeklyKontorEurDiffLast',
        'sped_weekly_external_eur_place' => 'getSpedWeeklyExternalEurPlace',
        'sped_weekly_external_eur_diff_next' => 'getSpedWeeklyExternalEurDiffNext',
        'sped_weekly_external_eur_diff_last' => 'getSpedWeeklyExternalEurDiffLast',
        'sped_weekly_km_place' => 'getSpedWeeklyKmPlace',
        'sped_weekly_km_diff_next' => 'getSpedWeeklyKmDiffNext',
        'sped_weekly_km_diff_last' => 'getSpedWeeklyKmDiffLast',
        'sped_external_eur_place' => 'getSpedExternalEurPlace',
        'sped_external_eur_diff_next' => 'getSpedExternalEurDiffNext',
        'sped_external_eur_diff_last' => 'getSpedExternalEurDiffLast',
        'user_eur_place' => 'getUserEurPlace',
        'user_eur_diff_next' => 'getUserEurDiffNext',
        'user_eur_diff_last' => 'getUserEurDiffLast',
        'user_km_place' => 'getUserKmPlace',
        'user_km_diff_next' => 'getUserKmDiffNext',
        'user_km_diff_last' => 'getUserKmDiffLast'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('sped_eur_place', $data ?? [], null);
        $this->setIfExists('sped_eur_diff_next', $data ?? [], null);
        $this->setIfExists('sped_eur_diff_last', $data ?? [], null);
        $this->setIfExists('sped_km_place', $data ?? [], null);
        $this->setIfExists('sped_km_diff_next', $data ?? [], null);
        $this->setIfExists('sped_km_diff_last', $data ?? [], null);
        $this->setIfExists('sped_weekly_eur_place', $data ?? [], null);
        $this->setIfExists('sped_weekly_eur_diff_next', $data ?? [], null);
        $this->setIfExists('sped_weekly_eur_diff_last', $data ?? [], null);
        $this->setIfExists('sped_weekly_kontor_eur_place', $data ?? [], null);
        $this->setIfExists('sped_weekly_kontor_eur_diff_next', $data ?? [], null);
        $this->setIfExists('sped_weekly_kontor_eur_diff_last', $data ?? [], null);
        $this->setIfExists('sped_weekly_external_eur_place', $data ?? [], null);
        $this->setIfExists('sped_weekly_external_eur_diff_next', $data ?? [], null);
        $this->setIfExists('sped_weekly_external_eur_diff_last', $data ?? [], null);
        $this->setIfExists('sped_weekly_km_place', $data ?? [], null);
        $this->setIfExists('sped_weekly_km_diff_next', $data ?? [], null);
        $this->setIfExists('sped_weekly_km_diff_last', $data ?? [], null);
        $this->setIfExists('sped_external_eur_place', $data ?? [], null);
        $this->setIfExists('sped_external_eur_diff_next', $data ?? [], null);
        $this->setIfExists('sped_external_eur_diff_last', $data ?? [], null);
        $this->setIfExists('user_eur_place', $data ?? [], null);
        $this->setIfExists('user_eur_diff_next', $data ?? [], null);
        $this->setIfExists('user_eur_diff_last', $data ?? [], null);
        $this->setIfExists('user_km_place', $data ?? [], null);
        $this->setIfExists('user_km_diff_next', $data ?? [], null);
        $this->setIfExists('user_km_diff_last', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['sped_eur_place'] === null) {
            $invalidProperties[] = "'sped_eur_place' can't be null";
        }
        if ($this->container['sped_eur_diff_next'] === null) {
            $invalidProperties[] = "'sped_eur_diff_next' can't be null";
        }
        if ($this->container['sped_eur_diff_last'] === null) {
            $invalidProperties[] = "'sped_eur_diff_last' can't be null";
        }
        if ($this->container['sped_km_place'] === null) {
            $invalidProperties[] = "'sped_km_place' can't be null";
        }
        if ($this->container['sped_km_diff_next'] === null) {
            $invalidProperties[] = "'sped_km_diff_next' can't be null";
        }
        if ($this->container['sped_km_diff_last'] === null) {
            $invalidProperties[] = "'sped_km_diff_last' can't be null";
        }
        if ($this->container['sped_weekly_eur_place'] === null) {
            $invalidProperties[] = "'sped_weekly_eur_place' can't be null";
        }
        if ($this->container['sped_weekly_eur_diff_next'] === null) {
            $invalidProperties[] = "'sped_weekly_eur_diff_next' can't be null";
        }
        if ($this->container['sped_weekly_eur_diff_last'] === null) {
            $invalidProperties[] = "'sped_weekly_eur_diff_last' can't be null";
        }
        if ($this->container['sped_weekly_kontor_eur_place'] === null) {
            $invalidProperties[] = "'sped_weekly_kontor_eur_place' can't be null";
        }
        if ($this->container['sped_weekly_kontor_eur_diff_next'] === null) {
            $invalidProperties[] = "'sped_weekly_kontor_eur_diff_next' can't be null";
        }
        if ($this->container['sped_weekly_kontor_eur_diff_last'] === null) {
            $invalidProperties[] = "'sped_weekly_kontor_eur_diff_last' can't be null";
        }
        if ($this->container['sped_weekly_external_eur_place'] === null) {
            $invalidProperties[] = "'sped_weekly_external_eur_place' can't be null";
        }
        if ($this->container['sped_weekly_external_eur_diff_next'] === null) {
            $invalidProperties[] = "'sped_weekly_external_eur_diff_next' can't be null";
        }
        if ($this->container['sped_weekly_external_eur_diff_last'] === null) {
            $invalidProperties[] = "'sped_weekly_external_eur_diff_last' can't be null";
        }
        if ($this->container['sped_weekly_km_place'] === null) {
            $invalidProperties[] = "'sped_weekly_km_place' can't be null";
        }
        if ($this->container['sped_weekly_km_diff_next'] === null) {
            $invalidProperties[] = "'sped_weekly_km_diff_next' can't be null";
        }
        if ($this->container['sped_weekly_km_diff_last'] === null) {
            $invalidProperties[] = "'sped_weekly_km_diff_last' can't be null";
        }
        if ($this->container['sped_external_eur_place'] === null) {
            $invalidProperties[] = "'sped_external_eur_place' can't be null";
        }
        if ($this->container['sped_external_eur_diff_next'] === null) {
            $invalidProperties[] = "'sped_external_eur_diff_next' can't be null";
        }
        if ($this->container['sped_external_eur_diff_last'] === null) {
            $invalidProperties[] = "'sped_external_eur_diff_last' can't be null";
        }
        if ($this->container['user_eur_place'] === null) {
            $invalidProperties[] = "'user_eur_place' can't be null";
        }
        if ($this->container['user_eur_diff_next'] === null) {
            $invalidProperties[] = "'user_eur_diff_next' can't be null";
        }
        if ($this->container['user_eur_diff_last'] === null) {
            $invalidProperties[] = "'user_eur_diff_last' can't be null";
        }
        if ($this->container['user_km_place'] === null) {
            $invalidProperties[] = "'user_km_place' can't be null";
        }
        if ($this->container['user_km_diff_next'] === null) {
            $invalidProperties[] = "'user_km_diff_next' can't be null";
        }
        if ($this->container['user_km_diff_last'] === null) {
            $invalidProperties[] = "'user_km_diff_last' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets sped_eur_place
     *
     * @return int
     */
    public function getSpedEurPlace()
    {
        return $this->container['sped_eur_place'];
    }

    /**
     * Sets sped_eur_place
     *
     * @param int $sped_eur_place sped_eur_place
     *
     * @return self
     */
    public function setSpedEurPlace($sped_eur_place)
    {
        if (is_null($sped_eur_place)) {
            throw new \InvalidArgumentException('non-nullable sped_eur_place cannot be null');
        }
        $this->container['sped_eur_place'] = $sped_eur_place;

        return $this;
    }

    /**
     * Gets sped_eur_diff_next
     *
     * @return float
     */
    public function getSpedEurDiffNext()
    {
        return $this->container['sped_eur_diff_next'];
    }

    /**
     * Sets sped_eur_diff_next
     *
     * @param float $sped_eur_diff_next sped_eur_diff_next
     *
     * @return self
     */
    public function setSpedEurDiffNext($sped_eur_diff_next)
    {
        if (is_null($sped_eur_diff_next)) {
            throw new \InvalidArgumentException('non-nullable sped_eur_diff_next cannot be null');
        }
        $this->container['sped_eur_diff_next'] = $sped_eur_diff_next;

        return $this;
    }

    /**
     * Gets sped_eur_diff_last
     *
     * @return float
     */
    public function getSpedEurDiffLast()
    {
        return $this->container['sped_eur_diff_last'];
    }

    /**
     * Sets sped_eur_diff_last
     *
     * @param float $sped_eur_diff_last sped_eur_diff_last
     *
     * @return self
     */
    public function setSpedEurDiffLast($sped_eur_diff_last)
    {
        if (is_null($sped_eur_diff_last)) {
            throw new \InvalidArgumentException('non-nullable sped_eur_diff_last cannot be null');
        }
        $this->container['sped_eur_diff_last'] = $sped_eur_diff_last;

        return $this;
    }

    /**
     * Gets sped_km_place
     *
     * @return int
     */
    public function getSpedKmPlace()
    {
        return $this->container['sped_km_place'];
    }

    /**
     * Sets sped_km_place
     *
     * @param int $sped_km_place sped_km_place
     *
     * @return self
     */
    public function setSpedKmPlace($sped_km_place)
    {
        if (is_null($sped_km_place)) {
            throw new \InvalidArgumentException('non-nullable sped_km_place cannot be null');
        }
        $this->container['sped_km_place'] = $sped_km_place;

        return $this;
    }

    /**
     * Gets sped_km_diff_next
     *
     * @return float
     */
    public function getSpedKmDiffNext()
    {
        return $this->container['sped_km_diff_next'];
    }

    /**
     * Sets sped_km_diff_next
     *
     * @param float $sped_km_diff_next sped_km_diff_next
     *
     * @return self
     */
    public function setSpedKmDiffNext($sped_km_diff_next)
    {
        if (is_null($sped_km_diff_next)) {
            throw new \InvalidArgumentException('non-nullable sped_km_diff_next cannot be null');
        }
        $this->container['sped_km_diff_next'] = $sped_km_diff_next;

        return $this;
    }

    /**
     * Gets sped_km_diff_last
     *
     * @return float
     */
    public function getSpedKmDiffLast()
    {
        return $this->container['sped_km_diff_last'];
    }

    /**
     * Sets sped_km_diff_last
     *
     * @param float $sped_km_diff_last sped_km_diff_last
     *
     * @return self
     */
    public function setSpedKmDiffLast($sped_km_diff_last)
    {
        if (is_null($sped_km_diff_last)) {
            throw new \InvalidArgumentException('non-nullable sped_km_diff_last cannot be null');
        }
        $this->container['sped_km_diff_last'] = $sped_km_diff_last;

        return $this;
    }

    /**
     * Gets sped_weekly_eur_place
     *
     * @return int
     */
    public function getSpedWeeklyEurPlace()
    {
        return $this->container['sped_weekly_eur_place'];
    }

    /**
     * Sets sped_weekly_eur_place
     *
     * @param int $sped_weekly_eur_place sped_weekly_eur_place
     *
     * @return self
     */
    public function setSpedWeeklyEurPlace($sped_weekly_eur_place)
    {
        if (is_null($sped_weekly_eur_place)) {
            throw new \InvalidArgumentException('non-nullable sped_weekly_eur_place cannot be null');
        }
        $this->container['sped_weekly_eur_place'] = $sped_weekly_eur_place;

        return $this;
    }

    /**
     * Gets sped_weekly_eur_diff_next
     *
     * @return float
     */
    public function getSpedWeeklyEurDiffNext()
    {
        return $this->container['sped_weekly_eur_diff_next'];
    }

    /**
     * Sets sped_weekly_eur_diff_next
     *
     * @param float $sped_weekly_eur_diff_next sped_weekly_eur_diff_next
     *
     * @return self
     */
    public function setSpedWeeklyEurDiffNext($sped_weekly_eur_diff_next)
    {
        if (is_null($sped_weekly_eur_diff_next)) {
            throw new \InvalidArgumentException('non-nullable sped_weekly_eur_diff_next cannot be null');
        }
        $this->container['sped_weekly_eur_diff_next'] = $sped_weekly_eur_diff_next;

        return $this;
    }

    /**
     * Gets sped_weekly_eur_diff_last
     *
     * @return float
     */
    public function getSpedWeeklyEurDiffLast()
    {
        return $this->container['sped_weekly_eur_diff_last'];
    }

    /**
     * Sets sped_weekly_eur_diff_last
     *
     * @param float $sped_weekly_eur_diff_last sped_weekly_eur_diff_last
     *
     * @return self
     */
    public function setSpedWeeklyEurDiffLast($sped_weekly_eur_diff_last)
    {
        if (is_null($sped_weekly_eur_diff_last)) {
            throw new \InvalidArgumentException('non-nullable sped_weekly_eur_diff_last cannot be null');
        }
        $this->container['sped_weekly_eur_diff_last'] = $sped_weekly_eur_diff_last;

        return $this;
    }

    /**
     * Gets sped_weekly_kontor_eur_place
     *
     * @return int
     */
    public function getSpedWeeklyKontorEurPlace()
    {
        return $this->container['sped_weekly_kontor_eur_place'];
    }

    /**
     * Sets sped_weekly_kontor_eur_place
     *
     * @param int $sped_weekly_kontor_eur_place sped_weekly_kontor_eur_place
     *
     * @return self
     */
    public function setSpedWeeklyKontorEurPlace($sped_weekly_kontor_eur_place)
    {
        if (is_null($sped_weekly_kontor_eur_place)) {
            throw new \InvalidArgumentException('non-nullable sped_weekly_kontor_eur_place cannot be null');
        }
        $this->container['sped_weekly_kontor_eur_place'] = $sped_weekly_kontor_eur_place;

        return $this;
    }

    /**
     * Gets sped_weekly_kontor_eur_diff_next
     *
     * @return float
     */
    public function getSpedWeeklyKontorEurDiffNext()
    {
        return $this->container['sped_weekly_kontor_eur_diff_next'];
    }

    /**
     * Sets sped_weekly_kontor_eur_diff_next
     *
     * @param float $sped_weekly_kontor_eur_diff_next sped_weekly_kontor_eur_diff_next
     *
     * @return self
     */
    public function setSpedWeeklyKontorEurDiffNext($sped_weekly_kontor_eur_diff_next)
    {
        if (is_null($sped_weekly_kontor_eur_diff_next)) {
            throw new \InvalidArgumentException('non-nullable sped_weekly_kontor_eur_diff_next cannot be null');
        }
        $this->container['sped_weekly_kontor_eur_diff_next'] = $sped_weekly_kontor_eur_diff_next;

        return $this;
    }

    /**
     * Gets sped_weekly_kontor_eur_diff_last
     *
     * @return float
     */
    public function getSpedWeeklyKontorEurDiffLast()
    {
        return $this->container['sped_weekly_kontor_eur_diff_last'];
    }

    /**
     * Sets sped_weekly_kontor_eur_diff_last
     *
     * @param float $sped_weekly_kontor_eur_diff_last sped_weekly_kontor_eur_diff_last
     *
     * @return self
     */
    public function setSpedWeeklyKontorEurDiffLast($sped_weekly_kontor_eur_diff_last)
    {
        if (is_null($sped_weekly_kontor_eur_diff_last)) {
            throw new \InvalidArgumentException('non-nullable sped_weekly_kontor_eur_diff_last cannot be null');
        }
        $this->container['sped_weekly_kontor_eur_diff_last'] = $sped_weekly_kontor_eur_diff_last;

        return $this;
    }

    /**
     * Gets sped_weekly_external_eur_place
     *
     * @return int
     */
    public function getSpedWeeklyExternalEurPlace()
    {
        return $this->container['sped_weekly_external_eur_place'];
    }

    /**
     * Sets sped_weekly_external_eur_place
     *
     * @param int $sped_weekly_external_eur_place sped_weekly_external_eur_place
     *
     * @return self
     */
    public function setSpedWeeklyExternalEurPlace($sped_weekly_external_eur_place)
    {
        if (is_null($sped_weekly_external_eur_place)) {
            throw new \InvalidArgumentException('non-nullable sped_weekly_external_eur_place cannot be null');
        }
        $this->container['sped_weekly_external_eur_place'] = $sped_weekly_external_eur_place;

        return $this;
    }

    /**
     * Gets sped_weekly_external_eur_diff_next
     *
     * @return float
     */
    public function getSpedWeeklyExternalEurDiffNext()
    {
        return $this->container['sped_weekly_external_eur_diff_next'];
    }

    /**
     * Sets sped_weekly_external_eur_diff_next
     *
     * @param float $sped_weekly_external_eur_diff_next sped_weekly_external_eur_diff_next
     *
     * @return self
     */
    public function setSpedWeeklyExternalEurDiffNext($sped_weekly_external_eur_diff_next)
    {
        if (is_null($sped_weekly_external_eur_diff_next)) {
            throw new \InvalidArgumentException('non-nullable sped_weekly_external_eur_diff_next cannot be null');
        }
        $this->container['sped_weekly_external_eur_diff_next'] = $sped_weekly_external_eur_diff_next;

        return $this;
    }

    /**
     * Gets sped_weekly_external_eur_diff_last
     *
     * @return float
     */
    public function getSpedWeeklyExternalEurDiffLast()
    {
        return $this->container['sped_weekly_external_eur_diff_last'];
    }

    /**
     * Sets sped_weekly_external_eur_diff_last
     *
     * @param float $sped_weekly_external_eur_diff_last sped_weekly_external_eur_diff_last
     *
     * @return self
     */
    public function setSpedWeeklyExternalEurDiffLast($sped_weekly_external_eur_diff_last)
    {
        if (is_null($sped_weekly_external_eur_diff_last)) {
            throw new \InvalidArgumentException('non-nullable sped_weekly_external_eur_diff_last cannot be null');
        }
        $this->container['sped_weekly_external_eur_diff_last'] = $sped_weekly_external_eur_diff_last;

        return $this;
    }

    /**
     * Gets sped_weekly_km_place
     *
     * @return int
     */
    public function getSpedWeeklyKmPlace()
    {
        return $this->container['sped_weekly_km_place'];
    }

    /**
     * Sets sped_weekly_km_place
     *
     * @param int $sped_weekly_km_place sped_weekly_km_place
     *
     * @return self
     */
    public function setSpedWeeklyKmPlace($sped_weekly_km_place)
    {
        if (is_null($sped_weekly_km_place)) {
            throw new \InvalidArgumentException('non-nullable sped_weekly_km_place cannot be null');
        }
        $this->container['sped_weekly_km_place'] = $sped_weekly_km_place;

        return $this;
    }

    /**
     * Gets sped_weekly_km_diff_next
     *
     * @return float
     */
    public function getSpedWeeklyKmDiffNext()
    {
        return $this->container['sped_weekly_km_diff_next'];
    }

    /**
     * Sets sped_weekly_km_diff_next
     *
     * @param float $sped_weekly_km_diff_next sped_weekly_km_diff_next
     *
     * @return self
     */
    public function setSpedWeeklyKmDiffNext($sped_weekly_km_diff_next)
    {
        if (is_null($sped_weekly_km_diff_next)) {
            throw new \InvalidArgumentException('non-nullable sped_weekly_km_diff_next cannot be null');
        }
        $this->container['sped_weekly_km_diff_next'] = $sped_weekly_km_diff_next;

        return $this;
    }

    /**
     * Gets sped_weekly_km_diff_last
     *
     * @return float
     */
    public function getSpedWeeklyKmDiffLast()
    {
        return $this->container['sped_weekly_km_diff_last'];
    }

    /**
     * Sets sped_weekly_km_diff_last
     *
     * @param float $sped_weekly_km_diff_last sped_weekly_km_diff_last
     *
     * @return self
     */
    public function setSpedWeeklyKmDiffLast($sped_weekly_km_diff_last)
    {
        if (is_null($sped_weekly_km_diff_last)) {
            throw new \InvalidArgumentException('non-nullable sped_weekly_km_diff_last cannot be null');
        }
        $this->container['sped_weekly_km_diff_last'] = $sped_weekly_km_diff_last;

        return $this;
    }

    /**
     * Gets sped_external_eur_place
     *
     * @return int
     */
    public function getSpedExternalEurPlace()
    {
        return $this->container['sped_external_eur_place'];
    }

    /**
     * Sets sped_external_eur_place
     *
     * @param int $sped_external_eur_place sped_external_eur_place
     *
     * @return self
     */
    public function setSpedExternalEurPlace($sped_external_eur_place)
    {
        if (is_null($sped_external_eur_place)) {
            throw new \InvalidArgumentException('non-nullable sped_external_eur_place cannot be null');
        }
        $this->container['sped_external_eur_place'] = $sped_external_eur_place;

        return $this;
    }

    /**
     * Gets sped_external_eur_diff_next
     *
     * @return float
     */
    public function getSpedExternalEurDiffNext()
    {
        return $this->container['sped_external_eur_diff_next'];
    }

    /**
     * Sets sped_external_eur_diff_next
     *
     * @param float $sped_external_eur_diff_next sped_external_eur_diff_next
     *
     * @return self
     */
    public function setSpedExternalEurDiffNext($sped_external_eur_diff_next)
    {
        if (is_null($sped_external_eur_diff_next)) {
            throw new \InvalidArgumentException('non-nullable sped_external_eur_diff_next cannot be null');
        }
        $this->container['sped_external_eur_diff_next'] = $sped_external_eur_diff_next;

        return $this;
    }

    /**
     * Gets sped_external_eur_diff_last
     *
     * @return float
     */
    public function getSpedExternalEurDiffLast()
    {
        return $this->container['sped_external_eur_diff_last'];
    }

    /**
     * Sets sped_external_eur_diff_last
     *
     * @param float $sped_external_eur_diff_last sped_external_eur_diff_last
     *
     * @return self
     */
    public function setSpedExternalEurDiffLast($sped_external_eur_diff_last)
    {
        if (is_null($sped_external_eur_diff_last)) {
            throw new \InvalidArgumentException('non-nullable sped_external_eur_diff_last cannot be null');
        }
        $this->container['sped_external_eur_diff_last'] = $sped_external_eur_diff_last;

        return $this;
    }

    /**
     * Gets user_eur_place
     *
     * @return int
     */
    public function getUserEurPlace()
    {
        return $this->container['user_eur_place'];
    }

    /**
     * Sets user_eur_place
     *
     * @param int $user_eur_place user_eur_place
     *
     * @return self
     */
    public function setUserEurPlace($user_eur_place)
    {
        if (is_null($user_eur_place)) {
            throw new \InvalidArgumentException('non-nullable user_eur_place cannot be null');
        }
        $this->container['user_eur_place'] = $user_eur_place;

        return $this;
    }

    /**
     * Gets user_eur_diff_next
     *
     * @return float
     */
    public function getUserEurDiffNext()
    {
        return $this->container['user_eur_diff_next'];
    }

    /**
     * Sets user_eur_diff_next
     *
     * @param float $user_eur_diff_next user_eur_diff_next
     *
     * @return self
     */
    public function setUserEurDiffNext($user_eur_diff_next)
    {
        if (is_null($user_eur_diff_next)) {
            throw new \InvalidArgumentException('non-nullable user_eur_diff_next cannot be null');
        }
        $this->container['user_eur_diff_next'] = $user_eur_diff_next;

        return $this;
    }

    /**
     * Gets user_eur_diff_last
     *
     * @return float
     */
    public function getUserEurDiffLast()
    {
        return $this->container['user_eur_diff_last'];
    }

    /**
     * Sets user_eur_diff_last
     *
     * @param float $user_eur_diff_last user_eur_diff_last
     *
     * @return self
     */
    public function setUserEurDiffLast($user_eur_diff_last)
    {
        if (is_null($user_eur_diff_last)) {
            throw new \InvalidArgumentException('non-nullable user_eur_diff_last cannot be null');
        }
        $this->container['user_eur_diff_last'] = $user_eur_diff_last;

        return $this;
    }

    /**
     * Gets user_km_place
     *
     * @return int
     */
    public function getUserKmPlace()
    {
        return $this->container['user_km_place'];
    }

    /**
     * Sets user_km_place
     *
     * @param int $user_km_place user_km_place
     *
     * @return self
     */
    public function setUserKmPlace($user_km_place)
    {
        if (is_null($user_km_place)) {
            throw new \InvalidArgumentException('non-nullable user_km_place cannot be null');
        }
        $this->container['user_km_place'] = $user_km_place;

        return $this;
    }

    /**
     * Gets user_km_diff_next
     *
     * @return float
     */
    public function getUserKmDiffNext()
    {
        return $this->container['user_km_diff_next'];
    }

    /**
     * Sets user_km_diff_next
     *
     * @param float $user_km_diff_next user_km_diff_next
     *
     * @return self
     */
    public function setUserKmDiffNext($user_km_diff_next)
    {
        if (is_null($user_km_diff_next)) {
            throw new \InvalidArgumentException('non-nullable user_km_diff_next cannot be null');
        }
        $this->container['user_km_diff_next'] = $user_km_diff_next;

        return $this;
    }

    /**
     * Gets user_km_diff_last
     *
     * @return float
     */
    public function getUserKmDiffLast()
    {
        return $this->container['user_km_diff_last'];
    }

    /**
     * Sets user_km_diff_last
     *
     * @param float $user_km_diff_last user_km_diff_last
     *
     * @return self
     */
    public function setUserKmDiffLast($user_km_diff_last)
    {
        if (is_null($user_km_diff_last)) {
            throw new \InvalidArgumentException('non-nullable user_km_diff_last cannot be null');
        }
        $this->container['user_km_diff_last'] = $user_km_diff_last;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



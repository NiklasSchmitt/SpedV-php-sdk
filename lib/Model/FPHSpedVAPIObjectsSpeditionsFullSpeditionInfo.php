<?php
/**
 * FPHSpedVAPIObjectsSpeditionsFullSpeditionInfo
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SpedV API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * FPHSpedVAPIObjectsSpeditionsFullSpeditionInfo Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class FPHSpedVAPIObjectsSpeditionsFullSpeditionInfo implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'FPH.SpedV.API.Objects.Speditions.FullSpeditionInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'name' => 'string',
        'short_name' => 'string',
        'appl_img' => 'string',
        'appl_text' => 'string',
        'admin_announce' => 'string',
        'discord_web_hook' => 'string',
        'expenses' => 'int',
        'max_truck_per_user' => 'int',
        'max_allowed_velocity' => 'int',
        'max_allowed_velocity_ats' => 'int',
        'dmg_report_from_percent' => 'int',
        'min_cool_down' => 'float',
        'cool_down' => 'float',
        'spedition_type' => '\OpenAPI\Client\Model\FPHSpedVAPIEnumsSpeditionType',
        'is_visible' => 'bool',
        'accepts_applicants' => 'bool',
        'one_time_join_passwords' => 'string[]',
        'spedition_founder' => '\OpenAPI\Client\Model\FPHSpedVAPIObjectsUsersUser',
        'color_collections' => '\OpenAPI\Client\Model\FPHSpedVAPIObjectsSaveGameSaveGameColor[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int32',
        'name' => null,
        'short_name' => null,
        'appl_img' => null,
        'appl_text' => null,
        'admin_announce' => null,
        'discord_web_hook' => null,
        'expenses' => 'int32',
        'max_truck_per_user' => 'int32',
        'max_allowed_velocity' => 'int32',
        'max_allowed_velocity_ats' => 'int32',
        'dmg_report_from_percent' => 'int32',
        'min_cool_down' => 'double',
        'cool_down' => 'double',
        'spedition_type' => null,
        'is_visible' => null,
        'accepts_applicants' => null,
        'one_time_join_passwords' => null,
        'spedition_founder' => null,
        'color_collections' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'name' => true,
        'short_name' => true,
        'appl_img' => true,
        'appl_text' => true,
        'admin_announce' => true,
        'discord_web_hook' => true,
        'expenses' => false,
        'max_truck_per_user' => false,
        'max_allowed_velocity' => false,
        'max_allowed_velocity_ats' => false,
        'dmg_report_from_percent' => false,
        'min_cool_down' => false,
        'cool_down' => false,
        'spedition_type' => false,
        'is_visible' => false,
        'accepts_applicants' => false,
        'one_time_join_passwords' => true,
        'spedition_founder' => true,
        'color_collections' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'short_name' => 'shortName',
        'appl_img' => 'applImg',
        'appl_text' => 'applText',
        'admin_announce' => 'adminAnnounce',
        'discord_web_hook' => 'discordWebHook',
        'expenses' => 'expenses',
        'max_truck_per_user' => 'maxTruckPerUser',
        'max_allowed_velocity' => 'maxAllowedVelocity',
        'max_allowed_velocity_ats' => 'maxAllowedVelocityATS',
        'dmg_report_from_percent' => 'dmgReportFromPercent',
        'min_cool_down' => 'minCoolDown',
        'cool_down' => 'coolDown',
        'spedition_type' => 'speditionType',
        'is_visible' => 'isVisible',
        'accepts_applicants' => 'acceptsApplicants',
        'one_time_join_passwords' => 'oneTimeJoinPasswords',
        'spedition_founder' => 'speditionFounder',
        'color_collections' => 'colorCollections'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'short_name' => 'setShortName',
        'appl_img' => 'setApplImg',
        'appl_text' => 'setApplText',
        'admin_announce' => 'setAdminAnnounce',
        'discord_web_hook' => 'setDiscordWebHook',
        'expenses' => 'setExpenses',
        'max_truck_per_user' => 'setMaxTruckPerUser',
        'max_allowed_velocity' => 'setMaxAllowedVelocity',
        'max_allowed_velocity_ats' => 'setMaxAllowedVelocityAts',
        'dmg_report_from_percent' => 'setDmgReportFromPercent',
        'min_cool_down' => 'setMinCoolDown',
        'cool_down' => 'setCoolDown',
        'spedition_type' => 'setSpeditionType',
        'is_visible' => 'setIsVisible',
        'accepts_applicants' => 'setAcceptsApplicants',
        'one_time_join_passwords' => 'setOneTimeJoinPasswords',
        'spedition_founder' => 'setSpeditionFounder',
        'color_collections' => 'setColorCollections'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'short_name' => 'getShortName',
        'appl_img' => 'getApplImg',
        'appl_text' => 'getApplText',
        'admin_announce' => 'getAdminAnnounce',
        'discord_web_hook' => 'getDiscordWebHook',
        'expenses' => 'getExpenses',
        'max_truck_per_user' => 'getMaxTruckPerUser',
        'max_allowed_velocity' => 'getMaxAllowedVelocity',
        'max_allowed_velocity_ats' => 'getMaxAllowedVelocityAts',
        'dmg_report_from_percent' => 'getDmgReportFromPercent',
        'min_cool_down' => 'getMinCoolDown',
        'cool_down' => 'getCoolDown',
        'spedition_type' => 'getSpeditionType',
        'is_visible' => 'getIsVisible',
        'accepts_applicants' => 'getAcceptsApplicants',
        'one_time_join_passwords' => 'getOneTimeJoinPasswords',
        'spedition_founder' => 'getSpeditionFounder',
        'color_collections' => 'getColorCollections'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('short_name', $data ?? [], null);
        $this->setIfExists('appl_img', $data ?? [], null);
        $this->setIfExists('appl_text', $data ?? [], null);
        $this->setIfExists('admin_announce', $data ?? [], null);
        $this->setIfExists('discord_web_hook', $data ?? [], null);
        $this->setIfExists('expenses', $data ?? [], null);
        $this->setIfExists('max_truck_per_user', $data ?? [], null);
        $this->setIfExists('max_allowed_velocity', $data ?? [], null);
        $this->setIfExists('max_allowed_velocity_ats', $data ?? [], null);
        $this->setIfExists('dmg_report_from_percent', $data ?? [], null);
        $this->setIfExists('min_cool_down', $data ?? [], null);
        $this->setIfExists('cool_down', $data ?? [], null);
        $this->setIfExists('spedition_type', $data ?? [], null);
        $this->setIfExists('is_visible', $data ?? [], null);
        $this->setIfExists('accepts_applicants', $data ?? [], null);
        $this->setIfExists('one_time_join_passwords', $data ?? [], null);
        $this->setIfExists('spedition_founder', $data ?? [], null);
        $this->setIfExists('color_collections', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['short_name'] === null) {
            $invalidProperties[] = "'short_name' can't be null";
        }
        if ($this->container['appl_img'] === null) {
            $invalidProperties[] = "'appl_img' can't be null";
        }
        if ($this->container['appl_text'] === null) {
            $invalidProperties[] = "'appl_text' can't be null";
        }
        if ($this->container['admin_announce'] === null) {
            $invalidProperties[] = "'admin_announce' can't be null";
        }
        if ($this->container['discord_web_hook'] === null) {
            $invalidProperties[] = "'discord_web_hook' can't be null";
        }
        if ($this->container['expenses'] === null) {
            $invalidProperties[] = "'expenses' can't be null";
        }
        if ($this->container['max_truck_per_user'] === null) {
            $invalidProperties[] = "'max_truck_per_user' can't be null";
        }
        if ($this->container['max_allowed_velocity'] === null) {
            $invalidProperties[] = "'max_allowed_velocity' can't be null";
        }
        if ($this->container['max_allowed_velocity_ats'] === null) {
            $invalidProperties[] = "'max_allowed_velocity_ats' can't be null";
        }
        if ($this->container['dmg_report_from_percent'] === null) {
            $invalidProperties[] = "'dmg_report_from_percent' can't be null";
        }
        if ($this->container['min_cool_down'] === null) {
            $invalidProperties[] = "'min_cool_down' can't be null";
        }
        if ($this->container['cool_down'] === null) {
            $invalidProperties[] = "'cool_down' can't be null";
        }
        if ($this->container['spedition_type'] === null) {
            $invalidProperties[] = "'spedition_type' can't be null";
        }
        if ($this->container['is_visible'] === null) {
            $invalidProperties[] = "'is_visible' can't be null";
        }
        if ($this->container['accepts_applicants'] === null) {
            $invalidProperties[] = "'accepts_applicants' can't be null";
        }
        if ($this->container['one_time_join_passwords'] === null) {
            $invalidProperties[] = "'one_time_join_passwords' can't be null";
        }
        if ($this->container['spedition_founder'] === null) {
            $invalidProperties[] = "'spedition_founder' can't be null";
        }
        if ($this->container['color_collections'] === null) {
            $invalidProperties[] = "'color_collections' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            array_push($this->openAPINullablesSetToNull, 'name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets short_name
     *
     * @return string
     */
    public function getShortName()
    {
        return $this->container['short_name'];
    }

    /**
     * Sets short_name
     *
     * @param string $short_name short_name
     *
     * @return self
     */
    public function setShortName($short_name)
    {
        if (is_null($short_name)) {
            array_push($this->openAPINullablesSetToNull, 'short_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('short_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['short_name'] = $short_name;

        return $this;
    }

    /**
     * Gets appl_img
     *
     * @return string
     */
    public function getApplImg()
    {
        return $this->container['appl_img'];
    }

    /**
     * Sets appl_img
     *
     * @param string $appl_img appl_img
     *
     * @return self
     */
    public function setApplImg($appl_img)
    {
        if (is_null($appl_img)) {
            array_push($this->openAPINullablesSetToNull, 'appl_img');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('appl_img', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['appl_img'] = $appl_img;

        return $this;
    }

    /**
     * Gets appl_text
     *
     * @return string
     */
    public function getApplText()
    {
        return $this->container['appl_text'];
    }

    /**
     * Sets appl_text
     *
     * @param string $appl_text appl_text
     *
     * @return self
     */
    public function setApplText($appl_text)
    {
        if (is_null($appl_text)) {
            array_push($this->openAPINullablesSetToNull, 'appl_text');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('appl_text', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['appl_text'] = $appl_text;

        return $this;
    }

    /**
     * Gets admin_announce
     *
     * @return string
     */
    public function getAdminAnnounce()
    {
        return $this->container['admin_announce'];
    }

    /**
     * Sets admin_announce
     *
     * @param string $admin_announce admin_announce
     *
     * @return self
     */
    public function setAdminAnnounce($admin_announce)
    {
        if (is_null($admin_announce)) {
            array_push($this->openAPINullablesSetToNull, 'admin_announce');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('admin_announce', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['admin_announce'] = $admin_announce;

        return $this;
    }

    /**
     * Gets discord_web_hook
     *
     * @return string
     */
    public function getDiscordWebHook()
    {
        return $this->container['discord_web_hook'];
    }

    /**
     * Sets discord_web_hook
     *
     * @param string $discord_web_hook discord_web_hook
     *
     * @return self
     */
    public function setDiscordWebHook($discord_web_hook)
    {
        if (is_null($discord_web_hook)) {
            array_push($this->openAPINullablesSetToNull, 'discord_web_hook');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('discord_web_hook', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['discord_web_hook'] = $discord_web_hook;

        return $this;
    }

    /**
     * Gets expenses
     *
     * @return int
     */
    public function getExpenses()
    {
        return $this->container['expenses'];
    }

    /**
     * Sets expenses
     *
     * @param int $expenses expenses
     *
     * @return self
     */
    public function setExpenses($expenses)
    {
        if (is_null($expenses)) {
            throw new \InvalidArgumentException('non-nullable expenses cannot be null');
        }
        $this->container['expenses'] = $expenses;

        return $this;
    }

    /**
     * Gets max_truck_per_user
     *
     * @return int
     */
    public function getMaxTruckPerUser()
    {
        return $this->container['max_truck_per_user'];
    }

    /**
     * Sets max_truck_per_user
     *
     * @param int $max_truck_per_user max_truck_per_user
     *
     * @return self
     */
    public function setMaxTruckPerUser($max_truck_per_user)
    {
        if (is_null($max_truck_per_user)) {
            throw new \InvalidArgumentException('non-nullable max_truck_per_user cannot be null');
        }
        $this->container['max_truck_per_user'] = $max_truck_per_user;

        return $this;
    }

    /**
     * Gets max_allowed_velocity
     *
     * @return int
     */
    public function getMaxAllowedVelocity()
    {
        return $this->container['max_allowed_velocity'];
    }

    /**
     * Sets max_allowed_velocity
     *
     * @param int $max_allowed_velocity max_allowed_velocity
     *
     * @return self
     */
    public function setMaxAllowedVelocity($max_allowed_velocity)
    {
        if (is_null($max_allowed_velocity)) {
            throw new \InvalidArgumentException('non-nullable max_allowed_velocity cannot be null');
        }
        $this->container['max_allowed_velocity'] = $max_allowed_velocity;

        return $this;
    }

    /**
     * Gets max_allowed_velocity_ats
     *
     * @return int
     */
    public function getMaxAllowedVelocityAts()
    {
        return $this->container['max_allowed_velocity_ats'];
    }

    /**
     * Sets max_allowed_velocity_ats
     *
     * @param int $max_allowed_velocity_ats max_allowed_velocity_ats
     *
     * @return self
     */
    public function setMaxAllowedVelocityAts($max_allowed_velocity_ats)
    {
        if (is_null($max_allowed_velocity_ats)) {
            throw new \InvalidArgumentException('non-nullable max_allowed_velocity_ats cannot be null');
        }
        $this->container['max_allowed_velocity_ats'] = $max_allowed_velocity_ats;

        return $this;
    }

    /**
     * Gets dmg_report_from_percent
     *
     * @return int
     */
    public function getDmgReportFromPercent()
    {
        return $this->container['dmg_report_from_percent'];
    }

    /**
     * Sets dmg_report_from_percent
     *
     * @param int $dmg_report_from_percent dmg_report_from_percent
     *
     * @return self
     */
    public function setDmgReportFromPercent($dmg_report_from_percent)
    {
        if (is_null($dmg_report_from_percent)) {
            throw new \InvalidArgumentException('non-nullable dmg_report_from_percent cannot be null');
        }
        $this->container['dmg_report_from_percent'] = $dmg_report_from_percent;

        return $this;
    }

    /**
     * Gets min_cool_down
     *
     * @return float
     */
    public function getMinCoolDown()
    {
        return $this->container['min_cool_down'];
    }

    /**
     * Sets min_cool_down
     *
     * @param float $min_cool_down min_cool_down
     *
     * @return self
     */
    public function setMinCoolDown($min_cool_down)
    {
        if (is_null($min_cool_down)) {
            throw new \InvalidArgumentException('non-nullable min_cool_down cannot be null');
        }
        $this->container['min_cool_down'] = $min_cool_down;

        return $this;
    }

    /**
     * Gets cool_down
     *
     * @return float
     */
    public function getCoolDown()
    {
        return $this->container['cool_down'];
    }

    /**
     * Sets cool_down
     *
     * @param float $cool_down cool_down
     *
     * @return self
     */
    public function setCoolDown($cool_down)
    {
        if (is_null($cool_down)) {
            throw new \InvalidArgumentException('non-nullable cool_down cannot be null');
        }
        $this->container['cool_down'] = $cool_down;

        return $this;
    }

    /**
     * Gets spedition_type
     *
     * @return \OpenAPI\Client\Model\FPHSpedVAPIEnumsSpeditionType
     */
    public function getSpeditionType()
    {
        return $this->container['spedition_type'];
    }

    /**
     * Sets spedition_type
     *
     * @param \OpenAPI\Client\Model\FPHSpedVAPIEnumsSpeditionType $spedition_type 0 = NonCompeting  1 = LightRealism  2 = RealEco  -1 = NotSet
     *
     * @return self
     */
    public function setSpeditionType($spedition_type)
    {
        if (is_null($spedition_type)) {
            throw new \InvalidArgumentException('non-nullable spedition_type cannot be null');
        }
        $this->container['spedition_type'] = $spedition_type;

        return $this;
    }

    /**
     * Gets is_visible
     *
     * @return bool
     */
    public function getIsVisible()
    {
        return $this->container['is_visible'];
    }

    /**
     * Sets is_visible
     *
     * @param bool $is_visible is_visible
     *
     * @return self
     */
    public function setIsVisible($is_visible)
    {
        if (is_null($is_visible)) {
            throw new \InvalidArgumentException('non-nullable is_visible cannot be null');
        }
        $this->container['is_visible'] = $is_visible;

        return $this;
    }

    /**
     * Gets accepts_applicants
     *
     * @return bool
     */
    public function getAcceptsApplicants()
    {
        return $this->container['accepts_applicants'];
    }

    /**
     * Sets accepts_applicants
     *
     * @param bool $accepts_applicants accepts_applicants
     *
     * @return self
     */
    public function setAcceptsApplicants($accepts_applicants)
    {
        if (is_null($accepts_applicants)) {
            throw new \InvalidArgumentException('non-nullable accepts_applicants cannot be null');
        }
        $this->container['accepts_applicants'] = $accepts_applicants;

        return $this;
    }

    /**
     * Gets one_time_join_passwords
     *
     * @return string[]
     */
    public function getOneTimeJoinPasswords()
    {
        return $this->container['one_time_join_passwords'];
    }

    /**
     * Sets one_time_join_passwords
     *
     * @param string[] $one_time_join_passwords one_time_join_passwords
     *
     * @return self
     */
    public function setOneTimeJoinPasswords($one_time_join_passwords)
    {
        if (is_null($one_time_join_passwords)) {
            array_push($this->openAPINullablesSetToNull, 'one_time_join_passwords');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('one_time_join_passwords', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['one_time_join_passwords'] = $one_time_join_passwords;

        return $this;
    }

    /**
     * Gets spedition_founder
     *
     * @return \OpenAPI\Client\Model\FPHSpedVAPIObjectsUsersUser
     */
    public function getSpeditionFounder()
    {
        return $this->container['spedition_founder'];
    }

    /**
     * Sets spedition_founder
     *
     * @param \OpenAPI\Client\Model\FPHSpedVAPIObjectsUsersUser $spedition_founder spedition_founder
     *
     * @return self
     */
    public function setSpeditionFounder($spedition_founder)
    {
        if (is_null($spedition_founder)) {
            array_push($this->openAPINullablesSetToNull, 'spedition_founder');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('spedition_founder', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['spedition_founder'] = $spedition_founder;

        return $this;
    }

    /**
     * Gets color_collections
     *
     * @return \OpenAPI\Client\Model\FPHSpedVAPIObjectsSaveGameSaveGameColor[]
     */
    public function getColorCollections()
    {
        return $this->container['color_collections'];
    }

    /**
     * Sets color_collections
     *
     * @param \OpenAPI\Client\Model\FPHSpedVAPIObjectsSaveGameSaveGameColor[] $color_collections color_collections
     *
     * @return self
     */
    public function setColorCollections($color_collections)
    {
        if (is_null($color_collections)) {
            array_push($this->openAPINullablesSetToNull, 'color_collections');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('color_collections', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['color_collections'] = $color_collections;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



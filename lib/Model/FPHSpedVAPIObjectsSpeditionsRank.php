<?php
/**
 * FPHSpedVAPIObjectsSpeditionsRank
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SpedV API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * FPHSpedVAPIObjectsSpeditionsRank Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class FPHSpedVAPIObjectsSpeditionsRank implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'FPH.SpedV.API.Objects.Speditions.Rank';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'name' => 'string',
        'salary' => 'int',
        'km_salary' => 'float',
        'sorting' => 'int',
        'is_start_up_rank' => 'bool',
        'is_leader' => 'bool',
        'is_inactive_rank' => 'bool',
        'inactive_time' => 'int',
        'color' => 'string',
        'rank_permissions' => '\OpenAPI\Client\Model\FPHSpedVAPIObjectsSpeditionsRankPermission[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int32',
        'name' => null,
        'salary' => 'int32',
        'km_salary' => 'double',
        'sorting' => 'int32',
        'is_start_up_rank' => null,
        'is_leader' => null,
        'is_inactive_rank' => null,
        'inactive_time' => 'int32',
        'color' => null,
        'rank_permissions' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'name' => true,
        'salary' => false,
        'km_salary' => false,
        'sorting' => false,
        'is_start_up_rank' => false,
        'is_leader' => false,
        'is_inactive_rank' => false,
        'inactive_time' => false,
        'color' => true,
        'rank_permissions' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'salary' => 'salary',
        'km_salary' => 'kmSalary',
        'sorting' => 'sorting',
        'is_start_up_rank' => 'isStartUpRank',
        'is_leader' => 'isLeader',
        'is_inactive_rank' => 'isInactiveRank',
        'inactive_time' => 'inactiveTime',
        'color' => 'color',
        'rank_permissions' => 'rankPermissions'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'salary' => 'setSalary',
        'km_salary' => 'setKmSalary',
        'sorting' => 'setSorting',
        'is_start_up_rank' => 'setIsStartUpRank',
        'is_leader' => 'setIsLeader',
        'is_inactive_rank' => 'setIsInactiveRank',
        'inactive_time' => 'setInactiveTime',
        'color' => 'setColor',
        'rank_permissions' => 'setRankPermissions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'salary' => 'getSalary',
        'km_salary' => 'getKmSalary',
        'sorting' => 'getSorting',
        'is_start_up_rank' => 'getIsStartUpRank',
        'is_leader' => 'getIsLeader',
        'is_inactive_rank' => 'getIsInactiveRank',
        'inactive_time' => 'getInactiveTime',
        'color' => 'getColor',
        'rank_permissions' => 'getRankPermissions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('salary', $data ?? [], null);
        $this->setIfExists('km_salary', $data ?? [], null);
        $this->setIfExists('sorting', $data ?? [], null);
        $this->setIfExists('is_start_up_rank', $data ?? [], null);
        $this->setIfExists('is_leader', $data ?? [], null);
        $this->setIfExists('is_inactive_rank', $data ?? [], null);
        $this->setIfExists('inactive_time', $data ?? [], null);
        $this->setIfExists('color', $data ?? [], null);
        $this->setIfExists('rank_permissions', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['salary'] === null) {
            $invalidProperties[] = "'salary' can't be null";
        }
        if ($this->container['km_salary'] === null) {
            $invalidProperties[] = "'km_salary' can't be null";
        }
        if ($this->container['sorting'] === null) {
            $invalidProperties[] = "'sorting' can't be null";
        }
        if ($this->container['is_start_up_rank'] === null) {
            $invalidProperties[] = "'is_start_up_rank' can't be null";
        }
        if ($this->container['is_leader'] === null) {
            $invalidProperties[] = "'is_leader' can't be null";
        }
        if ($this->container['is_inactive_rank'] === null) {
            $invalidProperties[] = "'is_inactive_rank' can't be null";
        }
        if ($this->container['inactive_time'] === null) {
            $invalidProperties[] = "'inactive_time' can't be null";
        }
        if ($this->container['color'] === null) {
            $invalidProperties[] = "'color' can't be null";
        }
        if ($this->container['rank_permissions'] === null) {
            $invalidProperties[] = "'rank_permissions' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            array_push($this->openAPINullablesSetToNull, 'name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets salary
     *
     * @return int
     */
    public function getSalary()
    {
        return $this->container['salary'];
    }

    /**
     * Sets salary
     *
     * @param int $salary salary
     *
     * @return self
     */
    public function setSalary($salary)
    {
        if (is_null($salary)) {
            throw new \InvalidArgumentException('non-nullable salary cannot be null');
        }
        $this->container['salary'] = $salary;

        return $this;
    }

    /**
     * Gets km_salary
     *
     * @return float
     */
    public function getKmSalary()
    {
        return $this->container['km_salary'];
    }

    /**
     * Sets km_salary
     *
     * @param float $km_salary km_salary
     *
     * @return self
     */
    public function setKmSalary($km_salary)
    {
        if (is_null($km_salary)) {
            throw new \InvalidArgumentException('non-nullable km_salary cannot be null');
        }
        $this->container['km_salary'] = $km_salary;

        return $this;
    }

    /**
     * Gets sorting
     *
     * @return int
     */
    public function getSorting()
    {
        return $this->container['sorting'];
    }

    /**
     * Sets sorting
     *
     * @param int $sorting sorting
     *
     * @return self
     */
    public function setSorting($sorting)
    {
        if (is_null($sorting)) {
            throw new \InvalidArgumentException('non-nullable sorting cannot be null');
        }
        $this->container['sorting'] = $sorting;

        return $this;
    }

    /**
     * Gets is_start_up_rank
     *
     * @return bool
     */
    public function getIsStartUpRank()
    {
        return $this->container['is_start_up_rank'];
    }

    /**
     * Sets is_start_up_rank
     *
     * @param bool $is_start_up_rank is_start_up_rank
     *
     * @return self
     */
    public function setIsStartUpRank($is_start_up_rank)
    {
        if (is_null($is_start_up_rank)) {
            throw new \InvalidArgumentException('non-nullable is_start_up_rank cannot be null');
        }
        $this->container['is_start_up_rank'] = $is_start_up_rank;

        return $this;
    }

    /**
     * Gets is_leader
     *
     * @return bool
     */
    public function getIsLeader()
    {
        return $this->container['is_leader'];
    }

    /**
     * Sets is_leader
     *
     * @param bool $is_leader is_leader
     *
     * @return self
     */
    public function setIsLeader($is_leader)
    {
        if (is_null($is_leader)) {
            throw new \InvalidArgumentException('non-nullable is_leader cannot be null');
        }
        $this->container['is_leader'] = $is_leader;

        return $this;
    }

    /**
     * Gets is_inactive_rank
     *
     * @return bool
     */
    public function getIsInactiveRank()
    {
        return $this->container['is_inactive_rank'];
    }

    /**
     * Sets is_inactive_rank
     *
     * @param bool $is_inactive_rank is_inactive_rank
     *
     * @return self
     */
    public function setIsInactiveRank($is_inactive_rank)
    {
        if (is_null($is_inactive_rank)) {
            throw new \InvalidArgumentException('non-nullable is_inactive_rank cannot be null');
        }
        $this->container['is_inactive_rank'] = $is_inactive_rank;

        return $this;
    }

    /**
     * Gets inactive_time
     *
     * @return int
     */
    public function getInactiveTime()
    {
        return $this->container['inactive_time'];
    }

    /**
     * Sets inactive_time
     *
     * @param int $inactive_time inactive_time
     *
     * @return self
     */
    public function setInactiveTime($inactive_time)
    {
        if (is_null($inactive_time)) {
            throw new \InvalidArgumentException('non-nullable inactive_time cannot be null');
        }
        $this->container['inactive_time'] = $inactive_time;

        return $this;
    }

    /**
     * Gets color
     *
     * @return string
     */
    public function getColor()
    {
        return $this->container['color'];
    }

    /**
     * Sets color
     *
     * @param string $color color
     *
     * @return self
     */
    public function setColor($color)
    {
        if (is_null($color)) {
            array_push($this->openAPINullablesSetToNull, 'color');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('color', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['color'] = $color;

        return $this;
    }

    /**
     * Gets rank_permissions
     *
     * @return \OpenAPI\Client\Model\FPHSpedVAPIObjectsSpeditionsRankPermission[]
     */
    public function getRankPermissions()
    {
        return $this->container['rank_permissions'];
    }

    /**
     * Sets rank_permissions
     *
     * @param \OpenAPI\Client\Model\FPHSpedVAPIObjectsSpeditionsRankPermission[] $rank_permissions rank_permissions
     *
     * @return self
     */
    public function setRankPermissions($rank_permissions)
    {
        if (is_null($rank_permissions)) {
            array_push($this->openAPINullablesSetToNull, 'rank_permissions');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('rank_permissions', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['rank_permissions'] = $rank_permissions;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



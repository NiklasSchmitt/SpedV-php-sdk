<?php
/**
 * FPHSpedVAPIObjectsLiveSystemStatistic
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SpedV API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * FPHSpedVAPIObjectsLiveSystemStatistic Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class FPHSpedVAPIObjectsLiveSystemStatistic implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'FPH.SpedV.API.Objects.Live.SystemStatistic';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'last_restart' => '\DateTime',
        'lastrefresh' => '\DateTime',
        'loadcitys' => '\OpenAPI\Client\Model\FPHSpedVAPIObjectsLiveSystemStatisticEntry[]',
        'destcitys' => '\OpenAPI\Client\Model\FPHSpedVAPIObjectsLiveSystemStatisticEntry[]',
        'freights' => '\OpenAPI\Client\Model\FPHSpedVAPIObjectsLiveSystemStatisticEntry[]',
        'usedmaps' => '\OpenAPI\Client\Model\FPHSpedVAPIObjectsLiveSystemStatisticEntry[]',
        'weekly_stats_eur' => '\OpenAPI\Client\Model\FPHSpedVAPIObjectsLiveSystemStatisticEntry[]',
        'weekly_stats_kontor_eur' => '\OpenAPI\Client\Model\FPHSpedVAPIObjectsLiveSystemStatisticEntry[]',
        'weekly_stats_external_eur' => '\OpenAPI\Client\Model\FPHSpedVAPIObjectsLiveSystemStatisticEntry[]',
        'weekly_stats_km' => '\OpenAPI\Client\Model\FPHSpedVAPIObjectsLiveSystemStatisticEntry[]',
        'places' => '\OpenAPI\Client\Model\FPHSpedVAPIObjectsLiveMyPlaceStructure',
        'online_user' => 'int',
        'active_sped_last_month' => 'int',
        'active_user_last_month' => 'int',
        'next_task_id' => 'int',
        'act_ram' => 'int',
        'format_act_ram' => 'string',
        'task_last_day' => 'int',
        'exchange_rate' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'last_restart' => 'date-time',
        'lastrefresh' => 'date-time',
        'loadcitys' => null,
        'destcitys' => null,
        'freights' => null,
        'usedmaps' => null,
        'weekly_stats_eur' => null,
        'weekly_stats_kontor_eur' => null,
        'weekly_stats_external_eur' => null,
        'weekly_stats_km' => null,
        'places' => null,
        'online_user' => 'int32',
        'active_sped_last_month' => 'int32',
        'active_user_last_month' => 'int32',
        'next_task_id' => 'int32',
        'act_ram' => 'int64',
        'format_act_ram' => null,
        'task_last_day' => 'int32',
        'exchange_rate' => 'double'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'last_restart' => false,
        'lastrefresh' => false,
        'loadcitys' => true,
        'destcitys' => true,
        'freights' => true,
        'usedmaps' => true,
        'weekly_stats_eur' => true,
        'weekly_stats_kontor_eur' => true,
        'weekly_stats_external_eur' => true,
        'weekly_stats_km' => true,
        'places' => false,
        'online_user' => false,
        'active_sped_last_month' => false,
        'active_user_last_month' => false,
        'next_task_id' => false,
        'act_ram' => false,
        'format_act_ram' => true,
        'task_last_day' => false,
        'exchange_rate' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'last_restart' => 'lastRestart',
        'lastrefresh' => 'lastrefresh',
        'loadcitys' => 'loadcitys',
        'destcitys' => 'destcitys',
        'freights' => 'freights',
        'usedmaps' => 'usedmaps',
        'weekly_stats_eur' => 'weeklyStatsEUR',
        'weekly_stats_kontor_eur' => 'weeklyStatsKontorEUR',
        'weekly_stats_external_eur' => 'weeklyStatsExternalEUR',
        'weekly_stats_km' => 'weeklyStatsKM',
        'places' => 'places',
        'online_user' => 'onlineUser',
        'active_sped_last_month' => 'activeSpedLastMonth',
        'active_user_last_month' => 'activeUserLastMonth',
        'next_task_id' => 'nextTaskID',
        'act_ram' => 'actRAM',
        'format_act_ram' => 'formatActRAM',
        'task_last_day' => 'taskLastDay',
        'exchange_rate' => 'exchangeRate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'last_restart' => 'setLastRestart',
        'lastrefresh' => 'setLastrefresh',
        'loadcitys' => 'setLoadcitys',
        'destcitys' => 'setDestcitys',
        'freights' => 'setFreights',
        'usedmaps' => 'setUsedmaps',
        'weekly_stats_eur' => 'setWeeklyStatsEur',
        'weekly_stats_kontor_eur' => 'setWeeklyStatsKontorEur',
        'weekly_stats_external_eur' => 'setWeeklyStatsExternalEur',
        'weekly_stats_km' => 'setWeeklyStatsKm',
        'places' => 'setPlaces',
        'online_user' => 'setOnlineUser',
        'active_sped_last_month' => 'setActiveSpedLastMonth',
        'active_user_last_month' => 'setActiveUserLastMonth',
        'next_task_id' => 'setNextTaskId',
        'act_ram' => 'setActRam',
        'format_act_ram' => 'setFormatActRam',
        'task_last_day' => 'setTaskLastDay',
        'exchange_rate' => 'setExchangeRate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'last_restart' => 'getLastRestart',
        'lastrefresh' => 'getLastrefresh',
        'loadcitys' => 'getLoadcitys',
        'destcitys' => 'getDestcitys',
        'freights' => 'getFreights',
        'usedmaps' => 'getUsedmaps',
        'weekly_stats_eur' => 'getWeeklyStatsEur',
        'weekly_stats_kontor_eur' => 'getWeeklyStatsKontorEur',
        'weekly_stats_external_eur' => 'getWeeklyStatsExternalEur',
        'weekly_stats_km' => 'getWeeklyStatsKm',
        'places' => 'getPlaces',
        'online_user' => 'getOnlineUser',
        'active_sped_last_month' => 'getActiveSpedLastMonth',
        'active_user_last_month' => 'getActiveUserLastMonth',
        'next_task_id' => 'getNextTaskId',
        'act_ram' => 'getActRam',
        'format_act_ram' => 'getFormatActRam',
        'task_last_day' => 'getTaskLastDay',
        'exchange_rate' => 'getExchangeRate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('last_restart', $data ?? [], null);
        $this->setIfExists('lastrefresh', $data ?? [], null);
        $this->setIfExists('loadcitys', $data ?? [], null);
        $this->setIfExists('destcitys', $data ?? [], null);
        $this->setIfExists('freights', $data ?? [], null);
        $this->setIfExists('usedmaps', $data ?? [], null);
        $this->setIfExists('weekly_stats_eur', $data ?? [], null);
        $this->setIfExists('weekly_stats_kontor_eur', $data ?? [], null);
        $this->setIfExists('weekly_stats_external_eur', $data ?? [], null);
        $this->setIfExists('weekly_stats_km', $data ?? [], null);
        $this->setIfExists('places', $data ?? [], null);
        $this->setIfExists('online_user', $data ?? [], null);
        $this->setIfExists('active_sped_last_month', $data ?? [], null);
        $this->setIfExists('active_user_last_month', $data ?? [], null);
        $this->setIfExists('next_task_id', $data ?? [], null);
        $this->setIfExists('act_ram', $data ?? [], null);
        $this->setIfExists('format_act_ram', $data ?? [], null);
        $this->setIfExists('task_last_day', $data ?? [], null);
        $this->setIfExists('exchange_rate', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['last_restart'] === null) {
            $invalidProperties[] = "'last_restart' can't be null";
        }
        if ($this->container['lastrefresh'] === null) {
            $invalidProperties[] = "'lastrefresh' can't be null";
        }
        if ($this->container['loadcitys'] === null) {
            $invalidProperties[] = "'loadcitys' can't be null";
        }
        if ($this->container['destcitys'] === null) {
            $invalidProperties[] = "'destcitys' can't be null";
        }
        if ($this->container['freights'] === null) {
            $invalidProperties[] = "'freights' can't be null";
        }
        if ($this->container['usedmaps'] === null) {
            $invalidProperties[] = "'usedmaps' can't be null";
        }
        if ($this->container['weekly_stats_eur'] === null) {
            $invalidProperties[] = "'weekly_stats_eur' can't be null";
        }
        if ($this->container['weekly_stats_kontor_eur'] === null) {
            $invalidProperties[] = "'weekly_stats_kontor_eur' can't be null";
        }
        if ($this->container['weekly_stats_external_eur'] === null) {
            $invalidProperties[] = "'weekly_stats_external_eur' can't be null";
        }
        if ($this->container['weekly_stats_km'] === null) {
            $invalidProperties[] = "'weekly_stats_km' can't be null";
        }
        if ($this->container['places'] === null) {
            $invalidProperties[] = "'places' can't be null";
        }
        if ($this->container['online_user'] === null) {
            $invalidProperties[] = "'online_user' can't be null";
        }
        if ($this->container['active_sped_last_month'] === null) {
            $invalidProperties[] = "'active_sped_last_month' can't be null";
        }
        if ($this->container['active_user_last_month'] === null) {
            $invalidProperties[] = "'active_user_last_month' can't be null";
        }
        if ($this->container['next_task_id'] === null) {
            $invalidProperties[] = "'next_task_id' can't be null";
        }
        if ($this->container['act_ram'] === null) {
            $invalidProperties[] = "'act_ram' can't be null";
        }
        if ($this->container['format_act_ram'] === null) {
            $invalidProperties[] = "'format_act_ram' can't be null";
        }
        if ($this->container['task_last_day'] === null) {
            $invalidProperties[] = "'task_last_day' can't be null";
        }
        if ($this->container['exchange_rate'] === null) {
            $invalidProperties[] = "'exchange_rate' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets last_restart
     *
     * @return \DateTime
     */
    public function getLastRestart()
    {
        return $this->container['last_restart'];
    }

    /**
     * Sets last_restart
     *
     * @param \DateTime $last_restart last_restart
     *
     * @return self
     */
    public function setLastRestart($last_restart)
    {
        if (is_null($last_restart)) {
            throw new \InvalidArgumentException('non-nullable last_restart cannot be null');
        }
        $this->container['last_restart'] = $last_restart;

        return $this;
    }

    /**
     * Gets lastrefresh
     *
     * @return \DateTime
     */
    public function getLastrefresh()
    {
        return $this->container['lastrefresh'];
    }

    /**
     * Sets lastrefresh
     *
     * @param \DateTime $lastrefresh lastrefresh
     *
     * @return self
     */
    public function setLastrefresh($lastrefresh)
    {
        if (is_null($lastrefresh)) {
            throw new \InvalidArgumentException('non-nullable lastrefresh cannot be null');
        }
        $this->container['lastrefresh'] = $lastrefresh;

        return $this;
    }

    /**
     * Gets loadcitys
     *
     * @return \OpenAPI\Client\Model\FPHSpedVAPIObjectsLiveSystemStatisticEntry[]
     */
    public function getLoadcitys()
    {
        return $this->container['loadcitys'];
    }

    /**
     * Sets loadcitys
     *
     * @param \OpenAPI\Client\Model\FPHSpedVAPIObjectsLiveSystemStatisticEntry[] $loadcitys loadcitys
     *
     * @return self
     */
    public function setLoadcitys($loadcitys)
    {
        if (is_null($loadcitys)) {
            array_push($this->openAPINullablesSetToNull, 'loadcitys');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('loadcitys', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['loadcitys'] = $loadcitys;

        return $this;
    }

    /**
     * Gets destcitys
     *
     * @return \OpenAPI\Client\Model\FPHSpedVAPIObjectsLiveSystemStatisticEntry[]
     */
    public function getDestcitys()
    {
        return $this->container['destcitys'];
    }

    /**
     * Sets destcitys
     *
     * @param \OpenAPI\Client\Model\FPHSpedVAPIObjectsLiveSystemStatisticEntry[] $destcitys destcitys
     *
     * @return self
     */
    public function setDestcitys($destcitys)
    {
        if (is_null($destcitys)) {
            array_push($this->openAPINullablesSetToNull, 'destcitys');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('destcitys', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['destcitys'] = $destcitys;

        return $this;
    }

    /**
     * Gets freights
     *
     * @return \OpenAPI\Client\Model\FPHSpedVAPIObjectsLiveSystemStatisticEntry[]
     */
    public function getFreights()
    {
        return $this->container['freights'];
    }

    /**
     * Sets freights
     *
     * @param \OpenAPI\Client\Model\FPHSpedVAPIObjectsLiveSystemStatisticEntry[] $freights freights
     *
     * @return self
     */
    public function setFreights($freights)
    {
        if (is_null($freights)) {
            array_push($this->openAPINullablesSetToNull, 'freights');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('freights', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['freights'] = $freights;

        return $this;
    }

    /**
     * Gets usedmaps
     *
     * @return \OpenAPI\Client\Model\FPHSpedVAPIObjectsLiveSystemStatisticEntry[]
     */
    public function getUsedmaps()
    {
        return $this->container['usedmaps'];
    }

    /**
     * Sets usedmaps
     *
     * @param \OpenAPI\Client\Model\FPHSpedVAPIObjectsLiveSystemStatisticEntry[] $usedmaps usedmaps
     *
     * @return self
     */
    public function setUsedmaps($usedmaps)
    {
        if (is_null($usedmaps)) {
            array_push($this->openAPINullablesSetToNull, 'usedmaps');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('usedmaps', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['usedmaps'] = $usedmaps;

        return $this;
    }

    /**
     * Gets weekly_stats_eur
     *
     * @return \OpenAPI\Client\Model\FPHSpedVAPIObjectsLiveSystemStatisticEntry[]
     */
    public function getWeeklyStatsEur()
    {
        return $this->container['weekly_stats_eur'];
    }

    /**
     * Sets weekly_stats_eur
     *
     * @param \OpenAPI\Client\Model\FPHSpedVAPIObjectsLiveSystemStatisticEntry[] $weekly_stats_eur weekly_stats_eur
     *
     * @return self
     */
    public function setWeeklyStatsEur($weekly_stats_eur)
    {
        if (is_null($weekly_stats_eur)) {
            array_push($this->openAPINullablesSetToNull, 'weekly_stats_eur');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('weekly_stats_eur', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['weekly_stats_eur'] = $weekly_stats_eur;

        return $this;
    }

    /**
     * Gets weekly_stats_kontor_eur
     *
     * @return \OpenAPI\Client\Model\FPHSpedVAPIObjectsLiveSystemStatisticEntry[]
     */
    public function getWeeklyStatsKontorEur()
    {
        return $this->container['weekly_stats_kontor_eur'];
    }

    /**
     * Sets weekly_stats_kontor_eur
     *
     * @param \OpenAPI\Client\Model\FPHSpedVAPIObjectsLiveSystemStatisticEntry[] $weekly_stats_kontor_eur weekly_stats_kontor_eur
     *
     * @return self
     */
    public function setWeeklyStatsKontorEur($weekly_stats_kontor_eur)
    {
        if (is_null($weekly_stats_kontor_eur)) {
            array_push($this->openAPINullablesSetToNull, 'weekly_stats_kontor_eur');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('weekly_stats_kontor_eur', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['weekly_stats_kontor_eur'] = $weekly_stats_kontor_eur;

        return $this;
    }

    /**
     * Gets weekly_stats_external_eur
     *
     * @return \OpenAPI\Client\Model\FPHSpedVAPIObjectsLiveSystemStatisticEntry[]
     */
    public function getWeeklyStatsExternalEur()
    {
        return $this->container['weekly_stats_external_eur'];
    }

    /**
     * Sets weekly_stats_external_eur
     *
     * @param \OpenAPI\Client\Model\FPHSpedVAPIObjectsLiveSystemStatisticEntry[] $weekly_stats_external_eur weekly_stats_external_eur
     *
     * @return self
     */
    public function setWeeklyStatsExternalEur($weekly_stats_external_eur)
    {
        if (is_null($weekly_stats_external_eur)) {
            array_push($this->openAPINullablesSetToNull, 'weekly_stats_external_eur');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('weekly_stats_external_eur', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['weekly_stats_external_eur'] = $weekly_stats_external_eur;

        return $this;
    }

    /**
     * Gets weekly_stats_km
     *
     * @return \OpenAPI\Client\Model\FPHSpedVAPIObjectsLiveSystemStatisticEntry[]
     */
    public function getWeeklyStatsKm()
    {
        return $this->container['weekly_stats_km'];
    }

    /**
     * Sets weekly_stats_km
     *
     * @param \OpenAPI\Client\Model\FPHSpedVAPIObjectsLiveSystemStatisticEntry[] $weekly_stats_km weekly_stats_km
     *
     * @return self
     */
    public function setWeeklyStatsKm($weekly_stats_km)
    {
        if (is_null($weekly_stats_km)) {
            array_push($this->openAPINullablesSetToNull, 'weekly_stats_km');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('weekly_stats_km', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['weekly_stats_km'] = $weekly_stats_km;

        return $this;
    }

    /**
     * Gets places
     *
     * @return \OpenAPI\Client\Model\FPHSpedVAPIObjectsLiveMyPlaceStructure
     */
    public function getPlaces()
    {
        return $this->container['places'];
    }

    /**
     * Sets places
     *
     * @param \OpenAPI\Client\Model\FPHSpedVAPIObjectsLiveMyPlaceStructure $places places
     *
     * @return self
     */
    public function setPlaces($places)
    {
        if (is_null($places)) {
            throw new \InvalidArgumentException('non-nullable places cannot be null');
        }
        $this->container['places'] = $places;

        return $this;
    }

    /**
     * Gets online_user
     *
     * @return int
     */
    public function getOnlineUser()
    {
        return $this->container['online_user'];
    }

    /**
     * Sets online_user
     *
     * @param int $online_user online_user
     *
     * @return self
     */
    public function setOnlineUser($online_user)
    {
        if (is_null($online_user)) {
            throw new \InvalidArgumentException('non-nullable online_user cannot be null');
        }
        $this->container['online_user'] = $online_user;

        return $this;
    }

    /**
     * Gets active_sped_last_month
     *
     * @return int
     */
    public function getActiveSpedLastMonth()
    {
        return $this->container['active_sped_last_month'];
    }

    /**
     * Sets active_sped_last_month
     *
     * @param int $active_sped_last_month active_sped_last_month
     *
     * @return self
     */
    public function setActiveSpedLastMonth($active_sped_last_month)
    {
        if (is_null($active_sped_last_month)) {
            throw new \InvalidArgumentException('non-nullable active_sped_last_month cannot be null');
        }
        $this->container['active_sped_last_month'] = $active_sped_last_month;

        return $this;
    }

    /**
     * Gets active_user_last_month
     *
     * @return int
     */
    public function getActiveUserLastMonth()
    {
        return $this->container['active_user_last_month'];
    }

    /**
     * Sets active_user_last_month
     *
     * @param int $active_user_last_month active_user_last_month
     *
     * @return self
     */
    public function setActiveUserLastMonth($active_user_last_month)
    {
        if (is_null($active_user_last_month)) {
            throw new \InvalidArgumentException('non-nullable active_user_last_month cannot be null');
        }
        $this->container['active_user_last_month'] = $active_user_last_month;

        return $this;
    }

    /**
     * Gets next_task_id
     *
     * @return int
     */
    public function getNextTaskId()
    {
        return $this->container['next_task_id'];
    }

    /**
     * Sets next_task_id
     *
     * @param int $next_task_id next_task_id
     *
     * @return self
     */
    public function setNextTaskId($next_task_id)
    {
        if (is_null($next_task_id)) {
            throw new \InvalidArgumentException('non-nullable next_task_id cannot be null');
        }
        $this->container['next_task_id'] = $next_task_id;

        return $this;
    }

    /**
     * Gets act_ram
     *
     * @return int
     */
    public function getActRam()
    {
        return $this->container['act_ram'];
    }

    /**
     * Sets act_ram
     *
     * @param int $act_ram act_ram
     *
     * @return self
     */
    public function setActRam($act_ram)
    {
        if (is_null($act_ram)) {
            throw new \InvalidArgumentException('non-nullable act_ram cannot be null');
        }
        $this->container['act_ram'] = $act_ram;

        return $this;
    }

    /**
     * Gets format_act_ram
     *
     * @return string
     */
    public function getFormatActRam()
    {
        return $this->container['format_act_ram'];
    }

    /**
     * Sets format_act_ram
     *
     * @param string $format_act_ram format_act_ram
     *
     * @return self
     */
    public function setFormatActRam($format_act_ram)
    {
        if (is_null($format_act_ram)) {
            array_push($this->openAPINullablesSetToNull, 'format_act_ram');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('format_act_ram', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['format_act_ram'] = $format_act_ram;

        return $this;
    }

    /**
     * Gets task_last_day
     *
     * @return int
     */
    public function getTaskLastDay()
    {
        return $this->container['task_last_day'];
    }

    /**
     * Sets task_last_day
     *
     * @param int $task_last_day task_last_day
     *
     * @return self
     */
    public function setTaskLastDay($task_last_day)
    {
        if (is_null($task_last_day)) {
            throw new \InvalidArgumentException('non-nullable task_last_day cannot be null');
        }
        $this->container['task_last_day'] = $task_last_day;

        return $this;
    }

    /**
     * Gets exchange_rate
     *
     * @return float
     */
    public function getExchangeRate()
    {
        return $this->container['exchange_rate'];
    }

    /**
     * Sets exchange_rate
     *
     * @param float $exchange_rate exchange_rate
     *
     * @return self
     */
    public function setExchangeRate($exchange_rate)
    {
        if (is_null($exchange_rate)) {
            throw new \InvalidArgumentException('non-nullable exchange_rate cannot be null');
        }
        $this->container['exchange_rate'] = $exchange_rate;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



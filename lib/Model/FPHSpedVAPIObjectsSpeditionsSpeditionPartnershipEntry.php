<?php
/**
 * FPHSpedVAPIObjectsSpeditionsSpeditionPartnershipEntry
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SpedV API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * FPHSpedVAPIObjectsSpeditionsSpeditionPartnershipEntry Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class FPHSpedVAPIObjectsSpeditionsSpeditionPartnershipEntry implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'FPH.SpedV.API.Objects.Speditions.SpeditionPartnershipEntry';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'init_spedition' => '\OpenAPI\Client\Model\FPHSpedVAPIObjectsSpeditionsSpedition',
        'object_spedition' => '\OpenAPI\Client\Model\FPHSpedVAPIObjectsSpeditionsSpedition',
        'accepted' => 'bool',
        'kontor_trailer_usage' => 'bool',
        'kontor_user_assignment' => 'bool',
        'kontor_accept_intern_deduction' => 'bool',
        'kontor_km_fee' => 'float',
        'assign_truck' => 'bool',
        'use_free_truck' => 'bool',
        'use_branches' => 'bool',
        'access_money' => 'bool',
        'share_convoy_info' => 'bool',
        'fee_percent' => 'float',
        'fee_monthly' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int32',
        'init_spedition' => null,
        'object_spedition' => null,
        'accepted' => null,
        'kontor_trailer_usage' => null,
        'kontor_user_assignment' => null,
        'kontor_accept_intern_deduction' => null,
        'kontor_km_fee' => 'double',
        'assign_truck' => null,
        'use_free_truck' => null,
        'use_branches' => null,
        'access_money' => null,
        'share_convoy_info' => null,
        'fee_percent' => 'double',
        'fee_monthly' => 'double'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'init_spedition' => true,
        'object_spedition' => true,
        'accepted' => false,
        'kontor_trailer_usage' => false,
        'kontor_user_assignment' => false,
        'kontor_accept_intern_deduction' => false,
        'kontor_km_fee' => false,
        'assign_truck' => false,
        'use_free_truck' => false,
        'use_branches' => false,
        'access_money' => false,
        'share_convoy_info' => false,
        'fee_percent' => false,
        'fee_monthly' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'init_spedition' => 'initSpedition',
        'object_spedition' => 'objectSpedition',
        'accepted' => 'accepted',
        'kontor_trailer_usage' => 'kontorTrailerUsage',
        'kontor_user_assignment' => 'kontorUserAssignment',
        'kontor_accept_intern_deduction' => 'kontorAcceptInternDeduction',
        'kontor_km_fee' => 'kontorKMFee',
        'assign_truck' => 'assignTruck',
        'use_free_truck' => 'useFreeTruck',
        'use_branches' => 'useBranches',
        'access_money' => 'accessMoney',
        'share_convoy_info' => 'shareConvoyInfo',
        'fee_percent' => 'feePercent',
        'fee_monthly' => 'feeMonthly'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'init_spedition' => 'setInitSpedition',
        'object_spedition' => 'setObjectSpedition',
        'accepted' => 'setAccepted',
        'kontor_trailer_usage' => 'setKontorTrailerUsage',
        'kontor_user_assignment' => 'setKontorUserAssignment',
        'kontor_accept_intern_deduction' => 'setKontorAcceptInternDeduction',
        'kontor_km_fee' => 'setKontorKmFee',
        'assign_truck' => 'setAssignTruck',
        'use_free_truck' => 'setUseFreeTruck',
        'use_branches' => 'setUseBranches',
        'access_money' => 'setAccessMoney',
        'share_convoy_info' => 'setShareConvoyInfo',
        'fee_percent' => 'setFeePercent',
        'fee_monthly' => 'setFeeMonthly'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'init_spedition' => 'getInitSpedition',
        'object_spedition' => 'getObjectSpedition',
        'accepted' => 'getAccepted',
        'kontor_trailer_usage' => 'getKontorTrailerUsage',
        'kontor_user_assignment' => 'getKontorUserAssignment',
        'kontor_accept_intern_deduction' => 'getKontorAcceptInternDeduction',
        'kontor_km_fee' => 'getKontorKmFee',
        'assign_truck' => 'getAssignTruck',
        'use_free_truck' => 'getUseFreeTruck',
        'use_branches' => 'getUseBranches',
        'access_money' => 'getAccessMoney',
        'share_convoy_info' => 'getShareConvoyInfo',
        'fee_percent' => 'getFeePercent',
        'fee_monthly' => 'getFeeMonthly'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('init_spedition', $data ?? [], null);
        $this->setIfExists('object_spedition', $data ?? [], null);
        $this->setIfExists('accepted', $data ?? [], null);
        $this->setIfExists('kontor_trailer_usage', $data ?? [], null);
        $this->setIfExists('kontor_user_assignment', $data ?? [], null);
        $this->setIfExists('kontor_accept_intern_deduction', $data ?? [], null);
        $this->setIfExists('kontor_km_fee', $data ?? [], null);
        $this->setIfExists('assign_truck', $data ?? [], null);
        $this->setIfExists('use_free_truck', $data ?? [], null);
        $this->setIfExists('use_branches', $data ?? [], null);
        $this->setIfExists('access_money', $data ?? [], null);
        $this->setIfExists('share_convoy_info', $data ?? [], null);
        $this->setIfExists('fee_percent', $data ?? [], null);
        $this->setIfExists('fee_monthly', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['init_spedition'] === null) {
            $invalidProperties[] = "'init_spedition' can't be null";
        }
        if ($this->container['object_spedition'] === null) {
            $invalidProperties[] = "'object_spedition' can't be null";
        }
        if ($this->container['accepted'] === null) {
            $invalidProperties[] = "'accepted' can't be null";
        }
        if ($this->container['kontor_trailer_usage'] === null) {
            $invalidProperties[] = "'kontor_trailer_usage' can't be null";
        }
        if ($this->container['kontor_user_assignment'] === null) {
            $invalidProperties[] = "'kontor_user_assignment' can't be null";
        }
        if ($this->container['kontor_accept_intern_deduction'] === null) {
            $invalidProperties[] = "'kontor_accept_intern_deduction' can't be null";
        }
        if ($this->container['kontor_km_fee'] === null) {
            $invalidProperties[] = "'kontor_km_fee' can't be null";
        }
        if ($this->container['assign_truck'] === null) {
            $invalidProperties[] = "'assign_truck' can't be null";
        }
        if ($this->container['use_free_truck'] === null) {
            $invalidProperties[] = "'use_free_truck' can't be null";
        }
        if ($this->container['use_branches'] === null) {
            $invalidProperties[] = "'use_branches' can't be null";
        }
        if ($this->container['access_money'] === null) {
            $invalidProperties[] = "'access_money' can't be null";
        }
        if ($this->container['share_convoy_info'] === null) {
            $invalidProperties[] = "'share_convoy_info' can't be null";
        }
        if ($this->container['fee_percent'] === null) {
            $invalidProperties[] = "'fee_percent' can't be null";
        }
        if ($this->container['fee_monthly'] === null) {
            $invalidProperties[] = "'fee_monthly' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets init_spedition
     *
     * @return \OpenAPI\Client\Model\FPHSpedVAPIObjectsSpeditionsSpedition
     */
    public function getInitSpedition()
    {
        return $this->container['init_spedition'];
    }

    /**
     * Sets init_spedition
     *
     * @param \OpenAPI\Client\Model\FPHSpedVAPIObjectsSpeditionsSpedition $init_spedition init_spedition
     *
     * @return self
     */
    public function setInitSpedition($init_spedition)
    {
        if (is_null($init_spedition)) {
            array_push($this->openAPINullablesSetToNull, 'init_spedition');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('init_spedition', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['init_spedition'] = $init_spedition;

        return $this;
    }

    /**
     * Gets object_spedition
     *
     * @return \OpenAPI\Client\Model\FPHSpedVAPIObjectsSpeditionsSpedition
     */
    public function getObjectSpedition()
    {
        return $this->container['object_spedition'];
    }

    /**
     * Sets object_spedition
     *
     * @param \OpenAPI\Client\Model\FPHSpedVAPIObjectsSpeditionsSpedition $object_spedition object_spedition
     *
     * @return self
     */
    public function setObjectSpedition($object_spedition)
    {
        if (is_null($object_spedition)) {
            array_push($this->openAPINullablesSetToNull, 'object_spedition');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('object_spedition', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['object_spedition'] = $object_spedition;

        return $this;
    }

    /**
     * Gets accepted
     *
     * @return bool
     */
    public function getAccepted()
    {
        return $this->container['accepted'];
    }

    /**
     * Sets accepted
     *
     * @param bool $accepted accepted
     *
     * @return self
     */
    public function setAccepted($accepted)
    {
        if (is_null($accepted)) {
            throw new \InvalidArgumentException('non-nullable accepted cannot be null');
        }
        $this->container['accepted'] = $accepted;

        return $this;
    }

    /**
     * Gets kontor_trailer_usage
     *
     * @return bool
     */
    public function getKontorTrailerUsage()
    {
        return $this->container['kontor_trailer_usage'];
    }

    /**
     * Sets kontor_trailer_usage
     *
     * @param bool $kontor_trailer_usage kontor_trailer_usage
     *
     * @return self
     */
    public function setKontorTrailerUsage($kontor_trailer_usage)
    {
        if (is_null($kontor_trailer_usage)) {
            throw new \InvalidArgumentException('non-nullable kontor_trailer_usage cannot be null');
        }
        $this->container['kontor_trailer_usage'] = $kontor_trailer_usage;

        return $this;
    }

    /**
     * Gets kontor_user_assignment
     *
     * @return bool
     */
    public function getKontorUserAssignment()
    {
        return $this->container['kontor_user_assignment'];
    }

    /**
     * Sets kontor_user_assignment
     *
     * @param bool $kontor_user_assignment kontor_user_assignment
     *
     * @return self
     */
    public function setKontorUserAssignment($kontor_user_assignment)
    {
        if (is_null($kontor_user_assignment)) {
            throw new \InvalidArgumentException('non-nullable kontor_user_assignment cannot be null');
        }
        $this->container['kontor_user_assignment'] = $kontor_user_assignment;

        return $this;
    }

    /**
     * Gets kontor_accept_intern_deduction
     *
     * @return bool
     */
    public function getKontorAcceptInternDeduction()
    {
        return $this->container['kontor_accept_intern_deduction'];
    }

    /**
     * Sets kontor_accept_intern_deduction
     *
     * @param bool $kontor_accept_intern_deduction kontor_accept_intern_deduction
     *
     * @return self
     */
    public function setKontorAcceptInternDeduction($kontor_accept_intern_deduction)
    {
        if (is_null($kontor_accept_intern_deduction)) {
            throw new \InvalidArgumentException('non-nullable kontor_accept_intern_deduction cannot be null');
        }
        $this->container['kontor_accept_intern_deduction'] = $kontor_accept_intern_deduction;

        return $this;
    }

    /**
     * Gets kontor_km_fee
     *
     * @return float
     */
    public function getKontorKmFee()
    {
        return $this->container['kontor_km_fee'];
    }

    /**
     * Sets kontor_km_fee
     *
     * @param float $kontor_km_fee kontor_km_fee
     *
     * @return self
     */
    public function setKontorKmFee($kontor_km_fee)
    {
        if (is_null($kontor_km_fee)) {
            throw new \InvalidArgumentException('non-nullable kontor_km_fee cannot be null');
        }
        $this->container['kontor_km_fee'] = $kontor_km_fee;

        return $this;
    }

    /**
     * Gets assign_truck
     *
     * @return bool
     */
    public function getAssignTruck()
    {
        return $this->container['assign_truck'];
    }

    /**
     * Sets assign_truck
     *
     * @param bool $assign_truck assign_truck
     *
     * @return self
     */
    public function setAssignTruck($assign_truck)
    {
        if (is_null($assign_truck)) {
            throw new \InvalidArgumentException('non-nullable assign_truck cannot be null');
        }
        $this->container['assign_truck'] = $assign_truck;

        return $this;
    }

    /**
     * Gets use_free_truck
     *
     * @return bool
     */
    public function getUseFreeTruck()
    {
        return $this->container['use_free_truck'];
    }

    /**
     * Sets use_free_truck
     *
     * @param bool $use_free_truck use_free_truck
     *
     * @return self
     */
    public function setUseFreeTruck($use_free_truck)
    {
        if (is_null($use_free_truck)) {
            throw new \InvalidArgumentException('non-nullable use_free_truck cannot be null');
        }
        $this->container['use_free_truck'] = $use_free_truck;

        return $this;
    }

    /**
     * Gets use_branches
     *
     * @return bool
     */
    public function getUseBranches()
    {
        return $this->container['use_branches'];
    }

    /**
     * Sets use_branches
     *
     * @param bool $use_branches use_branches
     *
     * @return self
     */
    public function setUseBranches($use_branches)
    {
        if (is_null($use_branches)) {
            throw new \InvalidArgumentException('non-nullable use_branches cannot be null');
        }
        $this->container['use_branches'] = $use_branches;

        return $this;
    }

    /**
     * Gets access_money
     *
     * @return bool
     */
    public function getAccessMoney()
    {
        return $this->container['access_money'];
    }

    /**
     * Sets access_money
     *
     * @param bool $access_money access_money
     *
     * @return self
     */
    public function setAccessMoney($access_money)
    {
        if (is_null($access_money)) {
            throw new \InvalidArgumentException('non-nullable access_money cannot be null');
        }
        $this->container['access_money'] = $access_money;

        return $this;
    }

    /**
     * Gets share_convoy_info
     *
     * @return bool
     */
    public function getShareConvoyInfo()
    {
        return $this->container['share_convoy_info'];
    }

    /**
     * Sets share_convoy_info
     *
     * @param bool $share_convoy_info share_convoy_info
     *
     * @return self
     */
    public function setShareConvoyInfo($share_convoy_info)
    {
        if (is_null($share_convoy_info)) {
            throw new \InvalidArgumentException('non-nullable share_convoy_info cannot be null');
        }
        $this->container['share_convoy_info'] = $share_convoy_info;

        return $this;
    }

    /**
     * Gets fee_percent
     *
     * @return float
     */
    public function getFeePercent()
    {
        return $this->container['fee_percent'];
    }

    /**
     * Sets fee_percent
     *
     * @param float $fee_percent fee_percent
     *
     * @return self
     */
    public function setFeePercent($fee_percent)
    {
        if (is_null($fee_percent)) {
            throw new \InvalidArgumentException('non-nullable fee_percent cannot be null');
        }
        $this->container['fee_percent'] = $fee_percent;

        return $this;
    }

    /**
     * Gets fee_monthly
     *
     * @return float
     */
    public function getFeeMonthly()
    {
        return $this->container['fee_monthly'];
    }

    /**
     * Sets fee_monthly
     *
     * @param float $fee_monthly fee_monthly
     *
     * @return self
     */
    public function setFeeMonthly($fee_monthly)
    {
        if (is_null($fee_monthly)) {
            throw new \InvalidArgumentException('non-nullable fee_monthly cannot be null');
        }
        $this->container['fee_monthly'] = $fee_monthly;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


